
OS_MPZ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000825c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080083f4  080083f4  000183f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800846c  0800846c  00020124  2**0
                  CONTENTS
  4 .ARM          00000008  0800846c  0800846c  0001846c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008474  08008474  00020124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008474  08008474  00018474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008478  08008478  00018478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  0800847c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010c84  20000124  080085a0  00020124  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20010da8  080085a0  00020da8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e689  00000000  00000000  00020197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f9d  00000000  00000000  0002e820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  000317c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000090f  00000000  00000000  00032418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018968  00000000  00000000  00032d27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011a49  00000000  00000000  0004b68f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008737a  00000000  00000000  0005d0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003098  00000000  00000000  000e4454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e74ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000124 	.word	0x20000124
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080083dc 	.word	0x080083dc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000128 	.word	0x20000128
 80001d4:	080083dc 	.word	0x080083dc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 f944 	bl	8000764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f806 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f86c 	bl	80005bc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004e4:	f007 fa5e 	bl	80079a4 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <main+0x14>
	...

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b094      	sub	sp, #80	; 0x50
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0320 	add.w	r3, r7, #32
 80004f6:	2230      	movs	r2, #48	; 0x30
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f007 ff34 	bl	8008368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	f107 030c 	add.w	r3, r7, #12
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000510:	2300      	movs	r3, #0
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	4b27      	ldr	r3, [pc, #156]	; (80005b4 <SystemClock_Config+0xc8>)
 8000516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000518:	4a26      	ldr	r2, [pc, #152]	; (80005b4 <SystemClock_Config+0xc8>)
 800051a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051e:	6413      	str	r3, [r2, #64]	; 0x40
 8000520:	4b24      	ldr	r3, [pc, #144]	; (80005b4 <SystemClock_Config+0xc8>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800052c:	2300      	movs	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	4b21      	ldr	r3, [pc, #132]	; (80005b8 <SystemClock_Config+0xcc>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a20      	ldr	r2, [pc, #128]	; (80005b8 <SystemClock_Config+0xcc>)
 8000536:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	4b1e      	ldr	r3, [pc, #120]	; (80005b8 <SystemClock_Config+0xcc>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000548:	2301      	movs	r3, #1
 800054a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800054c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000550:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000552:	2302      	movs	r3, #2
 8000554:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000556:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800055a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800055c:	2304      	movs	r3, #4
 800055e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000560:	23c0      	movs	r3, #192	; 0xc0
 8000562:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000564:	2304      	movs	r3, #4
 8000566:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000568:	2308      	movs	r3, #8
 800056a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	f107 0320 	add.w	r3, r7, #32
 8000570:	4618      	mov	r0, r3
 8000572:	f001 fecd 	bl	8002310 <HAL_RCC_OscConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800057c:	f000 f854 	bl	8000628 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000580:	230f      	movs	r3, #15
 8000582:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000584:	2302      	movs	r3, #2
 8000586:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800058c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000590:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	2103      	movs	r1, #3
 800059c:	4618      	mov	r0, r3
 800059e:	f002 f92f 	bl	8002800 <HAL_RCC_ClockConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005a8:	f000 f83e 	bl	8000628 <Error_Handler>
  }
}
 80005ac:	bf00      	nop
 80005ae:	3750      	adds	r7, #80	; 0x50
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40007000 	.word	0x40007000

080005bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	4b17      	ldr	r3, [pc, #92]	; (8000624 <MX_GPIO_Init+0x68>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a16      	ldr	r2, [pc, #88]	; (8000624 <MX_GPIO_Init+0x68>)
 80005cc:	f043 0304 	orr.w	r3, r3, #4
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_GPIO_Init+0x68>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0304 	and.w	r3, r3, #4
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <MX_GPIO_Init+0x68>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a0f      	ldr	r2, [pc, #60]	; (8000624 <MX_GPIO_Init+0x68>)
 80005e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <MX_GPIO_Init+0x68>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_GPIO_Init+0x68>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a08      	ldr	r2, [pc, #32]	; (8000624 <MX_GPIO_Init+0x68>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_GPIO_Init+0x68>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000616:	bf00      	nop
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800

08000628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800062c:	b672      	cpsid	i
}
 800062e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000630:	e7fe      	b.n	8000630 <Error_Handler+0x8>
	...

08000634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <HAL_MspInit+0x4c>)
 8000640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000642:	4a0f      	ldr	r2, [pc, #60]	; (8000680 <HAL_MspInit+0x4c>)
 8000644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000648:	6453      	str	r3, [r2, #68]	; 0x44
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <HAL_MspInit+0x4c>)
 800064c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800064e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	603b      	str	r3, [r7, #0]
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <HAL_MspInit+0x4c>)
 800065c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065e:	4a08      	ldr	r2, [pc, #32]	; (8000680 <HAL_MspInit+0x4c>)
 8000660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000664:	6413      	str	r3, [r2, #64]	; 0x40
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_MspInit+0x4c>)
 8000668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000672:	2007      	movs	r0, #7
 8000674:	f000 f9dc 	bl	8000a30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40023800 	.word	0x40023800

08000684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000688:	e7fe      	b.n	8000688 <NMI_Handler+0x4>

0800068a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068e:	e7fe      	b.n	800068e <HardFault_Handler+0x4>

08000690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <MemManage_Handler+0x4>

08000696 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069a:	e7fe      	b.n	800069a <BusFault_Handler+0x4>

0800069c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <UsageFault_Handler+0x4>

080006a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d0:	f000 f89a 	bl	8000808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80006dc:	4802      	ldr	r0, [pc, #8]	; (80006e8 <OTG_FS_IRQHandler+0x10>)
 80006de:	f000 fcbd 	bl	800105c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20010624 	.word	0x20010624

080006ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <SystemInit+0x20>)
 80006f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006f6:	4a05      	ldr	r2, [pc, #20]	; (800070c <SystemInit+0x20>)
 80006f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000748 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000714:	480d      	ldr	r0, [pc, #52]	; (800074c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000716:	490e      	ldr	r1, [pc, #56]	; (8000750 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000718:	4a0e      	ldr	r2, [pc, #56]	; (8000754 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800071c:	e002      	b.n	8000724 <LoopCopyDataInit>

0800071e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000722:	3304      	adds	r3, #4

08000724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000728:	d3f9      	bcc.n	800071e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072a:	4a0b      	ldr	r2, [pc, #44]	; (8000758 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800072c:	4c0b      	ldr	r4, [pc, #44]	; (800075c <LoopFillZerobss+0x26>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000730:	e001      	b.n	8000736 <LoopFillZerobss>

08000732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000734:	3204      	adds	r2, #4

08000736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000738:	d3fb      	bcc.n	8000732 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800073a:	f7ff ffd7 	bl	80006ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800073e:	f007 fe1b 	bl	8008378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000742:	f7ff fec7 	bl	80004d4 <main>
  bx  lr    
 8000746:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000748:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800074c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000750:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 8000754:	0800847c 	.word	0x0800847c
  ldr r2, =_sbss
 8000758:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 800075c:	20010da8 	.word	0x20010da8

08000760 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000760:	e7fe      	b.n	8000760 <ADC_IRQHandler>
	...

08000764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000768:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <HAL_Init+0x40>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a0d      	ldr	r2, [pc, #52]	; (80007a4 <HAL_Init+0x40>)
 800076e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000772:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000774:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <HAL_Init+0x40>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <HAL_Init+0x40>)
 800077a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800077e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <HAL_Init+0x40>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a07      	ldr	r2, [pc, #28]	; (80007a4 <HAL_Init+0x40>)
 8000786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800078a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800078c:	2003      	movs	r0, #3
 800078e:	f000 f94f 	bl	8000a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000792:	2000      	movs	r0, #0
 8000794:	f000 f808 	bl	80007a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000798:	f7ff ff4c 	bl	8000634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023c00 	.word	0x40023c00

080007a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <HAL_InitTick+0x54>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_InitTick+0x58>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4619      	mov	r1, r3
 80007ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007be:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 f967 	bl	8000a9a <HAL_SYSTICK_Config>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
 80007d4:	e00e      	b.n	80007f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2b0f      	cmp	r3, #15
 80007da:	d80a      	bhi.n	80007f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007dc:	2200      	movs	r2, #0
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295
 80007e4:	f000 f92f 	bl	8000a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e8:	4a06      	ldr	r2, [pc, #24]	; (8000804 <HAL_InitTick+0x5c>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ee:	2300      	movs	r3, #0
 80007f0:	e000      	b.n	80007f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000000 	.word	0x20000000
 8000800:	20000008 	.word	0x20000008
 8000804:	20000004 	.word	0x20000004

08000808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_IncTick+0x20>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_IncTick+0x24>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4413      	add	r3, r2
 8000818:	4a04      	ldr	r2, [pc, #16]	; (800082c <HAL_IncTick+0x24>)
 800081a:	6013      	str	r3, [r2, #0]
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	20000008 	.word	0x20000008
 800082c:	20000140 	.word	0x20000140

08000830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return uwTick;
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <HAL_GetTick+0x14>)
 8000836:	681b      	ldr	r3, [r3, #0]
}
 8000838:	4618      	mov	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	20000140 	.word	0x20000140

08000848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000850:	f7ff ffee 	bl	8000830 <HAL_GetTick>
 8000854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000860:	d005      	beq.n	800086e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000862:	4b0a      	ldr	r3, [pc, #40]	; (800088c <HAL_Delay+0x44>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	461a      	mov	r2, r3
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	4413      	add	r3, r2
 800086c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800086e:	bf00      	nop
 8000870:	f7ff ffde 	bl	8000830 <HAL_GetTick>
 8000874:	4602      	mov	r2, r0
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	429a      	cmp	r2, r3
 800087e:	d8f7      	bhi.n	8000870 <HAL_Delay+0x28>
  {
  }
}
 8000880:	bf00      	nop
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000008 	.word	0x20000008

08000890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <__NVIC_SetPriorityGrouping+0x44>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008a6:	68ba      	ldr	r2, [r7, #8]
 80008a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008ac:	4013      	ands	r3, r2
 80008ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008c2:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <__NVIC_SetPriorityGrouping+0x44>)
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	60d3      	str	r3, [r2, #12]
}
 80008c8:	bf00      	nop
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008dc:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <__NVIC_GetPriorityGrouping+0x18>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	0a1b      	lsrs	r3, r3, #8
 80008e2:	f003 0307 	and.w	r3, r3, #7
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000902:	2b00      	cmp	r3, #0
 8000904:	db0b      	blt.n	800091e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	f003 021f 	and.w	r2, r3, #31
 800090c:	4907      	ldr	r1, [pc, #28]	; (800092c <__NVIC_EnableIRQ+0x38>)
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	095b      	lsrs	r3, r3, #5
 8000914:	2001      	movs	r0, #1
 8000916:	fa00 f202 	lsl.w	r2, r0, r2
 800091a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000e100 	.word	0xe000e100

08000930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	6039      	str	r1, [r7, #0]
 800093a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800093c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000940:	2b00      	cmp	r3, #0
 8000942:	db0a      	blt.n	800095a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	b2da      	uxtb	r2, r3
 8000948:	490c      	ldr	r1, [pc, #48]	; (800097c <__NVIC_SetPriority+0x4c>)
 800094a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094e:	0112      	lsls	r2, r2, #4
 8000950:	b2d2      	uxtb	r2, r2
 8000952:	440b      	add	r3, r1
 8000954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000958:	e00a      	b.n	8000970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4908      	ldr	r1, [pc, #32]	; (8000980 <__NVIC_SetPriority+0x50>)
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	f003 030f 	and.w	r3, r3, #15
 8000966:	3b04      	subs	r3, #4
 8000968:	0112      	lsls	r2, r2, #4
 800096a:	b2d2      	uxtb	r2, r2
 800096c:	440b      	add	r3, r1
 800096e:	761a      	strb	r2, [r3, #24]
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	e000e100 	.word	0xe000e100
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000984:	b480      	push	{r7}
 8000986:	b089      	sub	sp, #36	; 0x24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	f1c3 0307 	rsb	r3, r3, #7
 800099e:	2b04      	cmp	r3, #4
 80009a0:	bf28      	it	cs
 80009a2:	2304      	movcs	r3, #4
 80009a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	3304      	adds	r3, #4
 80009aa:	2b06      	cmp	r3, #6
 80009ac:	d902      	bls.n	80009b4 <NVIC_EncodePriority+0x30>
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3b03      	subs	r3, #3
 80009b2:	e000      	b.n	80009b6 <NVIC_EncodePriority+0x32>
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b8:	f04f 32ff 	mov.w	r2, #4294967295
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43da      	mvns	r2, r3
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	401a      	ands	r2, r3
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009cc:	f04f 31ff 	mov.w	r1, #4294967295
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	fa01 f303 	lsl.w	r3, r1, r3
 80009d6:	43d9      	mvns	r1, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009dc:	4313      	orrs	r3, r2
         );
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3724      	adds	r7, #36	; 0x24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009fc:	d301      	bcc.n	8000a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00f      	b.n	8000a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <SysTick_Config+0x40>)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a0a:	210f      	movs	r1, #15
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	f7ff ff8e 	bl	8000930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <SysTick_Config+0x40>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a1a:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <SysTick_Config+0x40>)
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	e000e010 	.word	0xe000e010

08000a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff ff29 	bl	8000890 <__NVIC_SetPriorityGrouping>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b086      	sub	sp, #24
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
 8000a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a58:	f7ff ff3e 	bl	80008d8 <__NVIC_GetPriorityGrouping>
 8000a5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	68b9      	ldr	r1, [r7, #8]
 8000a62:	6978      	ldr	r0, [r7, #20]
 8000a64:	f7ff ff8e 	bl	8000984 <NVIC_EncodePriority>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff5d 	bl	8000930 <__NVIC_SetPriority>
}
 8000a76:	bf00      	nop
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	4603      	mov	r3, r0
 8000a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff31 	bl	80008f4 <__NVIC_EnableIRQ>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff ffa2 	bl	80009ec <SysTick_Config>
 8000aa8:	4603      	mov	r3, r0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b089      	sub	sp, #36	; 0x24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
 8000ace:	e159      	b.n	8000d84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	697a      	ldr	r2, [r7, #20]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	f040 8148 	bne.w	8000d7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f003 0303 	and.w	r3, r3, #3
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d005      	beq.n	8000b06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b02:	2b02      	cmp	r3, #2
 8000b04:	d130      	bne.n	8000b68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	2203      	movs	r2, #3
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43db      	mvns	r3, r3
 8000b18:	69ba      	ldr	r2, [r7, #24]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	68da      	ldr	r2, [r3, #12]
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	69ba      	ldr	r2, [r7, #24]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	69ba      	ldr	r2, [r7, #24]
 8000b34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	43db      	mvns	r3, r3
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	091b      	lsrs	r3, r3, #4
 8000b52:	f003 0201 	and.w	r2, r3, #1
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	69ba      	ldr	r2, [r7, #24]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f003 0303 	and.w	r3, r3, #3
 8000b70:	2b03      	cmp	r3, #3
 8000b72:	d017      	beq.n	8000ba4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	2203      	movs	r2, #3
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	43db      	mvns	r3, r3
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	689a      	ldr	r2, [r3, #8]
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	69ba      	ldr	r2, [r7, #24]
 8000ba2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f003 0303 	and.w	r3, r3, #3
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d123      	bne.n	8000bf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	08da      	lsrs	r2, r3, #3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3208      	adds	r2, #8
 8000bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	f003 0307 	and.w	r3, r3, #7
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	220f      	movs	r2, #15
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	691a      	ldr	r2, [r3, #16]
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	08da      	lsrs	r2, r3, #3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3208      	adds	r2, #8
 8000bf2:	69b9      	ldr	r1, [r7, #24]
 8000bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	2203      	movs	r2, #3
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f003 0203 	and.w	r2, r3, #3
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	f000 80a2 	beq.w	8000d7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b57      	ldr	r3, [pc, #348]	; (8000d9c <HAL_GPIO_Init+0x2e8>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	4a56      	ldr	r2, [pc, #344]	; (8000d9c <HAL_GPIO_Init+0x2e8>)
 8000c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c48:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4a:	4b54      	ldr	r3, [pc, #336]	; (8000d9c <HAL_GPIO_Init+0x2e8>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c56:	4a52      	ldr	r2, [pc, #328]	; (8000da0 <HAL_GPIO_Init+0x2ec>)
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	089b      	lsrs	r3, r3, #2
 8000c5c:	3302      	adds	r3, #2
 8000c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f003 0303 	and.w	r3, r3, #3
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	220f      	movs	r2, #15
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	4013      	ands	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a49      	ldr	r2, [pc, #292]	; (8000da4 <HAL_GPIO_Init+0x2f0>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d019      	beq.n	8000cb6 <HAL_GPIO_Init+0x202>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a48      	ldr	r2, [pc, #288]	; (8000da8 <HAL_GPIO_Init+0x2f4>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d013      	beq.n	8000cb2 <HAL_GPIO_Init+0x1fe>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a47      	ldr	r2, [pc, #284]	; (8000dac <HAL_GPIO_Init+0x2f8>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d00d      	beq.n	8000cae <HAL_GPIO_Init+0x1fa>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a46      	ldr	r2, [pc, #280]	; (8000db0 <HAL_GPIO_Init+0x2fc>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d007      	beq.n	8000caa <HAL_GPIO_Init+0x1f6>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a45      	ldr	r2, [pc, #276]	; (8000db4 <HAL_GPIO_Init+0x300>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d101      	bne.n	8000ca6 <HAL_GPIO_Init+0x1f2>
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	e008      	b.n	8000cb8 <HAL_GPIO_Init+0x204>
 8000ca6:	2307      	movs	r3, #7
 8000ca8:	e006      	b.n	8000cb8 <HAL_GPIO_Init+0x204>
 8000caa:	2303      	movs	r3, #3
 8000cac:	e004      	b.n	8000cb8 <HAL_GPIO_Init+0x204>
 8000cae:	2302      	movs	r3, #2
 8000cb0:	e002      	b.n	8000cb8 <HAL_GPIO_Init+0x204>
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e000      	b.n	8000cb8 <HAL_GPIO_Init+0x204>
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	69fa      	ldr	r2, [r7, #28]
 8000cba:	f002 0203 	and.w	r2, r2, #3
 8000cbe:	0092      	lsls	r2, r2, #2
 8000cc0:	4093      	lsls	r3, r2
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cc8:	4935      	ldr	r1, [pc, #212]	; (8000da0 <HAL_GPIO_Init+0x2ec>)
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	089b      	lsrs	r3, r3, #2
 8000cce:	3302      	adds	r3, #2
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cd6:	4b38      	ldr	r3, [pc, #224]	; (8000db8 <HAL_GPIO_Init+0x304>)
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d003      	beq.n	8000cfa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000cfa:	4a2f      	ldr	r2, [pc, #188]	; (8000db8 <HAL_GPIO_Init+0x304>)
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d00:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <HAL_GPIO_Init+0x304>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d003      	beq.n	8000d24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d24:	4a24      	ldr	r2, [pc, #144]	; (8000db8 <HAL_GPIO_Init+0x304>)
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d2a:	4b23      	ldr	r3, [pc, #140]	; (8000db8 <HAL_GPIO_Init+0x304>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	43db      	mvns	r3, r3
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	4013      	ands	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d003      	beq.n	8000d4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d4e:	4a1a      	ldr	r2, [pc, #104]	; (8000db8 <HAL_GPIO_Init+0x304>)
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d54:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <HAL_GPIO_Init+0x304>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4013      	ands	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d003      	beq.n	8000d78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d78:	4a0f      	ldr	r2, [pc, #60]	; (8000db8 <HAL_GPIO_Init+0x304>)
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3301      	adds	r3, #1
 8000d82:	61fb      	str	r3, [r7, #28]
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	2b0f      	cmp	r3, #15
 8000d88:	f67f aea2 	bls.w	8000ad0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	3724      	adds	r7, #36	; 0x24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40013800 	.word	0x40013800
 8000da4:	40020000 	.word	0x40020000
 8000da8:	40020400 	.word	0x40020400
 8000dac:	40020800 	.word	0x40020800
 8000db0:	40020c00 	.word	0x40020c00
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40013c00 	.word	0x40013c00

08000dbc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dbe:	b08f      	sub	sp, #60	; 0x3c
 8000dc0:	af0a      	add	r7, sp, #40	; 0x28
 8000dc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d101      	bne.n	8000dce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e10f      	b.n	8000fee <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d106      	bne.n	8000dee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f006 ff93 	bl	8007d14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2203      	movs	r2, #3
 8000df2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d102      	bne.n	8000e08 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f002 f804 	bl	8002e1a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	687e      	ldr	r6, [r7, #4]
 8000e1a:	466d      	mov	r5, sp
 8000e1c:	f106 0410 	add.w	r4, r6, #16
 8000e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e30:	1d33      	adds	r3, r6, #4
 8000e32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e34:	6838      	ldr	r0, [r7, #0]
 8000e36:	f001 fedb 	bl	8002bf0 <USB_CoreInit>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d005      	beq.n	8000e4c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2202      	movs	r2, #2
 8000e44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e0d0      	b.n	8000fee <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f001 fff2 	bl	8002e3c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e58:	2300      	movs	r3, #0
 8000e5a:	73fb      	strb	r3, [r7, #15]
 8000e5c:	e04a      	b.n	8000ef4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e5e:	7bfa      	ldrb	r2, [r7, #15]
 8000e60:	6879      	ldr	r1, [r7, #4]
 8000e62:	4613      	mov	r3, r2
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	4413      	add	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	440b      	add	r3, r1
 8000e6c:	333d      	adds	r3, #61	; 0x3d
 8000e6e:	2201      	movs	r2, #1
 8000e70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e72:	7bfa      	ldrb	r2, [r7, #15]
 8000e74:	6879      	ldr	r1, [r7, #4]
 8000e76:	4613      	mov	r3, r2
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	4413      	add	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	440b      	add	r3, r1
 8000e80:	333c      	adds	r3, #60	; 0x3c
 8000e82:	7bfa      	ldrb	r2, [r7, #15]
 8000e84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e86:	7bfa      	ldrb	r2, [r7, #15]
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	b298      	uxth	r0, r3
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	4413      	add	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	440b      	add	r3, r1
 8000e98:	3344      	adds	r3, #68	; 0x44
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ea0:	6879      	ldr	r1, [r7, #4]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	4413      	add	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	440b      	add	r3, r1
 8000eac:	3340      	adds	r3, #64	; 0x40
 8000eae:	2200      	movs	r2, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000eb2:	7bfa      	ldrb	r2, [r7, #15]
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	4413      	add	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	3348      	adds	r3, #72	; 0x48
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ec6:	7bfa      	ldrb	r2, [r7, #15]
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	4413      	add	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	334c      	adds	r3, #76	; 0x4c
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000eda:	7bfa      	ldrb	r2, [r7, #15]
 8000edc:	6879      	ldr	r1, [r7, #4]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	4413      	add	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	3354      	adds	r3, #84	; 0x54
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	7bfa      	ldrb	r2, [r7, #15]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d3af      	bcc.n	8000e5e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	73fb      	strb	r3, [r7, #15]
 8000f02:	e044      	b.n	8000f8e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f04:	7bfa      	ldrb	r2, [r7, #15]
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	4413      	add	r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	440b      	add	r3, r1
 8000f12:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f1a:	7bfa      	ldrb	r2, [r7, #15]
 8000f1c:	6879      	ldr	r1, [r7, #4]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	4413      	add	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	440b      	add	r3, r1
 8000f28:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000f2c:	7bfa      	ldrb	r2, [r7, #15]
 8000f2e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f30:	7bfa      	ldrb	r2, [r7, #15]
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	4613      	mov	r3, r2
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	4413      	add	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f46:	7bfa      	ldrb	r2, [r7, #15]
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	4413      	add	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	440b      	add	r3, r1
 8000f54:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f5c:	7bfa      	ldrb	r2, [r7, #15]
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	4613      	mov	r3, r2
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	4413      	add	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	440b      	add	r3, r1
 8000f6a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f72:	7bfa      	ldrb	r2, [r7, #15]
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	4613      	mov	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	4413      	add	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	440b      	add	r3, r1
 8000f80:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	73fb      	strb	r3, [r7, #15]
 8000f8e:	7bfa      	ldrb	r2, [r7, #15]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d3b5      	bcc.n	8000f04 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	603b      	str	r3, [r7, #0]
 8000f9e:	687e      	ldr	r6, [r7, #4]
 8000fa0:	466d      	mov	r5, sp
 8000fa2:	f106 0410 	add.w	r4, r6, #16
 8000fa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fb6:	1d33      	adds	r3, r6, #4
 8000fb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fba:	6838      	ldr	r0, [r7, #0]
 8000fbc:	f001 ff8a 	bl	8002ed4 <USB_DevInit>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d005      	beq.n	8000fd2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2202      	movs	r2, #2
 8000fca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00d      	b.n	8000fee <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f003 f8d9 	bl	800419e <USB_DevDisconnect>

  return HAL_OK;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ff6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800100a:	2b01      	cmp	r3, #1
 800100c:	d101      	bne.n	8001012 <HAL_PCD_Start+0x1c>
 800100e:	2302      	movs	r3, #2
 8001010:	e020      	b.n	8001054 <HAL_PCD_Start+0x5e>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2201      	movs	r2, #1
 8001016:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101e:	2b01      	cmp	r3, #1
 8001020:	d109      	bne.n	8001036 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001026:	2b01      	cmp	r3, #1
 8001028:	d005      	beq.n	8001036 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f001 fedc 	bl	8002df8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f003 f889 	bl	800415c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800105c:	b590      	push	{r4, r7, lr}
 800105e:	b08d      	sub	sp, #52	; 0x34
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800106a:	6a3b      	ldr	r3, [r7, #32]
 800106c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f003 f947 	bl	8004306 <USB_GetMode>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	f040 848a 	bne.w	8001994 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f003 f8ab 	bl	80041e0 <USB_ReadInterrupts>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 8480 	beq.w	8001992 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	0a1b      	lsrs	r3, r3, #8
 800109c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f003 f898 	bl	80041e0 <USB_ReadInterrupts>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d107      	bne.n	80010ca <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	695a      	ldr	r2, [r3, #20]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f002 0202 	and.w	r2, r2, #2
 80010c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f003 f886 	bl	80041e0 <USB_ReadInterrupts>
 80010d4:	4603      	mov	r3, r0
 80010d6:	f003 0310 	and.w	r3, r3, #16
 80010da:	2b10      	cmp	r3, #16
 80010dc:	d161      	bne.n	80011a2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	699a      	ldr	r2, [r3, #24]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f022 0210 	bic.w	r2, r2, #16
 80010ec:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80010ee:	6a3b      	ldr	r3, [r7, #32]
 80010f0:	6a1b      	ldr	r3, [r3, #32]
 80010f2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	f003 020f 	and.w	r2, r3, #15
 80010fa:	4613      	mov	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	4413      	add	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	3304      	adds	r3, #4
 800110c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	0c5b      	lsrs	r3, r3, #17
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	2b02      	cmp	r3, #2
 8001118:	d124      	bne.n	8001164 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001120:	4013      	ands	r3, r2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d035      	beq.n	8001192 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	091b      	lsrs	r3, r3, #4
 800112e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001130:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001134:	b29b      	uxth	r3, r3
 8001136:	461a      	mov	r2, r3
 8001138:	6a38      	ldr	r0, [r7, #32]
 800113a:	f002 febd 	bl	8003eb8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	691a      	ldr	r2, [r3, #16]
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	091b      	lsrs	r3, r3, #4
 8001146:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800114a:	441a      	add	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	6a1a      	ldr	r2, [r3, #32]
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	091b      	lsrs	r3, r3, #4
 8001158:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800115c:	441a      	add	r2, r3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	621a      	str	r2, [r3, #32]
 8001162:	e016      	b.n	8001192 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	0c5b      	lsrs	r3, r3, #17
 8001168:	f003 030f 	and.w	r3, r3, #15
 800116c:	2b06      	cmp	r3, #6
 800116e:	d110      	bne.n	8001192 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001176:	2208      	movs	r2, #8
 8001178:	4619      	mov	r1, r3
 800117a:	6a38      	ldr	r0, [r7, #32]
 800117c:	f002 fe9c 	bl	8003eb8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	6a1a      	ldr	r2, [r3, #32]
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	091b      	lsrs	r3, r3, #4
 8001188:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800118c:	441a      	add	r2, r3
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	699a      	ldr	r2, [r3, #24]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f042 0210 	orr.w	r2, r2, #16
 80011a0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f003 f81a 	bl	80041e0 <USB_ReadInterrupts>
 80011ac:	4603      	mov	r3, r0
 80011ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80011b6:	f040 80a7 	bne.w	8001308 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f003 f81f 	bl	8004206 <USB_ReadDevAllOutEpInterrupt>
 80011c8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80011ca:	e099      	b.n	8001300 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80011cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f000 808e 	beq.w	80012f4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	4611      	mov	r1, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f003 f843 	bl	800426e <USB_ReadDevOutEPInterrupt>
 80011e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d00c      	beq.n	800120e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	015a      	lsls	r2, r3, #5
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	4413      	add	r3, r2
 80011fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001200:	461a      	mov	r2, r3
 8001202:	2301      	movs	r3, #1
 8001204:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001206:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 feef 	bl	8001fec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	f003 0308 	and.w	r3, r3, #8
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00c      	beq.n	8001232 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121a:	015a      	lsls	r2, r3, #5
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	4413      	add	r3, r2
 8001220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001224:	461a      	mov	r2, r3
 8001226:	2308      	movs	r3, #8
 8001228:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800122a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 ffc5 	bl	80021bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	f003 0310 	and.w	r3, r3, #16
 8001238:	2b00      	cmp	r3, #0
 800123a:	d008      	beq.n	800124e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123e:	015a      	lsls	r2, r3, #5
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	4413      	add	r3, r2
 8001244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001248:	461a      	mov	r2, r3
 800124a:	2310      	movs	r3, #16
 800124c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d030      	beq.n	80012ba <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001260:	2b80      	cmp	r3, #128	; 0x80
 8001262:	d109      	bne.n	8001278 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	69fa      	ldr	r2, [r7, #28]
 800126e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001276:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800127a:	4613      	mov	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	4413      	add	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	3304      	adds	r3, #4
 800128c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	78db      	ldrb	r3, [r3, #3]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d108      	bne.n	80012a8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	2200      	movs	r2, #0
 800129a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	4619      	mov	r1, r3
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f006 fe32 	bl	8007f0c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	015a      	lsls	r2, r3, #5
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	4413      	add	r3, r2
 80012b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012b4:	461a      	mov	r2, r3
 80012b6:	2302      	movs	r3, #2
 80012b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	f003 0320 	and.w	r3, r3, #32
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d008      	beq.n	80012d6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	015a      	lsls	r2, r3, #5
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	4413      	add	r3, r2
 80012cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012d0:	461a      	mov	r2, r3
 80012d2:	2320      	movs	r3, #32
 80012d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d009      	beq.n	80012f4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80012e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e2:	015a      	lsls	r2, r3, #5
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	4413      	add	r3, r2
 80012e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012ec:	461a      	mov	r2, r3
 80012ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012f2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	3301      	adds	r3, #1
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80012fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fc:	085b      	lsrs	r3, r3, #1
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001302:	2b00      	cmp	r3, #0
 8001304:	f47f af62 	bne.w	80011cc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f002 ff67 	bl	80041e0 <USB_ReadInterrupts>
 8001312:	4603      	mov	r3, r0
 8001314:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001318:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800131c:	f040 80db 	bne.w	80014d6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f002 ff88 	bl	800423a <USB_ReadDevAllInEpInterrupt>
 800132a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001330:	e0cd      	b.n	80014ce <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 80c2 	beq.w	80014c2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	4611      	mov	r1, r2
 8001348:	4618      	mov	r0, r3
 800134a:	f002 ffae 	bl	80042aa <USB_ReadDevInEPInterrupt>
 800134e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d057      	beq.n	800140a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	f003 030f 	and.w	r3, r3, #15
 8001360:	2201      	movs	r2, #1
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800136e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	43db      	mvns	r3, r3
 8001374:	69f9      	ldr	r1, [r7, #28]
 8001376:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800137a:	4013      	ands	r3, r2
 800137c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	015a      	lsls	r2, r3, #5
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	4413      	add	r3, r2
 8001386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800138a:	461a      	mov	r2, r3
 800138c:	2301      	movs	r3, #1
 800138e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d132      	bne.n	80013fe <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800139c:	4613      	mov	r3, r2
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	4413      	add	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	440b      	add	r3, r1
 80013a6:	334c      	adds	r3, #76	; 0x4c
 80013a8:	6819      	ldr	r1, [r3, #0]
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ae:	4613      	mov	r3, r2
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	4413      	add	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4403      	add	r3, r0
 80013b8:	3348      	adds	r3, #72	; 0x48
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4419      	add	r1, r3
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c2:	4613      	mov	r3, r2
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	4413      	add	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4403      	add	r3, r0
 80013cc:	334c      	adds	r3, #76	; 0x4c
 80013ce:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80013d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d113      	bne.n	80013fe <HAL_PCD_IRQHandler+0x3a2>
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013da:	4613      	mov	r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	4413      	add	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	440b      	add	r3, r1
 80013e4:	3354      	adds	r3, #84	; 0x54
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d108      	bne.n	80013fe <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6818      	ldr	r0, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80013f6:	461a      	mov	r2, r3
 80013f8:	2101      	movs	r1, #1
 80013fa:	f002 ffb5 	bl	8004368 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	b2db      	uxtb	r3, r3
 8001402:	4619      	mov	r1, r3
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f006 fd06 	bl	8007e16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	f003 0308 	and.w	r3, r3, #8
 8001410:	2b00      	cmp	r3, #0
 8001412:	d008      	beq.n	8001426 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	015a      	lsls	r2, r3, #5
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	4413      	add	r3, r2
 800141c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001420:	461a      	mov	r2, r3
 8001422:	2308      	movs	r3, #8
 8001424:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	f003 0310 	and.w	r3, r3, #16
 800142c:	2b00      	cmp	r3, #0
 800142e:	d008      	beq.n	8001442 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	015a      	lsls	r2, r3, #5
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	4413      	add	r3, r2
 8001438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800143c:	461a      	mov	r2, r3
 800143e:	2310      	movs	r3, #16
 8001440:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001448:	2b00      	cmp	r3, #0
 800144a:	d008      	beq.n	800145e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	015a      	lsls	r2, r3, #5
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	4413      	add	r3, r2
 8001454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001458:	461a      	mov	r2, r3
 800145a:	2340      	movs	r3, #64	; 0x40
 800145c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d023      	beq.n	80014b0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001468:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800146a:	6a38      	ldr	r0, [r7, #32]
 800146c:	f001 fe96 	bl	800319c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001472:	4613      	mov	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	3338      	adds	r3, #56	; 0x38
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	4413      	add	r3, r2
 8001480:	3304      	adds	r3, #4
 8001482:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	78db      	ldrb	r3, [r3, #3]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d108      	bne.n	800149e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	2200      	movs	r2, #0
 8001490:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	b2db      	uxtb	r3, r3
 8001496:	4619      	mov	r1, r3
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f006 fd49 	bl	8007f30 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	015a      	lsls	r2, r3, #5
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	4413      	add	r3, r2
 80014a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014aa:	461a      	mov	r2, r3
 80014ac:	2302      	movs	r3, #2
 80014ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80014ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 fd08 	bl	8001ed2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	3301      	adds	r3, #1
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ca:	085b      	lsrs	r3, r3, #1
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f47f af2e 	bne.w	8001332 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f002 fe80 	bl	80041e0 <USB_ReadInterrupts>
 80014e0:	4603      	mov	r3, r0
 80014e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80014e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014ea:	d122      	bne.n	8001532 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	69fa      	ldr	r2, [r7, #28]
 80014f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014fa:	f023 0301 	bic.w	r3, r3, #1
 80014fe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001506:	2b01      	cmp	r3, #1
 8001508:	d108      	bne.n	800151c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001512:	2100      	movs	r1, #0
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 feef 	bl	80022f8 <HAL_PCDEx_LPM_Callback>
 800151a:	e002      	b.n	8001522 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f006 fce7 	bl	8007ef0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	695a      	ldr	r2, [r3, #20]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001530:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f002 fe52 	bl	80041e0 <USB_ReadInterrupts>
 800153c:	4603      	mov	r3, r0
 800153e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001546:	d112      	bne.n	800156e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	2b01      	cmp	r3, #1
 8001556:	d102      	bne.n	800155e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f006 fca3 	bl	8007ea4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	695a      	ldr	r2, [r3, #20]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800156c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f002 fe34 	bl	80041e0 <USB_ReadInterrupts>
 8001578:	4603      	mov	r3, r0
 800157a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800157e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001582:	f040 80b7 	bne.w	80016f4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	69fa      	ldr	r2, [r7, #28]
 8001590:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001594:	f023 0301 	bic.w	r3, r3, #1
 8001598:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2110      	movs	r1, #16
 80015a0:	4618      	mov	r0, r3
 80015a2:	f001 fdfb 	bl	800319c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015aa:	e046      	b.n	800163a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80015ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ae:	015a      	lsls	r2, r3, #5
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	4413      	add	r3, r2
 80015b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015b8:	461a      	mov	r2, r3
 80015ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015be:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80015c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c2:	015a      	lsls	r2, r3, #5
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	4413      	add	r3, r2
 80015c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015d0:	0151      	lsls	r1, r2, #5
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	440a      	add	r2, r1
 80015d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80015da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80015e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e2:	015a      	lsls	r2, r3, #5
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	4413      	add	r3, r2
 80015e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015ec:	461a      	mov	r2, r3
 80015ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015f2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80015f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f6:	015a      	lsls	r2, r3, #5
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	4413      	add	r3, r2
 80015fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001604:	0151      	lsls	r1, r2, #5
 8001606:	69fa      	ldr	r2, [r7, #28]
 8001608:	440a      	add	r2, r1
 800160a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800160e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001612:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001616:	015a      	lsls	r2, r3, #5
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	4413      	add	r3, r2
 800161c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001624:	0151      	lsls	r1, r2, #5
 8001626:	69fa      	ldr	r2, [r7, #28]
 8001628:	440a      	add	r2, r1
 800162a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800162e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001632:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001636:	3301      	adds	r3, #1
 8001638:	62fb      	str	r3, [r7, #44]	; 0x2c
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001640:	429a      	cmp	r2, r3
 8001642:	d3b3      	bcc.n	80015ac <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800164a:	69db      	ldr	r3, [r3, #28]
 800164c:	69fa      	ldr	r2, [r7, #28]
 800164e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001652:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001656:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165c:	2b00      	cmp	r3, #0
 800165e:	d016      	beq.n	800168e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800166a:	69fa      	ldr	r2, [r7, #28]
 800166c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001670:	f043 030b 	orr.w	r3, r3, #11
 8001674:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800167e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001680:	69fa      	ldr	r2, [r7, #28]
 8001682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001686:	f043 030b 	orr.w	r3, r3, #11
 800168a:	6453      	str	r3, [r2, #68]	; 0x44
 800168c:	e015      	b.n	80016ba <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800169c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016a0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80016a4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	69fa      	ldr	r2, [r7, #28]
 80016b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016b4:	f043 030b 	orr.w	r3, r3, #11
 80016b8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	69fa      	ldr	r2, [r7, #28]
 80016c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016c8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80016cc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6818      	ldr	r0, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016de:	461a      	mov	r2, r3
 80016e0:	f002 fe42 	bl	8004368 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	695a      	ldr	r2, [r3, #20]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80016f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f002 fd71 	bl	80041e0 <USB_ReadInterrupts>
 80016fe:	4603      	mov	r3, r0
 8001700:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001708:	d124      	bne.n	8001754 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f002 fe07 	bl	8004322 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f001 fdbc 	bl	8003296 <USB_GetDevSpeed>
 800171e:	4603      	mov	r3, r0
 8001720:	461a      	mov	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681c      	ldr	r4, [r3, #0]
 800172a:	f001 fa55 	bl	8002bd8 <HAL_RCC_GetHCLKFreq>
 800172e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001734:	b2db      	uxtb	r3, r3
 8001736:	461a      	mov	r2, r3
 8001738:	4620      	mov	r0, r4
 800173a:	f001 fabb 	bl	8002cb4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f006 fb91 	bl	8007e66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	695a      	ldr	r2, [r3, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001752:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f002 fd41 	bl	80041e0 <USB_ReadInterrupts>
 800175e:	4603      	mov	r3, r0
 8001760:	f003 0308 	and.w	r3, r3, #8
 8001764:	2b08      	cmp	r3, #8
 8001766:	d10a      	bne.n	800177e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f006 fb6e 	bl	8007e4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	695a      	ldr	r2, [r3, #20]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f002 0208 	and.w	r2, r2, #8
 800177c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f002 fd2c 	bl	80041e0 <USB_ReadInterrupts>
 8001788:	4603      	mov	r3, r0
 800178a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800178e:	2b80      	cmp	r3, #128	; 0x80
 8001790:	d122      	bne.n	80017d8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800179e:	2301      	movs	r3, #1
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
 80017a2:	e014      	b.n	80017ce <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017a8:	4613      	mov	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	4413      	add	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d105      	bne.n	80017c8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	4619      	mov	r1, r3
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 fb27 	bl	8001e16 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	3301      	adds	r3, #1
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d3e5      	bcc.n	80017a4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f002 fcff 	bl	80041e0 <USB_ReadInterrupts>
 80017e2:	4603      	mov	r3, r0
 80017e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017ec:	d13b      	bne.n	8001866 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017ee:	2301      	movs	r3, #1
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
 80017f2:	e02b      	b.n	800184c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	015a      	lsls	r2, r3, #5
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	4413      	add	r3, r2
 80017fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001808:	4613      	mov	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	4413      	add	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	3340      	adds	r3, #64	; 0x40
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d115      	bne.n	8001846 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800181a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800181c:	2b00      	cmp	r3, #0
 800181e:	da12      	bge.n	8001846 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001824:	4613      	mov	r3, r2
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	4413      	add	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	333f      	adds	r3, #63	; 0x3f
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	b2db      	uxtb	r3, r3
 8001838:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800183c:	b2db      	uxtb	r3, r3
 800183e:	4619      	mov	r1, r3
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 fae8 	bl	8001e16 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	3301      	adds	r3, #1
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001852:	429a      	cmp	r2, r3
 8001854:	d3ce      	bcc.n	80017f4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	695a      	ldr	r2, [r3, #20]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001864:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f002 fcb8 	bl	80041e0 <USB_ReadInterrupts>
 8001870:	4603      	mov	r3, r0
 8001872:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001876:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800187a:	d155      	bne.n	8001928 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800187c:	2301      	movs	r3, #1
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
 8001880:	e045      	b.n	800190e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	015a      	lsls	r2, r3, #5
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	4413      	add	r3, r2
 800188a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001896:	4613      	mov	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	4413      	add	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	440b      	add	r3, r1
 80018a0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d12e      	bne.n	8001908 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80018aa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	da2b      	bge.n	8001908 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80018bc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d121      	bne.n	8001908 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c8:	4613      	mov	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	4413      	add	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80018d6:	2201      	movs	r2, #1
 80018d8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80018da:	6a3b      	ldr	r3, [r7, #32]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80018e6:	6a3b      	ldr	r3, [r7, #32]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10a      	bne.n	8001908 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001900:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001904:	6053      	str	r3, [r2, #4]
            break;
 8001906:	e007      	b.n	8001918 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	3301      	adds	r3, #1
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001914:	429a      	cmp	r2, r3
 8001916:	d3b4      	bcc.n	8001882 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001926:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f002 fc57 	bl	80041e0 <USB_ReadInterrupts>
 8001932:	4603      	mov	r3, r0
 8001934:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800193c:	d10a      	bne.n	8001954 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f006 fb08 	bl	8007f54 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	695a      	ldr	r2, [r3, #20]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001952:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f002 fc41 	bl	80041e0 <USB_ReadInterrupts>
 800195e:	4603      	mov	r3, r0
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b04      	cmp	r3, #4
 8001966:	d115      	bne.n	8001994 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	2b00      	cmp	r3, #0
 8001978:	d002      	beq.n	8001980 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f006 faf8 	bl	8007f70 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6859      	ldr	r1, [r3, #4]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	430a      	orrs	r2, r1
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	e000      	b.n	8001994 <HAL_PCD_IRQHandler+0x938>
      return;
 8001992:	bf00      	nop
    }
  }
}
 8001994:	3734      	adds	r7, #52	; 0x34
 8001996:	46bd      	mov	sp, r7
 8001998:	bd90      	pop	{r4, r7, pc}

0800199a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	460b      	mov	r3, r1
 80019a4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_PCD_SetAddress+0x1a>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e013      	b.n	80019dc <HAL_PCD_SetAddress+0x42>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	78fa      	ldrb	r2, [r7, #3]
 80019c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	78fa      	ldrb	r2, [r7, #3]
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f002 fb9f 	bl	8004110 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	4608      	mov	r0, r1
 80019ee:	4611      	mov	r1, r2
 80019f0:	461a      	mov	r2, r3
 80019f2:	4603      	mov	r3, r0
 80019f4:	70fb      	strb	r3, [r7, #3]
 80019f6:	460b      	mov	r3, r1
 80019f8:	803b      	strh	r3, [r7, #0]
 80019fa:	4613      	mov	r3, r2
 80019fc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	da0f      	bge.n	8001a2a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a0a:	78fb      	ldrb	r3, [r7, #3]
 8001a0c:	f003 020f 	and.w	r2, r3, #15
 8001a10:	4613      	mov	r3, r2
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	4413      	add	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	3338      	adds	r3, #56	; 0x38
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3304      	adds	r3, #4
 8001a20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2201      	movs	r2, #1
 8001a26:	705a      	strb	r2, [r3, #1]
 8001a28:	e00f      	b.n	8001a4a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	f003 020f 	and.w	r2, r3, #15
 8001a30:	4613      	mov	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	4413      	add	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	4413      	add	r3, r2
 8001a40:	3304      	adds	r3, #4
 8001a42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	f003 030f 	and.w	r3, r3, #15
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a56:	883a      	ldrh	r2, [r7, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	78ba      	ldrb	r2, [r7, #2]
 8001a60:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	785b      	ldrb	r3, [r3, #1]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d004      	beq.n	8001a74 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a74:	78bb      	ldrb	r3, [r7, #2]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d102      	bne.n	8001a80 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_PCD_EP_Open+0xaa>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e00e      	b.n	8001aac <HAL_PCD_EP_Open+0xc8>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68f9      	ldr	r1, [r7, #12]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f001 fc1f 	bl	80032e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001aaa:	7afb      	ldrb	r3, [r7, #11]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ac0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	da0f      	bge.n	8001ae8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	f003 020f 	and.w	r2, r3, #15
 8001ace:	4613      	mov	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	3338      	adds	r3, #56	; 0x38
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	4413      	add	r3, r2
 8001adc:	3304      	adds	r3, #4
 8001ade:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	705a      	strb	r2, [r3, #1]
 8001ae6:	e00f      	b.n	8001b08 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ae8:	78fb      	ldrb	r3, [r7, #3]
 8001aea:	f003 020f 	and.w	r2, r3, #15
 8001aee:	4613      	mov	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	4413      	add	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	3304      	adds	r3, #4
 8001b00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d101      	bne.n	8001b22 <HAL_PCD_EP_Close+0x6e>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e00e      	b.n	8001b40 <HAL_PCD_EP_Close+0x8c>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68f9      	ldr	r1, [r7, #12]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f001 fc5d 	bl	80033f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	460b      	mov	r3, r1
 8001b56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b58:	7afb      	ldrb	r3, [r7, #11]
 8001b5a:	f003 020f 	and.w	r2, r3, #15
 8001b5e:	4613      	mov	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	3304      	adds	r3, #4
 8001b70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	2200      	movs	r2, #0
 8001b82:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	2200      	movs	r2, #0
 8001b88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b8a:	7afb      	ldrb	r3, [r7, #11]
 8001b8c:	f003 030f 	and.w	r3, r3, #15
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d102      	bne.n	8001ba4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ba4:	7afb      	ldrb	r3, [r7, #11]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d109      	bne.n	8001bc2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	461a      	mov	r2, r3
 8001bba:	6979      	ldr	r1, [r7, #20]
 8001bbc:	f001 ff3c 	bl	8003a38 <USB_EP0StartXfer>
 8001bc0:	e008      	b.n	8001bd4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	461a      	mov	r2, r3
 8001bce:	6979      	ldr	r1, [r7, #20]
 8001bd0:	f001 fcea 	bl	80035a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	460b      	mov	r3, r1
 8001be8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	f003 020f 	and.w	r2, r3, #15
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001c00:	681b      	ldr	r3, [r3, #0]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	607a      	str	r2, [r7, #4]
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c1e:	7afb      	ldrb	r3, [r7, #11]
 8001c20:	f003 020f 	and.w	r2, r3, #15
 8001c24:	4613      	mov	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	4413      	add	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	3338      	adds	r3, #56	; 0x38
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	4413      	add	r3, r2
 8001c32:	3304      	adds	r3, #4
 8001c34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	2200      	movs	r2, #0
 8001c46:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c4e:	7afb      	ldrb	r3, [r7, #11]
 8001c50:	f003 030f 	and.w	r3, r3, #15
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d102      	bne.n	8001c68 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c68:	7afb      	ldrb	r3, [r7, #11]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d109      	bne.n	8001c86 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	6979      	ldr	r1, [r7, #20]
 8001c80:	f001 feda 	bl	8003a38 <USB_EP0StartXfer>
 8001c84:	e008      	b.n	8001c98 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	6979      	ldr	r1, [r7, #20]
 8001c94:	f001 fc88 	bl	80035a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	460b      	mov	r3, r1
 8001cac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	f003 020f 	and.w	r2, r3, #15
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d901      	bls.n	8001cc0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e050      	b.n	8001d62 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	da0f      	bge.n	8001ce8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	f003 020f 	and.w	r2, r3, #15
 8001cce:	4613      	mov	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	3338      	adds	r3, #56	; 0x38
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	4413      	add	r3, r2
 8001cdc:	3304      	adds	r3, #4
 8001cde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	705a      	strb	r2, [r3, #1]
 8001ce6:	e00d      	b.n	8001d04 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ce8:	78fa      	ldrb	r2, [r7, #3]
 8001cea:	4613      	mov	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4413      	add	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2201      	movs	r2, #1
 8001d08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d0a:	78fb      	ldrb	r3, [r7, #3]
 8001d0c:	f003 030f 	and.w	r3, r3, #15
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_PCD_EP_SetStall+0x82>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e01e      	b.n	8001d62 <HAL_PCD_EP_SetStall+0xc0>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68f9      	ldr	r1, [r7, #12]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f002 f918 	bl	8003f68 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10a      	bne.n	8001d58 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6818      	ldr	r0, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	b2d9      	uxtb	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d52:	461a      	mov	r2, r3
 8001d54:	f002 fb08 	bl	8004368 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b084      	sub	sp, #16
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	460b      	mov	r3, r1
 8001d74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d76:	78fb      	ldrb	r3, [r7, #3]
 8001d78:	f003 020f 	and.w	r2, r3, #15
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d901      	bls.n	8001d88 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e042      	b.n	8001e0e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	da0f      	bge.n	8001db0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d90:	78fb      	ldrb	r3, [r7, #3]
 8001d92:	f003 020f 	and.w	r2, r3, #15
 8001d96:	4613      	mov	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	3338      	adds	r3, #56	; 0x38
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	4413      	add	r3, r2
 8001da4:	3304      	adds	r3, #4
 8001da6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2201      	movs	r2, #1
 8001dac:	705a      	strb	r2, [r3, #1]
 8001dae:	e00f      	b.n	8001dd0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001db0:	78fb      	ldrb	r3, [r7, #3]
 8001db2:	f003 020f 	and.w	r2, r3, #15
 8001db6:	4613      	mov	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	4413      	add	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_PCD_EP_ClrStall+0x86>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e00e      	b.n	8001e0e <HAL_PCD_EP_ClrStall+0xa4>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68f9      	ldr	r1, [r7, #12]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f002 f920 	bl	8004044 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001e22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	da0c      	bge.n	8001e44 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	f003 020f 	and.w	r2, r3, #15
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	3338      	adds	r3, #56	; 0x38
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3304      	adds	r3, #4
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	e00c      	b.n	8001e5e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	f003 020f 	and.w	r2, r3, #15
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	4413      	add	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68f9      	ldr	r1, [r7, #12]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f001 ff3f 	bl	8003ce8 <USB_EPStopXfer>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001e6e:	7afb      	ldrb	r3, [r7, #11]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_PCD_EP_Flush+0x1a>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e01b      	b.n	8001eca <HAL_PCD_EP_Flush+0x52>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8001e9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	da09      	bge.n	8001eb6 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	4619      	mov	r1, r3
 8001eae:	4610      	mov	r0, r2
 8001eb0:	f001 f974 	bl	800319c <USB_FlushTxFifo>
 8001eb4:	e004      	b.n	8001ec0 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f001 f9a2 	bl	8003204 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b08a      	sub	sp, #40	; 0x28
 8001ed6:	af02      	add	r7, sp, #8
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	3338      	adds	r3, #56	; 0x38
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6a1a      	ldr	r2, [r3, #32]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d901      	bls.n	8001f0a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e06c      	b.n	8001fe4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	699a      	ldr	r2, [r3, #24]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d902      	bls.n	8001f26 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3303      	adds	r3, #3
 8001f2a:	089b      	lsrs	r3, r3, #2
 8001f2c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f2e:	e02b      	b.n	8001f88 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	699a      	ldr	r2, [r3, #24]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	69fa      	ldr	r2, [r7, #28]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d902      	bls.n	8001f4c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	3303      	adds	r3, #3
 8001f50:	089b      	lsrs	r3, r3, #2
 8001f52:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6919      	ldr	r1, [r3, #16]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	4603      	mov	r3, r0
 8001f6a:	6978      	ldr	r0, [r7, #20]
 8001f6c:	f001 ff66 	bl	8003e3c <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	441a      	add	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6a1a      	ldr	r2, [r3, #32]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	441a      	add	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d809      	bhi.n	8001fb2 <PCD_WriteEmptyTxFifo+0xe0>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6a1a      	ldr	r2, [r3, #32]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d203      	bcs.n	8001fb2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1be      	bne.n	8001f30 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	699a      	ldr	r2, [r3, #24]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d811      	bhi.n	8001fe2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	6939      	ldr	r1, [r7, #16]
 8001fda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001fde:	4013      	ands	r3, r2
 8001fe0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3720      	adds	r7, #32
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	333c      	adds	r3, #60	; 0x3c
 8002004:	3304      	adds	r3, #4
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	015a      	lsls	r2, r3, #5
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	4413      	add	r3, r2
 8002012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d17b      	bne.n	800211a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d015      	beq.n	8002058 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	4a61      	ldr	r2, [pc, #388]	; (80021b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	f240 80b9 	bls.w	80021a8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 80b3 	beq.w	80021a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	015a      	lsls	r2, r3, #5
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	4413      	add	r3, r2
 800204a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800204e:	461a      	mov	r2, r3
 8002050:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002054:	6093      	str	r3, [r2, #8]
 8002056:	e0a7      	b.n	80021a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	f003 0320 	and.w	r3, r3, #32
 800205e:	2b00      	cmp	r3, #0
 8002060:	d009      	beq.n	8002076 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	4413      	add	r3, r2
 800206a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800206e:	461a      	mov	r2, r3
 8002070:	2320      	movs	r3, #32
 8002072:	6093      	str	r3, [r2, #8]
 8002074:	e098      	b.n	80021a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800207c:	2b00      	cmp	r3, #0
 800207e:	f040 8093 	bne.w	80021a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	4a4b      	ldr	r2, [pc, #300]	; (80021b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d90f      	bls.n	80020aa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00a      	beq.n	80020aa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	015a      	lsls	r2, r3, #5
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	4413      	add	r3, r2
 800209c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020a0:	461a      	mov	r2, r3
 80020a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020a6:	6093      	str	r3, [r2, #8]
 80020a8:	e07e      	b.n	80021a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	4613      	mov	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4413      	add	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	4413      	add	r3, r2
 80020bc:	3304      	adds	r3, #4
 80020be:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	69da      	ldr	r2, [r3, #28]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	0159      	lsls	r1, r3, #5
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	440b      	add	r3, r1
 80020cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d6:	1ad2      	subs	r2, r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d114      	bne.n	800210c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d109      	bne.n	80020fe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020f4:	461a      	mov	r2, r3
 80020f6:	2101      	movs	r1, #1
 80020f8:	f002 f936 	bl	8004368 <USB_EP0_OutStart>
 80020fc:	e006      	b.n	800210c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	691a      	ldr	r2, [r3, #16]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	441a      	add	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	b2db      	uxtb	r3, r3
 8002110:	4619      	mov	r1, r3
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f005 fe64 	bl	8007de0 <HAL_PCD_DataOutStageCallback>
 8002118:	e046      	b.n	80021a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	4a26      	ldr	r2, [pc, #152]	; (80021b8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d124      	bne.n	800216c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00a      	beq.n	8002142 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	015a      	lsls	r2, r3, #5
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	4413      	add	r3, r2
 8002134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002138:	461a      	mov	r2, r3
 800213a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800213e:	6093      	str	r3, [r2, #8]
 8002140:	e032      	b.n	80021a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	f003 0320 	and.w	r3, r3, #32
 8002148:	2b00      	cmp	r3, #0
 800214a:	d008      	beq.n	800215e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	015a      	lsls	r2, r3, #5
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	4413      	add	r3, r2
 8002154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002158:	461a      	mov	r2, r3
 800215a:	2320      	movs	r3, #32
 800215c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	4619      	mov	r1, r3
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f005 fe3b 	bl	8007de0 <HAL_PCD_DataOutStageCallback>
 800216a:	e01d      	b.n	80021a8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d114      	bne.n	800219c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	4613      	mov	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	4413      	add	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d108      	bne.n	800219c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002194:	461a      	mov	r2, r3
 8002196:	2100      	movs	r1, #0
 8002198:	f002 f8e6 	bl	8004368 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	4619      	mov	r1, r3
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f005 fe1c 	bl	8007de0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3720      	adds	r7, #32
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	4f54300a 	.word	0x4f54300a
 80021b8:	4f54310a 	.word	0x4f54310a

080021bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	333c      	adds	r3, #60	; 0x3c
 80021d4:	3304      	adds	r3, #4
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4a15      	ldr	r2, [pc, #84]	; (8002244 <PCD_EP_OutSetupPacket_int+0x88>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d90e      	bls.n	8002210 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d009      	beq.n	8002210 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	015a      	lsls	r2, r3, #5
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4413      	add	r3, r2
 8002204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002208:	461a      	mov	r2, r3
 800220a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800220e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f005 fdd3 	bl	8007dbc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <PCD_EP_OutSetupPacket_int+0x88>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d90c      	bls.n	8002238 <PCD_EP_OutSetupPacket_int+0x7c>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d108      	bne.n	8002238 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002230:	461a      	mov	r2, r3
 8002232:	2101      	movs	r1, #1
 8002234:	f002 f898 	bl	8004368 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	4f54300a 	.word	0x4f54300a

08002248 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	70fb      	strb	r3, [r7, #3]
 8002254:	4613      	mov	r3, r2
 8002256:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d107      	bne.n	8002276 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002266:	883b      	ldrh	r3, [r7, #0]
 8002268:	0419      	lsls	r1, r3, #16
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	430a      	orrs	r2, r1
 8002272:	629a      	str	r2, [r3, #40]	; 0x28
 8002274:	e028      	b.n	80022c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227c:	0c1b      	lsrs	r3, r3, #16
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	4413      	add	r3, r2
 8002282:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002284:	2300      	movs	r3, #0
 8002286:	73fb      	strb	r3, [r7, #15]
 8002288:	e00d      	b.n	80022a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	7bfb      	ldrb	r3, [r7, #15]
 8002290:	3340      	adds	r3, #64	; 0x40
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	0c1b      	lsrs	r3, r3, #16
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	4413      	add	r3, r2
 800229e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	3301      	adds	r3, #1
 80022a4:	73fb      	strb	r3, [r7, #15]
 80022a6:	7bfa      	ldrb	r2, [r7, #15]
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d3ec      	bcc.n	800228a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80022b0:	883b      	ldrh	r3, [r7, #0]
 80022b2:	0418      	lsls	r0, r3, #16
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6819      	ldr	r1, [r3, #0]
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	4302      	orrs	r2, r0
 80022c0:	3340      	adds	r3, #64	; 0x40
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	460b      	mov	r3, r1
 80022e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	887a      	ldrh	r2, [r7, #2]
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e267      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d075      	beq.n	800241a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800232e:	4b88      	ldr	r3, [pc, #544]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 030c 	and.w	r3, r3, #12
 8002336:	2b04      	cmp	r3, #4
 8002338:	d00c      	beq.n	8002354 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800233a:	4b85      	ldr	r3, [pc, #532]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002342:	2b08      	cmp	r3, #8
 8002344:	d112      	bne.n	800236c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002346:	4b82      	ldr	r3, [pc, #520]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800234e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002352:	d10b      	bne.n	800236c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002354:	4b7e      	ldr	r3, [pc, #504]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d05b      	beq.n	8002418 <HAL_RCC_OscConfig+0x108>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d157      	bne.n	8002418 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e242      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002374:	d106      	bne.n	8002384 <HAL_RCC_OscConfig+0x74>
 8002376:	4b76      	ldr	r3, [pc, #472]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a75      	ldr	r2, [pc, #468]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 800237c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	e01d      	b.n	80023c0 <HAL_RCC_OscConfig+0xb0>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800238c:	d10c      	bne.n	80023a8 <HAL_RCC_OscConfig+0x98>
 800238e:	4b70      	ldr	r3, [pc, #448]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a6f      	ldr	r2, [pc, #444]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 8002394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	4b6d      	ldr	r3, [pc, #436]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a6c      	ldr	r2, [pc, #432]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 80023a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	e00b      	b.n	80023c0 <HAL_RCC_OscConfig+0xb0>
 80023a8:	4b69      	ldr	r3, [pc, #420]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a68      	ldr	r2, [pc, #416]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 80023ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	4b66      	ldr	r3, [pc, #408]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a65      	ldr	r2, [pc, #404]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 80023ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d013      	beq.n	80023f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7fe fa32 	bl	8000830 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d0:	f7fe fa2e 	bl	8000830 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	; 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e207      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e2:	4b5b      	ldr	r3, [pc, #364]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0xc0>
 80023ee:	e014      	b.n	800241a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe fa1e 	bl	8000830 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f8:	f7fe fa1a 	bl	8000830 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e1f3      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240a:	4b51      	ldr	r3, [pc, #324]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f0      	bne.n	80023f8 <HAL_RCC_OscConfig+0xe8>
 8002416:	e000      	b.n	800241a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d063      	beq.n	80024ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002426:	4b4a      	ldr	r3, [pc, #296]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00b      	beq.n	800244a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002432:	4b47      	ldr	r3, [pc, #284]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800243a:	2b08      	cmp	r3, #8
 800243c:	d11c      	bne.n	8002478 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800243e:	4b44      	ldr	r3, [pc, #272]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d116      	bne.n	8002478 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244a:	4b41      	ldr	r3, [pc, #260]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d005      	beq.n	8002462 <HAL_RCC_OscConfig+0x152>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d001      	beq.n	8002462 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e1c7      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002462:	4b3b      	ldr	r3, [pc, #236]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	4937      	ldr	r1, [pc, #220]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002476:	e03a      	b.n	80024ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d020      	beq.n	80024c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002480:	4b34      	ldr	r3, [pc, #208]	; (8002554 <HAL_RCC_OscConfig+0x244>)
 8002482:	2201      	movs	r2, #1
 8002484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002486:	f7fe f9d3 	bl	8000830 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800248e:	f7fe f9cf 	bl	8000830 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e1a8      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a0:	4b2b      	ldr	r3, [pc, #172]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0f0      	beq.n	800248e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ac:	4b28      	ldr	r3, [pc, #160]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	4925      	ldr	r1, [pc, #148]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	600b      	str	r3, [r1, #0]
 80024c0:	e015      	b.n	80024ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024c2:	4b24      	ldr	r3, [pc, #144]	; (8002554 <HAL_RCC_OscConfig+0x244>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7fe f9b2 	bl	8000830 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d0:	f7fe f9ae 	bl	8000830 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e187      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e2:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d036      	beq.n	8002568 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d016      	beq.n	8002530 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <HAL_RCC_OscConfig+0x248>)
 8002504:	2201      	movs	r2, #1
 8002506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002508:	f7fe f992 	bl	8000830 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002510:	f7fe f98e 	bl	8000830 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e167      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002522:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 8002524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0x200>
 800252e:	e01b      	b.n	8002568 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002530:	4b09      	ldr	r3, [pc, #36]	; (8002558 <HAL_RCC_OscConfig+0x248>)
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002536:	f7fe f97b 	bl	8000830 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800253c:	e00e      	b.n	800255c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800253e:	f7fe f977 	bl	8000830 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d907      	bls.n	800255c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e150      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
 8002550:	40023800 	.word	0x40023800
 8002554:	42470000 	.word	0x42470000
 8002558:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255c:	4b88      	ldr	r3, [pc, #544]	; (8002780 <HAL_RCC_OscConfig+0x470>)
 800255e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1ea      	bne.n	800253e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 8097 	beq.w	80026a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002576:	2300      	movs	r3, #0
 8002578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800257a:	4b81      	ldr	r3, [pc, #516]	; (8002780 <HAL_RCC_OscConfig+0x470>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10f      	bne.n	80025a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	4b7d      	ldr	r3, [pc, #500]	; (8002780 <HAL_RCC_OscConfig+0x470>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	4a7c      	ldr	r2, [pc, #496]	; (8002780 <HAL_RCC_OscConfig+0x470>)
 8002590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002594:	6413      	str	r3, [r2, #64]	; 0x40
 8002596:	4b7a      	ldr	r3, [pc, #488]	; (8002780 <HAL_RCC_OscConfig+0x470>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025a2:	2301      	movs	r3, #1
 80025a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a6:	4b77      	ldr	r3, [pc, #476]	; (8002784 <HAL_RCC_OscConfig+0x474>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d118      	bne.n	80025e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025b2:	4b74      	ldr	r3, [pc, #464]	; (8002784 <HAL_RCC_OscConfig+0x474>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a73      	ldr	r2, [pc, #460]	; (8002784 <HAL_RCC_OscConfig+0x474>)
 80025b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025be:	f7fe f937 	bl	8000830 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c6:	f7fe f933 	bl	8000830 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e10c      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d8:	4b6a      	ldr	r3, [pc, #424]	; (8002784 <HAL_RCC_OscConfig+0x474>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d106      	bne.n	80025fa <HAL_RCC_OscConfig+0x2ea>
 80025ec:	4b64      	ldr	r3, [pc, #400]	; (8002780 <HAL_RCC_OscConfig+0x470>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	4a63      	ldr	r2, [pc, #396]	; (8002780 <HAL_RCC_OscConfig+0x470>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6713      	str	r3, [r2, #112]	; 0x70
 80025f8:	e01c      	b.n	8002634 <HAL_RCC_OscConfig+0x324>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b05      	cmp	r3, #5
 8002600:	d10c      	bne.n	800261c <HAL_RCC_OscConfig+0x30c>
 8002602:	4b5f      	ldr	r3, [pc, #380]	; (8002780 <HAL_RCC_OscConfig+0x470>)
 8002604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002606:	4a5e      	ldr	r2, [pc, #376]	; (8002780 <HAL_RCC_OscConfig+0x470>)
 8002608:	f043 0304 	orr.w	r3, r3, #4
 800260c:	6713      	str	r3, [r2, #112]	; 0x70
 800260e:	4b5c      	ldr	r3, [pc, #368]	; (8002780 <HAL_RCC_OscConfig+0x470>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002612:	4a5b      	ldr	r2, [pc, #364]	; (8002780 <HAL_RCC_OscConfig+0x470>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	6713      	str	r3, [r2, #112]	; 0x70
 800261a:	e00b      	b.n	8002634 <HAL_RCC_OscConfig+0x324>
 800261c:	4b58      	ldr	r3, [pc, #352]	; (8002780 <HAL_RCC_OscConfig+0x470>)
 800261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002620:	4a57      	ldr	r2, [pc, #348]	; (8002780 <HAL_RCC_OscConfig+0x470>)
 8002622:	f023 0301 	bic.w	r3, r3, #1
 8002626:	6713      	str	r3, [r2, #112]	; 0x70
 8002628:	4b55      	ldr	r3, [pc, #340]	; (8002780 <HAL_RCC_OscConfig+0x470>)
 800262a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262c:	4a54      	ldr	r2, [pc, #336]	; (8002780 <HAL_RCC_OscConfig+0x470>)
 800262e:	f023 0304 	bic.w	r3, r3, #4
 8002632:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d015      	beq.n	8002668 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263c:	f7fe f8f8 	bl	8000830 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002642:	e00a      	b.n	800265a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002644:	f7fe f8f4 	bl	8000830 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002652:	4293      	cmp	r3, r2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e0cb      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800265a:	4b49      	ldr	r3, [pc, #292]	; (8002780 <HAL_RCC_OscConfig+0x470>)
 800265c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0ee      	beq.n	8002644 <HAL_RCC_OscConfig+0x334>
 8002666:	e014      	b.n	8002692 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002668:	f7fe f8e2 	bl	8000830 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266e:	e00a      	b.n	8002686 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002670:	f7fe f8de 	bl	8000830 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	; 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e0b5      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002686:	4b3e      	ldr	r3, [pc, #248]	; (8002780 <HAL_RCC_OscConfig+0x470>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1ee      	bne.n	8002670 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002692:	7dfb      	ldrb	r3, [r7, #23]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d105      	bne.n	80026a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002698:	4b39      	ldr	r3, [pc, #228]	; (8002780 <HAL_RCC_OscConfig+0x470>)
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	4a38      	ldr	r2, [pc, #224]	; (8002780 <HAL_RCC_OscConfig+0x470>)
 800269e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80a1 	beq.w	80027f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026ae:	4b34      	ldr	r3, [pc, #208]	; (8002780 <HAL_RCC_OscConfig+0x470>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d05c      	beq.n	8002774 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d141      	bne.n	8002746 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c2:	4b31      	ldr	r3, [pc, #196]	; (8002788 <HAL_RCC_OscConfig+0x478>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c8:	f7fe f8b2 	bl	8000830 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d0:	f7fe f8ae 	bl	8000830 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e087      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e2:	4b27      	ldr	r3, [pc, #156]	; (8002780 <HAL_RCC_OscConfig+0x470>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69da      	ldr	r2, [r3, #28]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	019b      	lsls	r3, r3, #6
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002704:	085b      	lsrs	r3, r3, #1
 8002706:	3b01      	subs	r3, #1
 8002708:	041b      	lsls	r3, r3, #16
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	061b      	lsls	r3, r3, #24
 8002712:	491b      	ldr	r1, [pc, #108]	; (8002780 <HAL_RCC_OscConfig+0x470>)
 8002714:	4313      	orrs	r3, r2
 8002716:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002718:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <HAL_RCC_OscConfig+0x478>)
 800271a:	2201      	movs	r2, #1
 800271c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271e:	f7fe f887 	bl	8000830 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002726:	f7fe f883 	bl	8000830 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e05c      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002738:	4b11      	ldr	r3, [pc, #68]	; (8002780 <HAL_RCC_OscConfig+0x470>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f0      	beq.n	8002726 <HAL_RCC_OscConfig+0x416>
 8002744:	e054      	b.n	80027f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <HAL_RCC_OscConfig+0x478>)
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7fe f870 	bl	8000830 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002754:	f7fe f86c 	bl	8000830 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e045      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_RCC_OscConfig+0x470>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f0      	bne.n	8002754 <HAL_RCC_OscConfig+0x444>
 8002772:	e03d      	b.n	80027f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d107      	bne.n	800278c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e038      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
 8002780:	40023800 	.word	0x40023800
 8002784:	40007000 	.word	0x40007000
 8002788:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800278c:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <HAL_RCC_OscConfig+0x4ec>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d028      	beq.n	80027ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d121      	bne.n	80027ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d11a      	bne.n	80027ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027bc:	4013      	ands	r3, r2
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d111      	bne.n	80027ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d2:	085b      	lsrs	r3, r3, #1
 80027d4:	3b01      	subs	r3, #1
 80027d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027d8:	429a      	cmp	r2, r3
 80027da:	d107      	bne.n	80027ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40023800 	.word	0x40023800

08002800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0cc      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002814:	4b68      	ldr	r3, [pc, #416]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d90c      	bls.n	800283c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b65      	ldr	r3, [pc, #404]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282a:	4b63      	ldr	r3, [pc, #396]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0b8      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d020      	beq.n	800288a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002854:	4b59      	ldr	r3, [pc, #356]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	4a58      	ldr	r2, [pc, #352]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800285e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800286c:	4b53      	ldr	r3, [pc, #332]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	4a52      	ldr	r2, [pc, #328]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002876:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002878:	4b50      	ldr	r3, [pc, #320]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	494d      	ldr	r1, [pc, #308]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	4313      	orrs	r3, r2
 8002888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d044      	beq.n	8002920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d107      	bne.n	80028ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289e:	4b47      	ldr	r3, [pc, #284]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d119      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e07f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d003      	beq.n	80028be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d107      	bne.n	80028ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028be:	4b3f      	ldr	r3, [pc, #252]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d109      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e06f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ce:	4b3b      	ldr	r3, [pc, #236]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e067      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028de:	4b37      	ldr	r3, [pc, #220]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f023 0203 	bic.w	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	4934      	ldr	r1, [pc, #208]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f0:	f7fd ff9e 	bl	8000830 <HAL_GetTick>
 80028f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	e00a      	b.n	800290e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f8:	f7fd ff9a 	bl	8000830 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	; 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e04f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290e:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 020c 	and.w	r2, r3, #12
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	429a      	cmp	r2, r3
 800291e:	d1eb      	bne.n	80028f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002920:	4b25      	ldr	r3, [pc, #148]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d20c      	bcs.n	8002948 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b22      	ldr	r3, [pc, #136]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e032      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d008      	beq.n	8002966 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002954:	4b19      	ldr	r3, [pc, #100]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4916      	ldr	r1, [pc, #88]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	490e      	ldr	r1, [pc, #56]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	4313      	orrs	r3, r2
 8002984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002986:	f000 f821 	bl	80029cc <HAL_RCC_GetSysClockFreq>
 800298a:	4602      	mov	r2, r0
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	490a      	ldr	r1, [pc, #40]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002998:	5ccb      	ldrb	r3, [r1, r3]
 800299a:	fa22 f303 	lsr.w	r3, r2, r3
 800299e:	4a09      	ldr	r2, [pc, #36]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80029a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fd fefe 	bl	80007a8 <HAL_InitTick>

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40023c00 	.word	0x40023c00
 80029bc:	40023800 	.word	0x40023800
 80029c0:	08008438 	.word	0x08008438
 80029c4:	20000000 	.word	0x20000000
 80029c8:	20000004 	.word	0x20000004

080029cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029d0:	b094      	sub	sp, #80	; 0x50
 80029d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	647b      	str	r3, [r7, #68]	; 0x44
 80029d8:	2300      	movs	r3, #0
 80029da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029dc:	2300      	movs	r3, #0
 80029de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029e4:	4b79      	ldr	r3, [pc, #484]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x200>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 030c 	and.w	r3, r3, #12
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d00d      	beq.n	8002a0c <HAL_RCC_GetSysClockFreq+0x40>
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	f200 80e1 	bhi.w	8002bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <HAL_RCC_GetSysClockFreq+0x34>
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d003      	beq.n	8002a06 <HAL_RCC_GetSysClockFreq+0x3a>
 80029fe:	e0db      	b.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a00:	4b73      	ldr	r3, [pc, #460]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a04:	e0db      	b.n	8002bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a06:	4b73      	ldr	r3, [pc, #460]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a0a:	e0d8      	b.n	8002bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a0c:	4b6f      	ldr	r3, [pc, #444]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a16:	4b6d      	ldr	r3, [pc, #436]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d063      	beq.n	8002aea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a22:	4b6a      	ldr	r3, [pc, #424]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	099b      	lsrs	r3, r3, #6
 8002a28:	2200      	movs	r2, #0
 8002a2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a34:	633b      	str	r3, [r7, #48]	; 0x30
 8002a36:	2300      	movs	r3, #0
 8002a38:	637b      	str	r3, [r7, #52]	; 0x34
 8002a3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a3e:	4622      	mov	r2, r4
 8002a40:	462b      	mov	r3, r5
 8002a42:	f04f 0000 	mov.w	r0, #0
 8002a46:	f04f 0100 	mov.w	r1, #0
 8002a4a:	0159      	lsls	r1, r3, #5
 8002a4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a50:	0150      	lsls	r0, r2, #5
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4621      	mov	r1, r4
 8002a58:	1a51      	subs	r1, r2, r1
 8002a5a:	6139      	str	r1, [r7, #16]
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a70:	4659      	mov	r1, fp
 8002a72:	018b      	lsls	r3, r1, #6
 8002a74:	4651      	mov	r1, sl
 8002a76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a7a:	4651      	mov	r1, sl
 8002a7c:	018a      	lsls	r2, r1, #6
 8002a7e:	4651      	mov	r1, sl
 8002a80:	ebb2 0801 	subs.w	r8, r2, r1
 8002a84:	4659      	mov	r1, fp
 8002a86:	eb63 0901 	sbc.w	r9, r3, r1
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a9e:	4690      	mov	r8, r2
 8002aa0:	4699      	mov	r9, r3
 8002aa2:	4623      	mov	r3, r4
 8002aa4:	eb18 0303 	adds.w	r3, r8, r3
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	462b      	mov	r3, r5
 8002aac:	eb49 0303 	adc.w	r3, r9, r3
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002abe:	4629      	mov	r1, r5
 8002ac0:	024b      	lsls	r3, r1, #9
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ac8:	4621      	mov	r1, r4
 8002aca:	024a      	lsls	r2, r1, #9
 8002acc:	4610      	mov	r0, r2
 8002ace:	4619      	mov	r1, r3
 8002ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ad8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002adc:	f7fd fb7c 	bl	80001d8 <__aeabi_uldivmod>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ae8:	e058      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aea:	4b38      	ldr	r3, [pc, #224]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	099b      	lsrs	r3, r3, #6
 8002af0:	2200      	movs	r2, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	4611      	mov	r1, r2
 8002af6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002afa:	623b      	str	r3, [r7, #32]
 8002afc:	2300      	movs	r3, #0
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
 8002b00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b04:	4642      	mov	r2, r8
 8002b06:	464b      	mov	r3, r9
 8002b08:	f04f 0000 	mov.w	r0, #0
 8002b0c:	f04f 0100 	mov.w	r1, #0
 8002b10:	0159      	lsls	r1, r3, #5
 8002b12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b16:	0150      	lsls	r0, r2, #5
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4641      	mov	r1, r8
 8002b1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b22:	4649      	mov	r1, r9
 8002b24:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b3c:	ebb2 040a 	subs.w	r4, r2, sl
 8002b40:	eb63 050b 	sbc.w	r5, r3, fp
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	00eb      	lsls	r3, r5, #3
 8002b4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b52:	00e2      	lsls	r2, r4, #3
 8002b54:	4614      	mov	r4, r2
 8002b56:	461d      	mov	r5, r3
 8002b58:	4643      	mov	r3, r8
 8002b5a:	18e3      	adds	r3, r4, r3
 8002b5c:	603b      	str	r3, [r7, #0]
 8002b5e:	464b      	mov	r3, r9
 8002b60:	eb45 0303 	adc.w	r3, r5, r3
 8002b64:	607b      	str	r3, [r7, #4]
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b72:	4629      	mov	r1, r5
 8002b74:	028b      	lsls	r3, r1, #10
 8002b76:	4621      	mov	r1, r4
 8002b78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b7c:	4621      	mov	r1, r4
 8002b7e:	028a      	lsls	r2, r1, #10
 8002b80:	4610      	mov	r0, r2
 8002b82:	4619      	mov	r1, r3
 8002b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b86:	2200      	movs	r2, #0
 8002b88:	61bb      	str	r3, [r7, #24]
 8002b8a:	61fa      	str	r2, [r7, #28]
 8002b8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b90:	f7fd fb22 	bl	80001d8 <__aeabi_uldivmod>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4613      	mov	r3, r2
 8002b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	0c1b      	lsrs	r3, r3, #16
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002bac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bb6:	e002      	b.n	8002bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3750      	adds	r7, #80	; 0x50
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bca:	bf00      	nop
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	00f42400 	.word	0x00f42400
 8002bd4:	007a1200 	.word	0x007a1200

08002bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bdc:	4b03      	ldr	r3, [pc, #12]	; (8002bec <HAL_RCC_GetHCLKFreq+0x14>)
 8002bde:	681b      	ldr	r3, [r3, #0]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	20000000 	.word	0x20000000

08002bf0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002bf0:	b084      	sub	sp, #16
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b084      	sub	sp, #16
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	f107 001c 	add.w	r0, r7, #28
 8002bfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d122      	bne.n	8002c4e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d105      	bne.n	8002c42 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f001 fbee 	bl	8004424 <USB_CoreReset>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	73fb      	strb	r3, [r7, #15]
 8002c4c:	e01a      	b.n	8002c84 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f001 fbe2 	bl	8004424 <USB_CoreReset>
 8002c60:	4603      	mov	r3, r0
 8002c62:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	639a      	str	r2, [r3, #56]	; 0x38
 8002c76:	e005      	b.n	8002c84 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d10b      	bne.n	8002ca2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f043 0206 	orr.w	r2, r3, #6
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f043 0220 	orr.w	r2, r3, #32
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002cae:	b004      	add	sp, #16
 8002cb0:	4770      	bx	lr
	...

08002cb4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d165      	bne.n	8002d94 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	4a41      	ldr	r2, [pc, #260]	; (8002dd0 <USB_SetTurnaroundTime+0x11c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d906      	bls.n	8002cde <USB_SetTurnaroundTime+0x2a>
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4a40      	ldr	r2, [pc, #256]	; (8002dd4 <USB_SetTurnaroundTime+0x120>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d202      	bcs.n	8002cde <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002cd8:	230f      	movs	r3, #15
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	e062      	b.n	8002da4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	4a3c      	ldr	r2, [pc, #240]	; (8002dd4 <USB_SetTurnaroundTime+0x120>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d306      	bcc.n	8002cf4 <USB_SetTurnaroundTime+0x40>
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4a3b      	ldr	r2, [pc, #236]	; (8002dd8 <USB_SetTurnaroundTime+0x124>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d202      	bcs.n	8002cf4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002cee:	230e      	movs	r3, #14
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	e057      	b.n	8002da4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	4a38      	ldr	r2, [pc, #224]	; (8002dd8 <USB_SetTurnaroundTime+0x124>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d306      	bcc.n	8002d0a <USB_SetTurnaroundTime+0x56>
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	4a37      	ldr	r2, [pc, #220]	; (8002ddc <USB_SetTurnaroundTime+0x128>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d202      	bcs.n	8002d0a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002d04:	230d      	movs	r3, #13
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	e04c      	b.n	8002da4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	4a33      	ldr	r2, [pc, #204]	; (8002ddc <USB_SetTurnaroundTime+0x128>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d306      	bcc.n	8002d20 <USB_SetTurnaroundTime+0x6c>
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	4a32      	ldr	r2, [pc, #200]	; (8002de0 <USB_SetTurnaroundTime+0x12c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d802      	bhi.n	8002d20 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002d1a:	230c      	movs	r3, #12
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	e041      	b.n	8002da4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4a2f      	ldr	r2, [pc, #188]	; (8002de0 <USB_SetTurnaroundTime+0x12c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d906      	bls.n	8002d36 <USB_SetTurnaroundTime+0x82>
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	4a2e      	ldr	r2, [pc, #184]	; (8002de4 <USB_SetTurnaroundTime+0x130>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d802      	bhi.n	8002d36 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002d30:	230b      	movs	r3, #11
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	e036      	b.n	8002da4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	4a2a      	ldr	r2, [pc, #168]	; (8002de4 <USB_SetTurnaroundTime+0x130>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d906      	bls.n	8002d4c <USB_SetTurnaroundTime+0x98>
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	4a29      	ldr	r2, [pc, #164]	; (8002de8 <USB_SetTurnaroundTime+0x134>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d802      	bhi.n	8002d4c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002d46:	230a      	movs	r3, #10
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	e02b      	b.n	8002da4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	4a26      	ldr	r2, [pc, #152]	; (8002de8 <USB_SetTurnaroundTime+0x134>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d906      	bls.n	8002d62 <USB_SetTurnaroundTime+0xae>
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4a25      	ldr	r2, [pc, #148]	; (8002dec <USB_SetTurnaroundTime+0x138>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d202      	bcs.n	8002d62 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002d5c:	2309      	movs	r3, #9
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	e020      	b.n	8002da4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	4a21      	ldr	r2, [pc, #132]	; (8002dec <USB_SetTurnaroundTime+0x138>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d306      	bcc.n	8002d78 <USB_SetTurnaroundTime+0xc4>
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	4a20      	ldr	r2, [pc, #128]	; (8002df0 <USB_SetTurnaroundTime+0x13c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d802      	bhi.n	8002d78 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002d72:	2308      	movs	r3, #8
 8002d74:	617b      	str	r3, [r7, #20]
 8002d76:	e015      	b.n	8002da4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	4a1d      	ldr	r2, [pc, #116]	; (8002df0 <USB_SetTurnaroundTime+0x13c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d906      	bls.n	8002d8e <USB_SetTurnaroundTime+0xda>
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	4a1c      	ldr	r2, [pc, #112]	; (8002df4 <USB_SetTurnaroundTime+0x140>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d202      	bcs.n	8002d8e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002d88:	2307      	movs	r3, #7
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	e00a      	b.n	8002da4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002d8e:	2306      	movs	r3, #6
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	e007      	b.n	8002da4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d102      	bne.n	8002da0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002d9a:	2309      	movs	r3, #9
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	e001      	b.n	8002da4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002da0:	2309      	movs	r3, #9
 8002da2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	029b      	lsls	r3, r3, #10
 8002db8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	371c      	adds	r7, #28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	00d8acbf 	.word	0x00d8acbf
 8002dd4:	00e4e1c0 	.word	0x00e4e1c0
 8002dd8:	00f42400 	.word	0x00f42400
 8002ddc:	01067380 	.word	0x01067380
 8002de0:	011a499f 	.word	0x011a499f
 8002de4:	01312cff 	.word	0x01312cff
 8002de8:	014ca43f 	.word	0x014ca43f
 8002dec:	016e3600 	.word	0x016e3600
 8002df0:	01a6ab1f 	.word	0x01a6ab1f
 8002df4:	01e84800 	.word	0x01e84800

08002df8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f043 0201 	orr.w	r2, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f023 0201 	bic.w	r2, r3, #1
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d115      	bne.n	8002e8a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e6a:	2001      	movs	r0, #1
 8002e6c:	f7fd fcec 	bl	8000848 <HAL_Delay>
      ms++;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	3301      	adds	r3, #1
 8002e74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f001 fa45 	bl	8004306 <USB_GetMode>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d01e      	beq.n	8002ec0 <USB_SetCurrentMode+0x84>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2b31      	cmp	r3, #49	; 0x31
 8002e86:	d9f0      	bls.n	8002e6a <USB_SetCurrentMode+0x2e>
 8002e88:	e01a      	b.n	8002ec0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002e8a:	78fb      	ldrb	r3, [r7, #3]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d115      	bne.n	8002ebc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e9c:	2001      	movs	r0, #1
 8002e9e:	f7fd fcd3 	bl	8000848 <HAL_Delay>
      ms++;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f001 fa2c 	bl	8004306 <USB_GetMode>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <USB_SetCurrentMode+0x84>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2b31      	cmp	r3, #49	; 0x31
 8002eb8:	d9f0      	bls.n	8002e9c <USB_SetCurrentMode+0x60>
 8002eba:	e001      	b.n	8002ec0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e005      	b.n	8002ecc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2b32      	cmp	r3, #50	; 0x32
 8002ec4:	d101      	bne.n	8002eca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b086      	sub	sp, #24
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002ee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002eee:	2300      	movs	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	e009      	b.n	8002f08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	3340      	adds	r3, #64	; 0x40
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	2200      	movs	r2, #0
 8002f00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	3301      	adds	r3, #1
 8002f06:	613b      	str	r3, [r7, #16]
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	2b0e      	cmp	r3, #14
 8002f0c:	d9f2      	bls.n	8002ef4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d11c      	bne.n	8002f4e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f22:	f043 0302 	orr.w	r3, r3, #2
 8002f26:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f44:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	639a      	str	r2, [r3, #56]	; 0x38
 8002f4c:	e00b      	b.n	8002f66 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f52:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	2300      	movs	r3, #0
 8002f70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f78:	4619      	mov	r1, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f80:	461a      	mov	r2, r3
 8002f82:	680b      	ldr	r3, [r1, #0]
 8002f84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d10c      	bne.n	8002fa6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d104      	bne.n	8002f9c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002f92:	2100      	movs	r1, #0
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f965 	bl	8003264 <USB_SetDevSpeed>
 8002f9a:	e008      	b.n	8002fae <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f960 	bl	8003264 <USB_SetDevSpeed>
 8002fa4:	e003      	b.n	8002fae <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002fa6:	2103      	movs	r1, #3
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f95b 	bl	8003264 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002fae:	2110      	movs	r1, #16
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f8f3 	bl	800319c <USB_FlushTxFifo>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f91f 	bl	8003204 <USB_FlushRxFifo>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	2300      	movs	r3, #0
 8002fda:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fee:	461a      	mov	r2, r3
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	e043      	b.n	8003082 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	015a      	lsls	r2, r3, #5
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4413      	add	r3, r2
 8003002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800300c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003010:	d118      	bne.n	8003044 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10a      	bne.n	800302e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4413      	add	r3, r2
 8003020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003024:	461a      	mov	r2, r3
 8003026:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800302a:	6013      	str	r3, [r2, #0]
 800302c:	e013      	b.n	8003056 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4413      	add	r3, r2
 8003036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800303a:	461a      	mov	r2, r3
 800303c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	e008      	b.n	8003056 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4413      	add	r3, r2
 800304c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003050:	461a      	mov	r2, r3
 8003052:	2300      	movs	r3, #0
 8003054:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4413      	add	r3, r2
 800305e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003062:	461a      	mov	r2, r3
 8003064:	2300      	movs	r3, #0
 8003066:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4413      	add	r3, r2
 8003070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003074:	461a      	mov	r2, r3
 8003076:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800307a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	3301      	adds	r3, #1
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	429a      	cmp	r2, r3
 8003088:	d3b7      	bcc.n	8002ffa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	e043      	b.n	8003118 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	015a      	lsls	r2, r3, #5
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4413      	add	r3, r2
 8003098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030a6:	d118      	bne.n	80030da <USB_DevInit+0x206>
    {
      if (i == 0U)
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10a      	bne.n	80030c4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	015a      	lsls	r2, r3, #5
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ba:	461a      	mov	r2, r3
 80030bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	e013      	b.n	80030ec <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	015a      	lsls	r2, r3, #5
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4413      	add	r3, r2
 80030cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d0:	461a      	mov	r2, r3
 80030d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	e008      	b.n	80030ec <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	015a      	lsls	r2, r3, #5
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4413      	add	r3, r2
 80030e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e6:	461a      	mov	r2, r3
 80030e8:	2300      	movs	r3, #0
 80030ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f8:	461a      	mov	r2, r3
 80030fa:	2300      	movs	r3, #0
 80030fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4413      	add	r3, r2
 8003106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800310a:	461a      	mov	r2, r3
 800310c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003110:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	3301      	adds	r3, #1
 8003116:	613b      	str	r3, [r7, #16]
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	429a      	cmp	r2, r3
 800311e:	d3b7      	bcc.n	8003090 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800312e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003132:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003140:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003144:	2b00      	cmp	r3, #0
 8003146:	d105      	bne.n	8003154 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	f043 0210 	orr.w	r2, r3, #16
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699a      	ldr	r2, [r3, #24]
 8003158:	4b0f      	ldr	r3, [pc, #60]	; (8003198 <USB_DevInit+0x2c4>)
 800315a:	4313      	orrs	r3, r2
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003162:	2b00      	cmp	r3, #0
 8003164:	d005      	beq.n	8003172 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f043 0208 	orr.w	r2, r3, #8
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003174:	2b01      	cmp	r3, #1
 8003176:	d107      	bne.n	8003188 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003180:	f043 0304 	orr.w	r3, r3, #4
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003188:	7dfb      	ldrb	r3, [r7, #23]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003194:	b004      	add	sp, #16
 8003196:	4770      	bx	lr
 8003198:	803c3800 	.word	0x803c3800

0800319c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	3301      	adds	r3, #1
 80031ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4a13      	ldr	r2, [pc, #76]	; (8003200 <USB_FlushTxFifo+0x64>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d901      	bls.n	80031bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e01b      	b.n	80031f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	daf2      	bge.n	80031aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	019b      	lsls	r3, r3, #6
 80031cc:	f043 0220 	orr.w	r2, r3, #32
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	3301      	adds	r3, #1
 80031d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4a08      	ldr	r2, [pc, #32]	; (8003200 <USB_FlushTxFifo+0x64>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e006      	b.n	80031f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	2b20      	cmp	r3, #32
 80031f0:	d0f0      	beq.n	80031d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	00030d40 	.word	0x00030d40

08003204 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	3301      	adds	r3, #1
 8003214:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4a11      	ldr	r2, [pc, #68]	; (8003260 <USB_FlushRxFifo+0x5c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d901      	bls.n	8003222 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e018      	b.n	8003254 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	2b00      	cmp	r3, #0
 8003228:	daf2      	bge.n	8003210 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2210      	movs	r2, #16
 8003232:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	3301      	adds	r3, #1
 8003238:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4a08      	ldr	r2, [pc, #32]	; (8003260 <USB_FlushRxFifo+0x5c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d901      	bls.n	8003246 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e006      	b.n	8003254 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f003 0310 	and.w	r3, r3, #16
 800324e:	2b10      	cmp	r3, #16
 8003250:	d0f0      	beq.n	8003234 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	00030d40 	.word	0x00030d40

08003264 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	68f9      	ldr	r1, [r7, #12]
 8003280:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003284:	4313      	orrs	r3, r2
 8003286:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003296:	b480      	push	{r7}
 8003298:	b087      	sub	sp, #28
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0306 	and.w	r3, r3, #6
 80032ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d102      	bne.n	80032bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80032b6:	2300      	movs	r3, #0
 80032b8:	75fb      	strb	r3, [r7, #23]
 80032ba:	e00a      	b.n	80032d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d002      	beq.n	80032c8 <USB_GetDevSpeed+0x32>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b06      	cmp	r3, #6
 80032c6:	d102      	bne.n	80032ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80032c8:	2302      	movs	r3, #2
 80032ca:	75fb      	strb	r3, [r7, #23]
 80032cc:	e001      	b.n	80032d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80032ce:	230f      	movs	r3, #15
 80032d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80032d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	371c      	adds	r7, #28
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	785b      	ldrb	r3, [r3, #1]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d13a      	bne.n	8003372 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003302:	69da      	ldr	r2, [r3, #28]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	f003 030f 	and.w	r3, r3, #15
 800330c:	2101      	movs	r1, #1
 800330e:	fa01 f303 	lsl.w	r3, r1, r3
 8003312:	b29b      	uxth	r3, r3
 8003314:	68f9      	ldr	r1, [r7, #12]
 8003316:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800331a:	4313      	orrs	r3, r2
 800331c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4413      	add	r3, r2
 8003326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d155      	bne.n	80033e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4413      	add	r3, r2
 800333c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	791b      	ldrb	r3, [r3, #4]
 800334e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003350:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	059b      	lsls	r3, r3, #22
 8003356:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003358:	4313      	orrs	r3, r2
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	0151      	lsls	r1, r2, #5
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	440a      	add	r2, r1
 8003362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800336a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	e036      	b.n	80033e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003378:	69da      	ldr	r2, [r3, #28]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	2101      	movs	r1, #1
 8003384:	fa01 f303 	lsl.w	r3, r1, r3
 8003388:	041b      	lsls	r3, r3, #16
 800338a:	68f9      	ldr	r1, [r7, #12]
 800338c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003390:	4313      	orrs	r3, r2
 8003392:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4413      	add	r3, r2
 800339c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d11a      	bne.n	80033e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	791b      	ldrb	r3, [r3, #4]
 80033c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80033c6:	430b      	orrs	r3, r1
 80033c8:	4313      	orrs	r3, r2
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	0151      	lsls	r1, r2, #5
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	440a      	add	r2, r1
 80033d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
	...

080033f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	785b      	ldrb	r3, [r3, #1]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d161      	bne.n	80034d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4413      	add	r3, r2
 8003414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800341e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003422:	d11f      	bne.n	8003464 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4413      	add	r3, r2
 800342c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	0151      	lsls	r1, r2, #5
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	440a      	add	r2, r1
 800343a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800343e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003442:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4413      	add	r3, r2
 800344c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	0151      	lsls	r1, r2, #5
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	440a      	add	r2, r1
 800345a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800345e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003462:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800346a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	f003 030f 	and.w	r3, r3, #15
 8003474:	2101      	movs	r1, #1
 8003476:	fa01 f303 	lsl.w	r3, r1, r3
 800347a:	b29b      	uxth	r3, r3
 800347c:	43db      	mvns	r3, r3
 800347e:	68f9      	ldr	r1, [r7, #12]
 8003480:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003484:	4013      	ands	r3, r2
 8003486:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800348e:	69da      	ldr	r2, [r3, #28]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	2101      	movs	r1, #1
 800349a:	fa01 f303 	lsl.w	r3, r1, r3
 800349e:	b29b      	uxth	r3, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	68f9      	ldr	r1, [r7, #12]
 80034a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034a8:	4013      	ands	r3, r2
 80034aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	0159      	lsls	r1, r3, #5
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	440b      	add	r3, r1
 80034c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c6:	4619      	mov	r1, r3
 80034c8:	4b35      	ldr	r3, [pc, #212]	; (80035a0 <USB_DeactivateEndpoint+0x1b0>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]
 80034ce:	e060      	b.n	8003592 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034e6:	d11f      	bne.n	8003528 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	0151      	lsls	r1, r2, #5
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	440a      	add	r2, r1
 80034fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003502:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003506:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	015a      	lsls	r2, r3, #5
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4413      	add	r3, r2
 8003510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	0151      	lsls	r1, r2, #5
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	440a      	add	r2, r1
 800351e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003522:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003526:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800352e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	f003 030f 	and.w	r3, r3, #15
 8003538:	2101      	movs	r1, #1
 800353a:	fa01 f303 	lsl.w	r3, r1, r3
 800353e:	041b      	lsls	r3, r3, #16
 8003540:	43db      	mvns	r3, r3
 8003542:	68f9      	ldr	r1, [r7, #12]
 8003544:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003548:	4013      	ands	r3, r2
 800354a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003552:	69da      	ldr	r2, [r3, #28]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	2101      	movs	r1, #1
 800355e:	fa01 f303 	lsl.w	r3, r1, r3
 8003562:	041b      	lsls	r3, r3, #16
 8003564:	43db      	mvns	r3, r3
 8003566:	68f9      	ldr	r1, [r7, #12]
 8003568:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800356c:	4013      	ands	r3, r2
 800356e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	0159      	lsls	r1, r3, #5
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	440b      	add	r3, r1
 8003586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358a:	4619      	mov	r1, r3
 800358c:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <USB_DeactivateEndpoint+0x1b4>)
 800358e:	4013      	ands	r3, r2
 8003590:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	ec337800 	.word	0xec337800
 80035a4:	eff37800 	.word	0xeff37800

080035a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08a      	sub	sp, #40	; 0x28
 80035ac:	af02      	add	r7, sp, #8
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	4613      	mov	r3, r2
 80035b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	785b      	ldrb	r3, [r3, #1]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	f040 815c 	bne.w	8003882 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d132      	bne.n	8003638 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	015a      	lsls	r2, r3, #5
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	0151      	lsls	r1, r2, #5
 80035e4:	69fa      	ldr	r2, [r7, #28]
 80035e6:	440a      	add	r2, r1
 80035e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80035f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	0151      	lsls	r1, r2, #5
 8003608:	69fa      	ldr	r2, [r7, #28]
 800360a:	440a      	add	r2, r1
 800360c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003610:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003614:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	4413      	add	r3, r2
 800361e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	0151      	lsls	r1, r2, #5
 8003628:	69fa      	ldr	r2, [r7, #28]
 800362a:	440a      	add	r2, r1
 800362c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003630:	0cdb      	lsrs	r3, r3, #19
 8003632:	04db      	lsls	r3, r3, #19
 8003634:	6113      	str	r3, [r2, #16]
 8003636:	e074      	b.n	8003722 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	4413      	add	r3, r2
 8003640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	0151      	lsls	r1, r2, #5
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	440a      	add	r2, r1
 800364e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003652:	0cdb      	lsrs	r3, r3, #19
 8003654:	04db      	lsls	r3, r3, #19
 8003656:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	0151      	lsls	r1, r2, #5
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	440a      	add	r2, r1
 800366e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003672:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003676:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800367a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	4413      	add	r3, r2
 8003684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003688:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	6999      	ldr	r1, [r3, #24]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	440b      	add	r3, r1
 8003694:	1e59      	subs	r1, r3, #1
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	fbb1 f3f3 	udiv	r3, r1, r3
 800369e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80036a0:	4b9d      	ldr	r3, [pc, #628]	; (8003918 <USB_EPStartXfer+0x370>)
 80036a2:	400b      	ands	r3, r1
 80036a4:	69b9      	ldr	r1, [r7, #24]
 80036a6:	0148      	lsls	r0, r1, #5
 80036a8:	69f9      	ldr	r1, [r7, #28]
 80036aa:	4401      	add	r1, r0
 80036ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80036b0:	4313      	orrs	r3, r2
 80036b2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c0:	691a      	ldr	r2, [r3, #16]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ca:	69b9      	ldr	r1, [r7, #24]
 80036cc:	0148      	lsls	r0, r1, #5
 80036ce:	69f9      	ldr	r1, [r7, #28]
 80036d0:	4401      	add	r1, r0
 80036d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80036d6:	4313      	orrs	r3, r2
 80036d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	791b      	ldrb	r3, [r3, #4]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d11f      	bne.n	8003722 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	015a      	lsls	r2, r3, #5
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	0151      	lsls	r1, r2, #5
 80036f4:	69fa      	ldr	r2, [r7, #28]
 80036f6:	440a      	add	r2, r1
 80036f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003700:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	4413      	add	r3, r2
 800370a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	0151      	lsls	r1, r2, #5
 8003714:	69fa      	ldr	r2, [r7, #28]
 8003716:	440a      	add	r2, r1
 8003718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800371c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003720:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d14b      	bne.n	80037c0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d009      	beq.n	8003744 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	015a      	lsls	r2, r3, #5
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	4413      	add	r3, r2
 8003738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800373c:	461a      	mov	r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	791b      	ldrb	r3, [r3, #4]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d128      	bne.n	800379e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003758:	2b00      	cmp	r3, #0
 800375a:	d110      	bne.n	800377e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	4413      	add	r3, r2
 8003764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	0151      	lsls	r1, r2, #5
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	440a      	add	r2, r1
 8003772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003776:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	e00f      	b.n	800379e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	015a      	lsls	r2, r3, #5
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	4413      	add	r3, r2
 8003786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	0151      	lsls	r1, r2, #5
 8003790:	69fa      	ldr	r2, [r7, #28]
 8003792:	440a      	add	r2, r1
 8003794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800379c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	015a      	lsls	r2, r3, #5
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	0151      	lsls	r1, r2, #5
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	440a      	add	r2, r1
 80037b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	e133      	b.n	8003a28 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	0151      	lsls	r1, r2, #5
 80037d2:	69fa      	ldr	r2, [r7, #28]
 80037d4:	440a      	add	r2, r1
 80037d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80037de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	791b      	ldrb	r3, [r3, #4]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d015      	beq.n	8003814 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 811b 	beq.w	8003a28 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	2101      	movs	r1, #1
 8003804:	fa01 f303 	lsl.w	r3, r1, r3
 8003808:	69f9      	ldr	r1, [r7, #28]
 800380a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800380e:	4313      	orrs	r3, r2
 8003810:	634b      	str	r3, [r1, #52]	; 0x34
 8003812:	e109      	b.n	8003a28 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d110      	bne.n	8003846 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	4413      	add	r3, r2
 800382c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	0151      	lsls	r1, r2, #5
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	440a      	add	r2, r1
 800383a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800383e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	e00f      	b.n	8003866 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	4413      	add	r3, r2
 800384e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	0151      	lsls	r1, r2, #5
 8003858:	69fa      	ldr	r2, [r7, #28]
 800385a:	440a      	add	r2, r1
 800385c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003864:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	6919      	ldr	r1, [r3, #16]
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	781a      	ldrb	r2, [r3, #0]
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	b298      	uxth	r0, r3
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	4603      	mov	r3, r0
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 fade 	bl	8003e3c <USB_WritePacket>
 8003880:	e0d2      	b.n	8003a28 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	4413      	add	r3, r2
 800388a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	0151      	lsls	r1, r2, #5
 8003894:	69fa      	ldr	r2, [r7, #28]
 8003896:	440a      	add	r2, r1
 8003898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800389c:	0cdb      	lsrs	r3, r3, #19
 800389e:	04db      	lsls	r3, r3, #19
 80038a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	0151      	lsls	r1, r2, #5
 80038b4:	69fa      	ldr	r2, [r7, #28]
 80038b6:	440a      	add	r2, r1
 80038b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80038c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80038c4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d126      	bne.n	800391c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038da:	691a      	ldr	r2, [r3, #16]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e4:	69b9      	ldr	r1, [r7, #24]
 80038e6:	0148      	lsls	r0, r1, #5
 80038e8:	69f9      	ldr	r1, [r7, #28]
 80038ea:	4401      	add	r1, r0
 80038ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80038f0:	4313      	orrs	r3, r2
 80038f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	0151      	lsls	r1, r2, #5
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	440a      	add	r2, r1
 800390a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800390e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003912:	6113      	str	r3, [r2, #16]
 8003914:	e03a      	b.n	800398c <USB_EPStartXfer+0x3e4>
 8003916:	bf00      	nop
 8003918:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	699a      	ldr	r2, [r3, #24]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	4413      	add	r3, r2
 8003926:	1e5a      	subs	r2, r3, #1
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003930:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	8afa      	ldrh	r2, [r7, #22]
 8003938:	fb03 f202 	mul.w	r2, r3, r2
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	4413      	add	r3, r2
 8003948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394c:	691a      	ldr	r2, [r3, #16]
 800394e:	8afb      	ldrh	r3, [r7, #22]
 8003950:	04d9      	lsls	r1, r3, #19
 8003952:	4b38      	ldr	r3, [pc, #224]	; (8003a34 <USB_EPStartXfer+0x48c>)
 8003954:	400b      	ands	r3, r1
 8003956:	69b9      	ldr	r1, [r7, #24]
 8003958:	0148      	lsls	r0, r1, #5
 800395a:	69f9      	ldr	r1, [r7, #28]
 800395c:	4401      	add	r1, r0
 800395e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003962:	4313      	orrs	r3, r2
 8003964:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	4413      	add	r3, r2
 800396e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800397c:	69b9      	ldr	r1, [r7, #24]
 800397e:	0148      	lsls	r0, r1, #5
 8003980:	69f9      	ldr	r1, [r7, #28]
 8003982:	4401      	add	r1, r0
 8003984:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003988:	4313      	orrs	r3, r2
 800398a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d10d      	bne.n	80039ae <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d009      	beq.n	80039ae <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	6919      	ldr	r1, [r3, #16]
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039aa:	460a      	mov	r2, r1
 80039ac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	791b      	ldrb	r3, [r3, #4]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d128      	bne.n	8003a08 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d110      	bne.n	80039e8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	0151      	lsls	r1, r2, #5
 80039d8:	69fa      	ldr	r2, [r7, #28]
 80039da:	440a      	add	r2, r1
 80039dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	e00f      	b.n	8003a08 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	0151      	lsls	r1, r2, #5
 80039fa:	69fa      	ldr	r2, [r7, #28]
 80039fc:	440a      	add	r2, r1
 80039fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a06:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	0151      	lsls	r1, r2, #5
 8003a1a:	69fa      	ldr	r2, [r7, #28]
 8003a1c:	440a      	add	r2, r1
 8003a1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3720      	adds	r7, #32
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	1ff80000 	.word	0x1ff80000

08003a38 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	4613      	mov	r3, r2
 8003a44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	785b      	ldrb	r3, [r3, #1]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	f040 80ce 	bne.w	8003bf6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d132      	bne.n	8003ac8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	0151      	lsls	r1, r2, #5
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	440a      	add	r2, r1
 8003a78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	0151      	lsls	r1, r2, #5
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	440a      	add	r2, r1
 8003a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003aa4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	0151      	lsls	r1, r2, #5
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	440a      	add	r2, r1
 8003abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ac0:	0cdb      	lsrs	r3, r3, #19
 8003ac2:	04db      	lsls	r3, r3, #19
 8003ac4:	6113      	str	r3, [r2, #16]
 8003ac6:	e04e      	b.n	8003b66 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	0151      	lsls	r1, r2, #5
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	440a      	add	r2, r1
 8003ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ae2:	0cdb      	lsrs	r3, r3, #19
 8003ae4:	04db      	lsls	r3, r3, #19
 8003ae6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	0151      	lsls	r1, r2, #5
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	440a      	add	r2, r1
 8003afe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b0a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	699a      	ldr	r2, [r3, #24]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d903      	bls.n	8003b20 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	0151      	lsls	r1, r2, #5
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	440a      	add	r2, r1
 8003b36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b56:	6939      	ldr	r1, [r7, #16]
 8003b58:	0148      	lsls	r0, r1, #5
 8003b5a:	6979      	ldr	r1, [r7, #20]
 8003b5c:	4401      	add	r1, r0
 8003b5e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003b62:	4313      	orrs	r3, r2
 8003b64:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003b66:	79fb      	ldrb	r3, [r7, #7]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d11e      	bne.n	8003baa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d009      	beq.n	8003b88 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b80:	461a      	mov	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	0151      	lsls	r1, r2, #5
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	440a      	add	r2, r1
 8003b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ba2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ba6:	6013      	str	r3, [r2, #0]
 8003ba8:	e097      	b.n	8003cda <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	0151      	lsls	r1, r2, #5
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	440a      	add	r2, r1
 8003bc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bc4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003bc8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 8083 	beq.w	8003cda <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	f003 030f 	and.w	r3, r3, #15
 8003be4:	2101      	movs	r1, #1
 8003be6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bea:	6979      	ldr	r1, [r7, #20]
 8003bec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	634b      	str	r3, [r1, #52]	; 0x34
 8003bf4:	e071      	b.n	8003cda <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	0151      	lsls	r1, r2, #5
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	440a      	add	r2, r1
 8003c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c10:	0cdb      	lsrs	r3, r3, #19
 8003c12:	04db      	lsls	r3, r3, #19
 8003c14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	015a      	lsls	r2, r3, #5
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	0151      	lsls	r1, r2, #5
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	440a      	add	r2, r1
 8003c2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c38:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	0151      	lsls	r1, r2, #5
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	440a      	add	r2, r1
 8003c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	015a      	lsls	r2, r3, #5
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c88:	6939      	ldr	r1, [r7, #16]
 8003c8a:	0148      	lsls	r0, r1, #5
 8003c8c:	6979      	ldr	r1, [r7, #20]
 8003c8e:	4401      	add	r1, r0
 8003c90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003c94:	4313      	orrs	r3, r2
 8003c96:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003c98:	79fb      	ldrb	r3, [r7, #7]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d10d      	bne.n	8003cba <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d009      	beq.n	8003cba <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	6919      	ldr	r1, [r3, #16]
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb6:	460a      	mov	r2, r1
 8003cb8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	0151      	lsls	r1, r2, #5
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	440a      	add	r2, r1
 8003cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003cd8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	371c      	adds	r7, #28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	785b      	ldrb	r3, [r3, #1]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d14a      	bne.n	8003d9c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	015a      	lsls	r2, r3, #5
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d1e:	f040 8086 	bne.w	8003e2e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	7812      	ldrb	r2, [r2, #0]
 8003d36:	0151      	lsls	r1, r2, #5
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	440a      	add	r2, r1
 8003d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d44:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	015a      	lsls	r2, r3, #5
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	7812      	ldrb	r2, [r2, #0]
 8003d5a:	0151      	lsls	r1, r2, #5
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	440a      	add	r2, r1
 8003d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f242 7210 	movw	r2, #10000	; 0x2710
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d902      	bls.n	8003d80 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	75fb      	strb	r3, [r7, #23]
          break;
 8003d7e:	e056      	b.n	8003e2e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d98:	d0e7      	beq.n	8003d6a <USB_EPStopXfer+0x82>
 8003d9a:	e048      	b.n	8003e2e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003db0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003db4:	d13b      	bne.n	8003e2e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	7812      	ldrb	r2, [r2, #0]
 8003dca:	0151      	lsls	r1, r2, #5
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	440a      	add	r2, r1
 8003dd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dd8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	7812      	ldrb	r2, [r2, #0]
 8003dee:	0151      	lsls	r1, r2, #5
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	440a      	add	r2, r1
 8003df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003df8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003dfc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	3301      	adds	r3, #1
 8003e02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d902      	bls.n	8003e14 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	75fb      	strb	r3, [r7, #23]
          break;
 8003e12:	e00c      	b.n	8003e2e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e2c:	d0e7      	beq.n	8003dfe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	371c      	adds	r7, #28
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b089      	sub	sp, #36	; 0x24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	4611      	mov	r1, r2
 8003e48:	461a      	mov	r2, r3
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	71fb      	strb	r3, [r7, #7]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003e5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d123      	bne.n	8003eaa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003e62:	88bb      	ldrh	r3, [r7, #4]
 8003e64:	3303      	adds	r3, #3
 8003e66:	089b      	lsrs	r3, r3, #2
 8003e68:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	61bb      	str	r3, [r7, #24]
 8003e6e:	e018      	b.n	8003ea2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003e70:	79fb      	ldrb	r3, [r7, #7]
 8003e72:	031a      	lsls	r2, r3, #12
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	3301      	adds	r3, #1
 8003e88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	3301      	adds	r3, #1
 8003e94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	61bb      	str	r3, [r7, #24]
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d3e2      	bcc.n	8003e70 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3724      	adds	r7, #36	; 0x24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b08b      	sub	sp, #44	; 0x2c
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003ece:	88fb      	ldrh	r3, [r7, #6]
 8003ed0:	089b      	lsrs	r3, r3, #2
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003ed6:	88fb      	ldrh	r3, [r7, #6]
 8003ed8:	f003 0303 	and.w	r3, r3, #3
 8003edc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003ede:	2300      	movs	r3, #0
 8003ee0:	623b      	str	r3, [r7, #32]
 8003ee2:	e014      	b.n	8003f0e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	601a      	str	r2, [r3, #0]
    pDest++;
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	3301      	adds	r3, #1
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	3301      	adds	r3, #1
 8003f00:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	3301      	adds	r3, #1
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	623b      	str	r3, [r7, #32]
 8003f0e:	6a3a      	ldr	r2, [r7, #32]
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d3e6      	bcc.n	8003ee4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003f16:	8bfb      	ldrh	r3, [r7, #30]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d01e      	beq.n	8003f5a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f26:	461a      	mov	r2, r3
 8003f28:	f107 0310 	add.w	r3, r7, #16
 8003f2c:	6812      	ldr	r2, [r2, #0]
 8003f2e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	701a      	strb	r2, [r3, #0]
      i++;
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	3301      	adds	r3, #1
 8003f46:	623b      	str	r3, [r7, #32]
      pDest++;
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003f4e:	8bfb      	ldrh	r3, [r7, #30]
 8003f50:	3b01      	subs	r3, #1
 8003f52:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003f54:	8bfb      	ldrh	r3, [r7, #30]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1ea      	bne.n	8003f30 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	372c      	adds	r7, #44	; 0x2c
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	785b      	ldrb	r3, [r3, #1]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d12c      	bne.n	8003fde <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	db12      	blt.n	8003fbc <USB_EPSetStall+0x54>
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00f      	beq.n	8003fbc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	015a      	lsls	r2, r3, #5
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	0151      	lsls	r1, r2, #5
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	440a      	add	r2, r1
 8003fb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fb6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003fba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	0151      	lsls	r1, r2, #5
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	440a      	add	r2, r1
 8003fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fda:	6013      	str	r3, [r2, #0]
 8003fdc:	e02b      	b.n	8004036 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	db12      	blt.n	8004016 <USB_EPSetStall+0xae>
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00f      	beq.n	8004016 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	0151      	lsls	r1, r2, #5
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	440a      	add	r2, r1
 800400c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004010:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004014:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4413      	add	r3, r2
 800401e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	0151      	lsls	r1, r2, #5
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	440a      	add	r2, r1
 800402c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004030:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004034:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	785b      	ldrb	r3, [r3, #1]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d128      	bne.n	80040b2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	0151      	lsls	r1, r2, #5
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	440a      	add	r2, r1
 8004076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800407a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800407e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	791b      	ldrb	r3, [r3, #4]
 8004084:	2b03      	cmp	r3, #3
 8004086:	d003      	beq.n	8004090 <USB_EPClearStall+0x4c>
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	791b      	ldrb	r3, [r3, #4]
 800408c:	2b02      	cmp	r3, #2
 800408e:	d138      	bne.n	8004102 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	0151      	lsls	r1, r2, #5
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	440a      	add	r2, r1
 80040a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	e027      	b.n	8004102 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	0151      	lsls	r1, r2, #5
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	440a      	add	r2, r1
 80040c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	791b      	ldrb	r3, [r3, #4]
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	d003      	beq.n	80040e2 <USB_EPClearStall+0x9e>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	791b      	ldrb	r3, [r3, #4]
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d10f      	bne.n	8004102 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	0151      	lsls	r1, r2, #5
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	440a      	add	r2, r1
 80040f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004100:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	460b      	mov	r3, r1
 800411a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800412e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004132:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004144:	68f9      	ldr	r1, [r7, #12]
 8004146:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800414a:	4313      	orrs	r3, r2
 800414c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004176:	f023 0303 	bic.w	r3, r3, #3
 800417a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800418a:	f023 0302 	bic.w	r3, r3, #2
 800418e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800419e:	b480      	push	{r7}
 80041a0:	b085      	sub	sp, #20
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80041b8:	f023 0303 	bic.w	r3, r3, #3
 80041bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041cc:	f043 0302 	orr.w	r3, r3, #2
 80041d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4013      	ands	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80041f8:	68fb      	ldr	r3, [r7, #12]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004206:	b480      	push	{r7}
 8004208:	b085      	sub	sp, #20
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	4013      	ands	r3, r2
 8004228:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	0c1b      	lsrs	r3, r3, #16
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800423a:	b480      	push	{r7}
 800423c:	b085      	sub	sp, #20
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	4013      	ands	r3, r2
 800425c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	b29b      	uxth	r3, r3
}
 8004262:	4618      	mov	r0, r3
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800426e:	b480      	push	{r7}
 8004270:	b085      	sub	sp, #20
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	460b      	mov	r3, r1
 8004278:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800427e:	78fb      	ldrb	r3, [r7, #3]
 8004280:	015a      	lsls	r2, r3, #5
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4413      	add	r3, r2
 8004286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	4013      	ands	r3, r2
 800429a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800429c:	68bb      	ldr	r3, [r7, #8]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b087      	sub	sp, #28
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	460b      	mov	r3, r1
 80042b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80042ce:	78fb      	ldrb	r3, [r7, #3]
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	fa22 f303 	lsr.w	r3, r2, r3
 80042da:	01db      	lsls	r3, r3, #7
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4013      	ands	r3, r2
 80042f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80042f8:	68bb      	ldr	r3, [r7, #8]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f003 0301 	and.w	r3, r3, #1
}
 8004316:	4618      	mov	r0, r3
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004322:	b480      	push	{r7}
 8004324:	b085      	sub	sp, #20
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800433c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004340:	f023 0307 	bic.w	r3, r3, #7
 8004344:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004358:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	460b      	mov	r3, r1
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	333c      	adds	r3, #60	; 0x3c
 800437e:	3304      	adds	r3, #4
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	4a26      	ldr	r2, [pc, #152]	; (8004420 <USB_EP0_OutStart+0xb8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d90a      	bls.n	80043a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004398:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800439c:	d101      	bne.n	80043a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	e037      	b.n	8004412 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a8:	461a      	mov	r2, r3
 80043aa:	2300      	movs	r3, #0
 80043ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043d0:	f043 0318 	orr.w	r3, r3, #24
 80043d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80043e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80043ea:	7afb      	ldrb	r3, [r7, #11]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d10f      	bne.n	8004410 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f6:	461a      	mov	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800440a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800440e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	371c      	adds	r7, #28
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	4f54300a 	.word	0x4f54300a

08004424 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	3301      	adds	r3, #1
 8004434:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4a13      	ldr	r2, [pc, #76]	; (8004488 <USB_CoreReset+0x64>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d901      	bls.n	8004442 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e01b      	b.n	800447a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	daf2      	bge.n	8004430 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800444a:	2300      	movs	r3, #0
 800444c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f043 0201 	orr.w	r2, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	3301      	adds	r3, #1
 800445e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4a09      	ldr	r2, [pc, #36]	; (8004488 <USB_CoreReset+0x64>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d901      	bls.n	800446c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e006      	b.n	800447a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b01      	cmp	r3, #1
 8004476:	d0f0      	beq.n	800445a <USB_CoreReset+0x36>

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	00030d40 	.word	0x00030d40

0800448c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8004498:	f44f 701d 	mov.w	r0, #628	; 0x274
 800449c:	f003 ff20 	bl	80082e0 <USBD_static_malloc>
 80044a0:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d109      	bne.n	80044bc <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	32b0      	adds	r2, #176	; 0xb0
 80044b2:	2100      	movs	r1, #0
 80044b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80044b8:	2302      	movs	r3, #2
 80044ba:	e06e      	b.n	800459a <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	32b0      	adds	r2, #176	; 0xb0
 80044c6:	68f9      	ldr	r1, [r7, #12]
 80044c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	32b0      	adds	r2, #176	; 0xb0
 80044d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	7c1b      	ldrb	r3, [r3, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d12b      	bne.n	8004540 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80044e8:	4b2e      	ldr	r3, [pc, #184]	; (80045a4 <USBD_MSC_Init+0x118>)
 80044ea:	7819      	ldrb	r1, [r3, #0]
 80044ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044f0:	2202      	movs	r2, #2
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f003 fdb1 	bl	800805a <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 80044f8:	4b2a      	ldr	r3, [pc, #168]	; (80045a4 <USBD_MSC_Init+0x118>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	f003 020f 	and.w	r2, r3, #15
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	4613      	mov	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	440b      	add	r3, r1
 800450c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004510:	2201      	movs	r2, #1
 8004512:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004514:	4b24      	ldr	r3, [pc, #144]	; (80045a8 <USBD_MSC_Init+0x11c>)
 8004516:	7819      	ldrb	r1, [r3, #0]
 8004518:	f44f 7300 	mov.w	r3, #512	; 0x200
 800451c:	2202      	movs	r2, #2
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f003 fd9b 	bl	800805a <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8004524:	4b20      	ldr	r3, [pc, #128]	; (80045a8 <USBD_MSC_Init+0x11c>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	f003 020f 	and.w	r2, r3, #15
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	4613      	mov	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	440b      	add	r3, r1
 8004538:	3324      	adds	r3, #36	; 0x24
 800453a:	2201      	movs	r2, #1
 800453c:	801a      	strh	r2, [r3, #0]
 800453e:	e028      	b.n	8004592 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004540:	4b18      	ldr	r3, [pc, #96]	; (80045a4 <USBD_MSC_Init+0x118>)
 8004542:	7819      	ldrb	r1, [r3, #0]
 8004544:	2340      	movs	r3, #64	; 0x40
 8004546:	2202      	movs	r2, #2
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f003 fd86 	bl	800805a <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800454e:	4b15      	ldr	r3, [pc, #84]	; (80045a4 <USBD_MSC_Init+0x118>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	f003 020f 	and.w	r2, r3, #15
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	4613      	mov	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	440b      	add	r3, r1
 8004562:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004566:	2201      	movs	r2, #1
 8004568:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800456a:	4b0f      	ldr	r3, [pc, #60]	; (80045a8 <USBD_MSC_Init+0x11c>)
 800456c:	7819      	ldrb	r1, [r3, #0]
 800456e:	2340      	movs	r3, #64	; 0x40
 8004570:	2202      	movs	r2, #2
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f003 fd71 	bl	800805a <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8004578:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <USBD_MSC_Init+0x11c>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	f003 020f 	and.w	r2, r3, #15
 8004580:	6879      	ldr	r1, [r7, #4]
 8004582:	4613      	mov	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	440b      	add	r3, r1
 800458c:	3324      	adds	r3, #36	; 0x24
 800458e:	2201      	movs	r2, #1
 8004590:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 fa2c 	bl	80049f0 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	2000006f 	.word	0x2000006f
 80045a8:	2000006e 	.word	0x2000006e

080045ac <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 80045b8:	4b26      	ldr	r3, [pc, #152]	; (8004654 <USBD_MSC_DeInit+0xa8>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	4619      	mov	r1, r3
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f003 fd71 	bl	80080a6 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 80045c4:	4b23      	ldr	r3, [pc, #140]	; (8004654 <USBD_MSC_DeInit+0xa8>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	f003 020f 	and.w	r2, r3, #15
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	4613      	mov	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80045dc:	2200      	movs	r2, #0
 80045de:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 80045e0:	4b1d      	ldr	r3, [pc, #116]	; (8004658 <USBD_MSC_DeInit+0xac>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	4619      	mov	r1, r3
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f003 fd5d 	bl	80080a6 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 80045ec:	4b1a      	ldr	r3, [pc, #104]	; (8004658 <USBD_MSC_DeInit+0xac>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	f003 020f 	and.w	r2, r3, #15
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	4613      	mov	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	440b      	add	r3, r1
 8004600:	3324      	adds	r3, #36	; 0x24
 8004602:	2200      	movs	r2, #0
 8004604:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	32b0      	adds	r2, #176	; 0xb0
 8004610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d018      	beq.n	800464a <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 fa67 	bl	8004aec <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	32b0      	adds	r2, #176	; 0xb0
 8004628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800462c:	4618      	mov	r0, r3
 800462e:	f003 fe65 	bl	80082fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	32b0      	adds	r2, #176	; 0xb0
 800463c:	2100      	movs	r1, #0
 800463e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	2000006f 	.word	0x2000006f
 8004658:	2000006e 	.word	0x2000006e

0800465c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	32b0      	adds	r2, #176	; 0xb0
 8004670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004674:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8004676:	2300      	movs	r3, #0
 8004678:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8004684:	2303      	movs	r3, #3
 8004686:	e0e1      	b.n	800484c <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004690:	2b00      	cmp	r3, #0
 8004692:	d053      	beq.n	800473c <USBD_MSC_Setup+0xe0>
 8004694:	2b20      	cmp	r3, #32
 8004696:	f040 80d1 	bne.w	800483c <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	785b      	ldrb	r3, [r3, #1]
 800469e:	2bfe      	cmp	r3, #254	; 0xfe
 80046a0:	d002      	beq.n	80046a8 <USBD_MSC_Setup+0x4c>
 80046a2:	2bff      	cmp	r3, #255	; 0xff
 80046a4:	d02a      	beq.n	80046fc <USBD_MSC_Setup+0xa0>
 80046a6:	e041      	b.n	800472c <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	885b      	ldrh	r3, [r3, #2]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d11e      	bne.n	80046ee <USBD_MSC_Setup+0x92>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	88db      	ldrh	r3, [r3, #6]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d11a      	bne.n	80046ee <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80046be:	2b00      	cmp	r3, #0
 80046c0:	da15      	bge.n	80046ee <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	33b0      	adds	r3, #176	; 0xb0
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	4798      	blx	r3
 80046d6:	4603      	mov	r3, r0
 80046d8:	461a      	mov	r2, r3
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	2201      	movs	r2, #1
 80046e2:	4619      	mov	r1, r3
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f003 f8f9 	bl	80078dc <USBD_CtlSendData>
 80046ea:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80046ec:	e025      	b.n	800473a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 80046ee:	6839      	ldr	r1, [r7, #0]
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f003 f882 	bl	80077fa <USBD_CtlError>
            ret = USBD_FAIL;
 80046f6:	2303      	movs	r3, #3
 80046f8:	75fb      	strb	r3, [r7, #23]
          break;
 80046fa:	e01e      	b.n	800473a <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	885b      	ldrh	r3, [r3, #2]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10c      	bne.n	800471e <USBD_MSC_Setup+0xc2>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	88db      	ldrh	r3, [r3, #6]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d108      	bne.n	800471e <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8004712:	2b00      	cmp	r3, #0
 8004714:	db03      	blt.n	800471e <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f9b4 	bl	8004a84 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800471c:	e00d      	b.n	800473a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800471e:	6839      	ldr	r1, [r7, #0]
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f003 f86a 	bl	80077fa <USBD_CtlError>
            ret = USBD_FAIL;
 8004726:	2303      	movs	r3, #3
 8004728:	75fb      	strb	r3, [r7, #23]
          break;
 800472a:	e006      	b.n	800473a <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800472c:	6839      	ldr	r1, [r7, #0]
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f003 f863 	bl	80077fa <USBD_CtlError>
          ret = USBD_FAIL;
 8004734:	2303      	movs	r3, #3
 8004736:	75fb      	strb	r3, [r7, #23]
          break;
 8004738:	bf00      	nop
      }
      break;
 800473a:	e086      	b.n	800484a <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	785b      	ldrb	r3, [r3, #1]
 8004740:	2b0b      	cmp	r3, #11
 8004742:	d872      	bhi.n	800482a <USBD_MSC_Setup+0x1ce>
 8004744:	a201      	add	r2, pc, #4	; (adr r2, 800474c <USBD_MSC_Setup+0xf0>)
 8004746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474a:	bf00      	nop
 800474c:	0800477d 	.word	0x0800477d
 8004750:	080047f9 	.word	0x080047f9
 8004754:	0800482b 	.word	0x0800482b
 8004758:	0800482b 	.word	0x0800482b
 800475c:	0800482b 	.word	0x0800482b
 8004760:	0800482b 	.word	0x0800482b
 8004764:	0800482b 	.word	0x0800482b
 8004768:	0800482b 	.word	0x0800482b
 800476c:	0800482b 	.word	0x0800482b
 8004770:	0800482b 	.word	0x0800482b
 8004774:	080047a7 	.word	0x080047a7
 8004778:	080047d1 	.word	0x080047d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b03      	cmp	r3, #3
 8004786:	d107      	bne.n	8004798 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004788:	f107 030e 	add.w	r3, r7, #14
 800478c:	2202      	movs	r2, #2
 800478e:	4619      	mov	r1, r3
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f003 f8a3 	bl	80078dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004796:	e050      	b.n	800483a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8004798:	6839      	ldr	r1, [r7, #0]
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f003 f82d 	bl	80077fa <USBD_CtlError>
            ret = USBD_FAIL;
 80047a0:	2303      	movs	r3, #3
 80047a2:	75fb      	strb	r3, [r7, #23]
          break;
 80047a4:	e049      	b.n	800483a <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b03      	cmp	r3, #3
 80047b0:	d107      	bne.n	80047c2 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	3304      	adds	r3, #4
 80047b6:	2201      	movs	r2, #1
 80047b8:	4619      	mov	r1, r3
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f003 f88e 	bl	80078dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80047c0:	e03b      	b.n	800483a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80047c2:	6839      	ldr	r1, [r7, #0]
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f003 f818 	bl	80077fa <USBD_CtlError>
            ret = USBD_FAIL;
 80047ca:	2303      	movs	r3, #3
 80047cc:	75fb      	strb	r3, [r7, #23]
          break;
 80047ce:	e034      	b.n	800483a <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b03      	cmp	r3, #3
 80047da:	d106      	bne.n	80047ea <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	885b      	ldrh	r3, [r3, #2]
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	461a      	mov	r2, r3
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80047e8:	e027      	b.n	800483a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80047ea:	6839      	ldr	r1, [r7, #0]
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f003 f804 	bl	80077fa <USBD_CtlError>
            ret = USBD_FAIL;
 80047f2:	2303      	movs	r3, #3
 80047f4:	75fb      	strb	r3, [r7, #23]
          break;
 80047f6:	e020      	b.n	800483a <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b03      	cmp	r3, #3
 8004802:	d119      	bne.n	8004838 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	885b      	ldrh	r3, [r3, #2]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d115      	bne.n	8004838 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	889b      	ldrh	r3, [r3, #4]
 8004810:	b2db      	uxtb	r3, r3
 8004812:	4619      	mov	r1, r3
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f003 fc65 	bl	80080e4 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	889b      	ldrh	r3, [r3, #4]
 800481e:	b2db      	uxtb	r3, r3
 8004820:	4619      	mov	r1, r3
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fb2e 	bl	8004e84 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8004828:	e006      	b.n	8004838 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800482a:	6839      	ldr	r1, [r7, #0]
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f002 ffe4 	bl	80077fa <USBD_CtlError>
          ret = USBD_FAIL;
 8004832:	2303      	movs	r3, #3
 8004834:	75fb      	strb	r3, [r7, #23]
          break;
 8004836:	e000      	b.n	800483a <USBD_MSC_Setup+0x1de>
          break;
 8004838:	bf00      	nop
      }
      break;
 800483a:	e006      	b.n	800484a <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800483c:	6839      	ldr	r1, [r7, #0]
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f002 ffdb 	bl	80077fa <USBD_CtlError>
      ret = USBD_FAIL;
 8004844:	2303      	movs	r3, #3
 8004846:	75fb      	strb	r3, [r7, #23]
      break;
 8004848:	bf00      	nop
  }

  return (uint8_t)ret;
 800484a:	7dfb      	ldrb	r3, [r7, #23]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	460b      	mov	r3, r1
 800485e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8004860:	78fb      	ldrb	r3, [r7, #3]
 8004862:	4619      	mov	r1, r3
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f959 	bl	8004b1c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	460b      	mov	r3, r1
 800487e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	4619      	mov	r1, r3
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f983 	bl	8004b90 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800489c:	2181      	movs	r1, #129	; 0x81
 800489e:	4812      	ldr	r0, [pc, #72]	; (80048e8 <USBD_MSC_GetHSCfgDesc+0x54>)
 80048a0:	f002 f972 	bl	8006b88 <USBD_GetEpDesc>
 80048a4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80048a6:	2101      	movs	r1, #1
 80048a8:	480f      	ldr	r0, [pc, #60]	; (80048e8 <USBD_MSC_GetHSCfgDesc+0x54>)
 80048aa:	f002 f96d 	bl	8006b88 <USBD_GetEpDesc>
 80048ae:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d006      	beq.n	80048c4 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	711a      	strb	r2, [r3, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f042 0202 	orr.w	r2, r2, #2
 80048c2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d006      	beq.n	80048d8 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2200      	movs	r2, #0
 80048ce:	711a      	strb	r2, [r3, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f042 0202 	orr.w	r2, r2, #2
 80048d6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2220      	movs	r2, #32
 80048dc:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80048de:	4b02      	ldr	r3, [pc, #8]	; (80048e8 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	20000044 	.word	0x20000044

080048ec <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80048f4:	2181      	movs	r1, #129	; 0x81
 80048f6:	4812      	ldr	r0, [pc, #72]	; (8004940 <USBD_MSC_GetFSCfgDesc+0x54>)
 80048f8:	f002 f946 	bl	8006b88 <USBD_GetEpDesc>
 80048fc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80048fe:	2101      	movs	r1, #1
 8004900:	480f      	ldr	r0, [pc, #60]	; (8004940 <USBD_MSC_GetFSCfgDesc+0x54>)
 8004902:	f002 f941 	bl	8006b88 <USBD_GetEpDesc>
 8004906:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d006      	beq.n	800491c <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004916:	711a      	strb	r2, [r3, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d006      	beq.n	8004930 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2200      	movs	r2, #0
 8004926:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800492a:	711a      	strb	r2, [r3, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2220      	movs	r2, #32
 8004934:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8004936:	4b02      	ldr	r3, [pc, #8]	; (8004940 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	20000044 	.word	0x20000044

08004944 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800494c:	2181      	movs	r1, #129	; 0x81
 800494e:	4812      	ldr	r0, [pc, #72]	; (8004998 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8004950:	f002 f91a 	bl	8006b88 <USBD_GetEpDesc>
 8004954:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8004956:	2101      	movs	r1, #1
 8004958:	480f      	ldr	r0, [pc, #60]	; (8004998 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800495a:	f002 f915 	bl	8006b88 <USBD_GetEpDesc>
 800495e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d006      	beq.n	8004974 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800496e:	711a      	strb	r2, [r3, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d006      	beq.n	8004988 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2200      	movs	r2, #0
 800497e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004982:	711a      	strb	r2, [r3, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2220      	movs	r2, #32
 800498c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800498e:	4b02      	ldr	r3, [pc, #8]	; (8004998 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	20000044 	.word	0x20000044

0800499c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	220a      	movs	r2, #10
 80049a8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80049aa:	4b03      	ldr	r3, [pc, #12]	; (80049b8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	20000064 	.word	0x20000064

080049bc <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e009      	b.n	80049e4 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	33b0      	adds	r3, #176	; 0xb0
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	32b0      	adds	r2, #176	; 0xb0
 8004a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a06:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d032      	beq.n	8004a74 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	33b0      	adds	r3, #176	; 0xb0
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2000      	movs	r0, #0
 8004a46:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8004a48:	4b0c      	ldr	r3, [pc, #48]	; (8004a7c <MSC_BOT_Init+0x8c>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f003 fb48 	bl	80080e4 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8004a54:	4b0a      	ldr	r3, [pc, #40]	; (8004a80 <MSC_BOT_Init+0x90>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	4619      	mov	r1, r3
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f003 fb42 	bl	80080e4 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8004a60:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <MSC_BOT_Init+0x8c>)
 8004a62:	7819      	ldrb	r1, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8004a6a:	231f      	movs	r3, #31
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f003 fc02 	bl	8008276 <USBD_LL_PrepareReceive>
 8004a72:	e000      	b.n	8004a76 <MSC_BOT_Init+0x86>
    return;
 8004a74:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	2000006f 	.word	0x2000006f
 8004a80:	2000006e 	.word	0x2000006e

08004a84 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	32b0      	adds	r2, #176	; 0xb0
 8004a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a9a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d01b      	beq.n	8004ada <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8004aae:	4b0d      	ldr	r3, [pc, #52]	; (8004ae4 <MSC_BOT_Reset+0x60>)
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f003 fb53 	bl	8008160 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8004aba:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <MSC_BOT_Reset+0x64>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	4619      	mov	r1, r3
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f003 fb4d 	bl	8008160 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8004ac6:	4b08      	ldr	r3, [pc, #32]	; (8004ae8 <MSC_BOT_Reset+0x64>)
 8004ac8:	7819      	ldrb	r1, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8004ad0:	231f      	movs	r3, #31
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f003 fbcf 	bl	8008276 <USBD_LL_PrepareReceive>
 8004ad8:	e000      	b.n	8004adc <MSC_BOT_Reset+0x58>
    return;
 8004ada:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	2000006e 	.word	0x2000006e
 8004ae8:	2000006f 	.word	0x2000006f

08004aec <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	32b0      	adds	r2, #176	; 0xb0
 8004afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b02:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d002      	beq.n	8004b10 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	721a      	strb	r2, [r3, #8]
  }
}
 8004b10:	bf00      	nop
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	460b      	mov	r3, r1
 8004b26:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	32b0      	adds	r2, #176	; 0xb0
 8004b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b36:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d020      	beq.n	8004b80 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	7a1b      	ldrb	r3, [r3, #8]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d005      	beq.n	8004b52 <MSC_BOT_DataIn+0x36>
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	db1c      	blt.n	8004b84 <MSC_BOT_DataIn+0x68>
 8004b4a:	3b03      	subs	r3, #3
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d819      	bhi.n	8004b84 <MSC_BOT_DataIn+0x68>
 8004b50:	e011      	b.n	8004b76 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8004b5e:	461a      	mov	r2, r3
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f9c9 	bl	8004ef8 <SCSI_ProcessCmd>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	da0d      	bge.n	8004b88 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f90c 	bl	8004d8c <MSC_BOT_SendCSW>
      }
      break;
 8004b74:	e008      	b.n	8004b88 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8004b76:	2100      	movs	r1, #0
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f907 	bl	8004d8c <MSC_BOT_SendCSW>
      break;
 8004b7e:	e004      	b.n	8004b8a <MSC_BOT_DataIn+0x6e>
    return;
 8004b80:	bf00      	nop
 8004b82:	e002      	b.n	8004b8a <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8004b84:	bf00      	nop
 8004b86:	e000      	b.n	8004b8a <MSC_BOT_DataIn+0x6e>
      break;
 8004b88:	bf00      	nop
  }
}
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	32b0      	adds	r2, #176	; 0xb0
 8004ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004baa:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d01c      	beq.n	8004bec <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	7a1b      	ldrb	r3, [r3, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <MSC_BOT_DataOut+0x30>
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d004      	beq.n	8004bc8 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8004bbe:	e018      	b.n	8004bf2 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f819 	bl	8004bf8 <MSC_BOT_CBW_Decode>
      break;
 8004bc6:	e014      	b.n	8004bf2 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f98e 	bl	8004ef8 <SCSI_ProcessCmd>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	da06      	bge.n	8004bf0 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8004be2:	2101      	movs	r1, #1
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f8d1 	bl	8004d8c <MSC_BOT_SendCSW>
      break;
 8004bea:	e001      	b.n	8004bf0 <MSC_BOT_DataOut+0x60>
    return;
 8004bec:	bf00      	nop
 8004bee:	e000      	b.n	8004bf2 <MSC_BOT_DataOut+0x62>
      break;
 8004bf0:	bf00      	nop
  }
}
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	32b0      	adds	r2, #176	; 0xb0
 8004c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c0e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d079      	beq.n	8004d0a <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8004c2e:	4b3a      	ldr	r3, [pc, #232]	; (8004d18 <MSC_BOT_CBW_Decode+0x120>)
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	4619      	mov	r1, r3
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f003 fb3f 	bl	80082b8 <USBD_LL_GetRxDataSize>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b1f      	cmp	r3, #31
 8004c3e:	d114      	bne.n	8004c6a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8004c46:	4a35      	ldr	r2, [pc, #212]	; (8004d1c <MSC_BOT_CBW_Decode+0x124>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d10e      	bne.n	8004c6a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d809      	bhi.n	8004c6a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d004      	beq.n	8004c6a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8004c66:	2b10      	cmp	r3, #16
 8004c68:	d90e      	bls.n	8004c88 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004c70:	2320      	movs	r3, #32
 8004c72:	2205      	movs	r2, #5
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fe28 	bl	80058ca <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f8bd 	bl	8004e00 <MSC_BOT_Abort>
 8004c86:	e043      	b.n	8004d10 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8004c94:	461a      	mov	r2, r3
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f92e 	bl	8004ef8 <SCSI_ProcessCmd>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	da0c      	bge.n	8004cbc <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	7a1b      	ldrb	r3, [r3, #8]
 8004ca6:	2b05      	cmp	r3, #5
 8004ca8:	d104      	bne.n	8004cb4 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8004caa:	2101      	movs	r1, #1
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f86d 	bl	8004d8c <MSC_BOT_SendCSW>
 8004cb2:	e02d      	b.n	8004d10 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f8a3 	bl	8004e00 <MSC_BOT_Abort>
 8004cba:	e029      	b.n	8004d10 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	7a1b      	ldrb	r3, [r3, #8]
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d024      	beq.n	8004d0e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d020      	beq.n	8004d0e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	d01c      	beq.n	8004d0e <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d009      	beq.n	8004cf0 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f103 0110 	add.w	r1, r3, #16
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f819 	bl	8004d20 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8004cee:	e00f      	b.n	8004d10 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d104      	bne.n	8004d02 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f846 	bl	8004d8c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8004d00:	e006      	b.n	8004d10 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f87c 	bl	8004e00 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8004d08:	e002      	b.n	8004d10 <MSC_BOT_CBW_Decode+0x118>
    return;
 8004d0a:	bf00      	nop
 8004d0c:	e000      	b.n	8004d10 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 8004d0e:	bf00      	nop
    }
  }
}
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	2000006f 	.word	0x2000006f
 8004d1c:	43425355 	.word	0x43425355

08004d20 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	32b0      	adds	r2, #176	; 0xb0
 8004d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d3a:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d01e      	beq.n	8004d80 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	bf28      	it	cs
 8004d4e:	4613      	movcs	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	1ad2      	subs	r2, r2, r3
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2204      	movs	r2, #4
 8004d6e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8004d70:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <MSC_BOT_SendData+0x68>)
 8004d72:	7819      	ldrb	r1, [r3, #0]
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f003 fa5b 	bl	8008234 <USBD_LL_Transmit>
 8004d7e:	e000      	b.n	8004d82 <MSC_BOT_SendData+0x62>
    return;
 8004d80:	bf00      	nop
}
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	2000006e 	.word	0x2000006e

08004d8c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	460b      	mov	r3, r1
 8004d96:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	32b0      	adds	r2, #176	; 0xb0
 8004da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004da6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d01d      	beq.n	8004dea <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4a10      	ldr	r2, [pc, #64]	; (8004df4 <MSC_BOT_SendCSW+0x68>)
 8004db2:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	78fa      	ldrb	r2, [r7, #3]
 8004dba:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8004dc4:	4b0c      	ldr	r3, [pc, #48]	; (8004df8 <MSC_BOT_SendCSW+0x6c>)
 8004dc6:	7819      	ldrb	r1, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8004dce:	230d      	movs	r3, #13
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f003 fa2f 	bl	8008234 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8004dd6:	4b09      	ldr	r3, [pc, #36]	; (8004dfc <MSC_BOT_SendCSW+0x70>)
 8004dd8:	7819      	ldrb	r1, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8004de0:	231f      	movs	r3, #31
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f003 fa47 	bl	8008276 <USBD_LL_PrepareReceive>
 8004de8:	e000      	b.n	8004dec <MSC_BOT_SendCSW+0x60>
    return;
 8004dea:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	53425355 	.word	0x53425355
 8004df8:	2000006e 	.word	0x2000006e
 8004dfc:	2000006f 	.word	0x2000006f

08004e00 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	32b0      	adds	r2, #176	; 0xb0
 8004e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e16:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d02a      	beq.n	8004e74 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10e      	bne.n	8004e46 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d009      	beq.n	8004e46 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d105      	bne.n	8004e46 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8004e3a:	4b10      	ldr	r3, [pc, #64]	; (8004e7c <MSC_BOT_Abort+0x7c>)
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	4619      	mov	r1, r3
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f003 f96e 	bl	8008122 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8004e46:	4b0e      	ldr	r3, [pc, #56]	; (8004e80 <MSC_BOT_Abort+0x80>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f003 f968 	bl	8008122 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	7a5b      	ldrb	r3, [r3, #9]
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d10d      	bne.n	8004e76 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8004e5a:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <MSC_BOT_Abort+0x80>)
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f003 f95e 	bl	8008122 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8004e66:	4b05      	ldr	r3, [pc, #20]	; (8004e7c <MSC_BOT_Abort+0x7c>)
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f003 f958 	bl	8008122 <USBD_LL_StallEP>
 8004e72:	e000      	b.n	8004e76 <MSC_BOT_Abort+0x76>
    return;
 8004e74:	bf00      	nop
  }
}
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	2000006f 	.word	0x2000006f
 8004e80:	2000006e 	.word	0x2000006e

08004e84 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	32b0      	adds	r2, #176	; 0xb0
 8004e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e9e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d01d      	beq.n	8004ee2 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	7a5b      	ldrb	r3, [r3, #9]
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d10c      	bne.n	8004ec8 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8004eae:	4b10      	ldr	r3, [pc, #64]	; (8004ef0 <MSC_BOT_CplClrFeature+0x6c>)
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f003 f934 	bl	8008122 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8004eba:	4b0e      	ldr	r3, [pc, #56]	; (8004ef4 <MSC_BOT_CplClrFeature+0x70>)
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f003 f92e 	bl	8008122 <USBD_LL_StallEP>
 8004ec6:	e00f      	b.n	8004ee8 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8004ec8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	da0a      	bge.n	8004ee6 <MSC_BOT_CplClrFeature+0x62>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	7a5b      	ldrb	r3, [r3, #9]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d006      	beq.n	8004ee6 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8004ed8:	2101      	movs	r1, #1
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7ff ff56 	bl	8004d8c <MSC_BOT_SendCSW>
 8004ee0:	e002      	b.n	8004ee8 <MSC_BOT_CplClrFeature+0x64>
    return;
 8004ee2:	bf00      	nop
 8004ee4:	e000      	b.n	8004ee8 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8004ee6:	bf00      	nop
  }
}
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	2000006e 	.word	0x2000006e
 8004ef4:	2000006f 	.word	0x2000006f

08004ef8 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	460b      	mov	r3, r1
 8004f02:	607a      	str	r2, [r7, #4]
 8004f04:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	32b0      	adds	r2, #176	; 0xb0
 8004f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f14:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d102      	bne.n	8004f22 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8004f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f20:	e168      	b.n	80051f4 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2baa      	cmp	r3, #170	; 0xaa
 8004f28:	f000 8144 	beq.w	80051b4 <SCSI_ProcessCmd+0x2bc>
 8004f2c:	2baa      	cmp	r3, #170	; 0xaa
 8004f2e:	f300 8153 	bgt.w	80051d8 <SCSI_ProcessCmd+0x2e0>
 8004f32:	2ba8      	cmp	r3, #168	; 0xa8
 8004f34:	f000 812c 	beq.w	8005190 <SCSI_ProcessCmd+0x298>
 8004f38:	2ba8      	cmp	r3, #168	; 0xa8
 8004f3a:	f300 814d 	bgt.w	80051d8 <SCSI_ProcessCmd+0x2e0>
 8004f3e:	2b5a      	cmp	r3, #90	; 0x5a
 8004f40:	f300 80c0 	bgt.w	80050c4 <SCSI_ProcessCmd+0x1cc>
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f2c0 8147 	blt.w	80051d8 <SCSI_ProcessCmd+0x2e0>
 8004f4a:	2b5a      	cmp	r3, #90	; 0x5a
 8004f4c:	f200 8144 	bhi.w	80051d8 <SCSI_ProcessCmd+0x2e0>
 8004f50:	a201      	add	r2, pc, #4	; (adr r2, 8004f58 <SCSI_ProcessCmd+0x60>)
 8004f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f56:	bf00      	nop
 8004f58:	080050cb 	.word	0x080050cb
 8004f5c:	080051d9 	.word	0x080051d9
 8004f60:	080051d9 	.word	0x080051d9
 8004f64:	080050dd 	.word	0x080050dd
 8004f68:	080051d9 	.word	0x080051d9
 8004f6c:	080051d9 	.word	0x080051d9
 8004f70:	080051d9 	.word	0x080051d9
 8004f74:	080051d9 	.word	0x080051d9
 8004f78:	080051d9 	.word	0x080051d9
 8004f7c:	080051d9 	.word	0x080051d9
 8004f80:	080051d9 	.word	0x080051d9
 8004f84:	080051d9 	.word	0x080051d9
 8004f88:	080051d9 	.word	0x080051d9
 8004f8c:	080051d9 	.word	0x080051d9
 8004f90:	080051d9 	.word	0x080051d9
 8004f94:	080051d9 	.word	0x080051d9
 8004f98:	080051d9 	.word	0x080051d9
 8004f9c:	080051d9 	.word	0x080051d9
 8004fa0:	080050ef 	.word	0x080050ef
 8004fa4:	080051d9 	.word	0x080051d9
 8004fa8:	080051d9 	.word	0x080051d9
 8004fac:	080051d9 	.word	0x080051d9
 8004fb0:	080051d9 	.word	0x080051d9
 8004fb4:	080051d9 	.word	0x080051d9
 8004fb8:	080051d9 	.word	0x080051d9
 8004fbc:	080051d9 	.word	0x080051d9
 8004fc0:	08005125 	.word	0x08005125
 8004fc4:	08005101 	.word	0x08005101
 8004fc8:	080051d9 	.word	0x080051d9
 8004fcc:	080051d9 	.word	0x080051d9
 8004fd0:	08005113 	.word	0x08005113
 8004fd4:	080051d9 	.word	0x080051d9
 8004fd8:	080051d9 	.word	0x080051d9
 8004fdc:	080051d9 	.word	0x080051d9
 8004fe0:	080051d9 	.word	0x080051d9
 8004fe4:	08005149 	.word	0x08005149
 8004fe8:	080051d9 	.word	0x080051d9
 8004fec:	0800515b 	.word	0x0800515b
 8004ff0:	080051d9 	.word	0x080051d9
 8004ff4:	080051d9 	.word	0x080051d9
 8004ff8:	0800517f 	.word	0x0800517f
 8004ffc:	080051d9 	.word	0x080051d9
 8005000:	080051a3 	.word	0x080051a3
 8005004:	080051d9 	.word	0x080051d9
 8005008:	080051d9 	.word	0x080051d9
 800500c:	080051d9 	.word	0x080051d9
 8005010:	080051d9 	.word	0x080051d9
 8005014:	080051c7 	.word	0x080051c7
 8005018:	080051d9 	.word	0x080051d9
 800501c:	080051d9 	.word	0x080051d9
 8005020:	080051d9 	.word	0x080051d9
 8005024:	080051d9 	.word	0x080051d9
 8005028:	080051d9 	.word	0x080051d9
 800502c:	080051d9 	.word	0x080051d9
 8005030:	080051d9 	.word	0x080051d9
 8005034:	080051d9 	.word	0x080051d9
 8005038:	080051d9 	.word	0x080051d9
 800503c:	080051d9 	.word	0x080051d9
 8005040:	080051d9 	.word	0x080051d9
 8005044:	080051d9 	.word	0x080051d9
 8005048:	080051d9 	.word	0x080051d9
 800504c:	080051d9 	.word	0x080051d9
 8005050:	080051d9 	.word	0x080051d9
 8005054:	080051d9 	.word	0x080051d9
 8005058:	080051d9 	.word	0x080051d9
 800505c:	080051d9 	.word	0x080051d9
 8005060:	080051d9 	.word	0x080051d9
 8005064:	080051d9 	.word	0x080051d9
 8005068:	080051d9 	.word	0x080051d9
 800506c:	080051d9 	.word	0x080051d9
 8005070:	080051d9 	.word	0x080051d9
 8005074:	080051d9 	.word	0x080051d9
 8005078:	080051d9 	.word	0x080051d9
 800507c:	080051d9 	.word	0x080051d9
 8005080:	080051d9 	.word	0x080051d9
 8005084:	080051d9 	.word	0x080051d9
 8005088:	080051d9 	.word	0x080051d9
 800508c:	080051d9 	.word	0x080051d9
 8005090:	080051d9 	.word	0x080051d9
 8005094:	080051d9 	.word	0x080051d9
 8005098:	080051d9 	.word	0x080051d9
 800509c:	080051d9 	.word	0x080051d9
 80050a0:	080051d9 	.word	0x080051d9
 80050a4:	080051d9 	.word	0x080051d9
 80050a8:	080051d9 	.word	0x080051d9
 80050ac:	080051d9 	.word	0x080051d9
 80050b0:	080051d9 	.word	0x080051d9
 80050b4:	080051d9 	.word	0x080051d9
 80050b8:	080051d9 	.word	0x080051d9
 80050bc:	080051d9 	.word	0x080051d9
 80050c0:	08005137 	.word	0x08005137
 80050c4:	2b9e      	cmp	r3, #158	; 0x9e
 80050c6:	d051      	beq.n	800516c <SCSI_ProcessCmd+0x274>
 80050c8:	e086      	b.n	80051d8 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80050ca:	7afb      	ldrb	r3, [r7, #11]
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	4619      	mov	r1, r3
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 f893 	bl	80051fc <SCSI_TestUnitReady>
 80050d6:	4603      	mov	r3, r0
 80050d8:	75fb      	strb	r3, [r7, #23]
      break;
 80050da:	e089      	b.n	80051f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 80050dc:	7afb      	ldrb	r3, [r7, #11]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	4619      	mov	r1, r3
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 fb6e 	bl	80057c4 <SCSI_RequestSense>
 80050e8:	4603      	mov	r3, r0
 80050ea:	75fb      	strb	r3, [r7, #23]
      break;
 80050ec:	e080      	b.n	80051f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 80050ee:	7afb      	ldrb	r3, [r7, #11]
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	4619      	mov	r1, r3
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f000 f8db 	bl	80052b0 <SCSI_Inquiry>
 80050fa:	4603      	mov	r3, r0
 80050fc:	75fb      	strb	r3, [r7, #23]
      break;
 80050fe:	e077      	b.n	80051f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8005100:	7afb      	ldrb	r3, [r7, #11]
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	4619      	mov	r1, r3
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f000 fc2a 	bl	8005960 <SCSI_StartStopUnit>
 800510c:	4603      	mov	r3, r0
 800510e:	75fb      	strb	r3, [r7, #23]
      break;
 8005110:	e06e      	b.n	80051f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8005112:	7afb      	ldrb	r3, [r7, #11]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	4619      	mov	r1, r3
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f000 fc76 	bl	8005a0a <SCSI_AllowPreventRemovable>
 800511e:	4603      	mov	r3, r0
 8005120:	75fb      	strb	r3, [r7, #23]
      break;
 8005122:	e065      	b.n	80051f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8005124:	7afb      	ldrb	r3, [r7, #11]
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	4619      	mov	r1, r3
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 faea 	bl	8005704 <SCSI_ModeSense6>
 8005130:	4603      	mov	r3, r0
 8005132:	75fb      	strb	r3, [r7, #23]
      break;
 8005134:	e05c      	b.n	80051f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8005136:	7afb      	ldrb	r3, [r7, #11]
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	4619      	mov	r1, r3
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 fb11 	bl	8005764 <SCSI_ModeSense10>
 8005142:	4603      	mov	r3, r0
 8005144:	75fb      	strb	r3, [r7, #23]
      break;
 8005146:	e053      	b.n	80051f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8005148:	7afb      	ldrb	r3, [r7, #11]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	4619      	mov	r1, r3
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 fa5d 	bl	800560e <SCSI_ReadFormatCapacity>
 8005154:	4603      	mov	r3, r0
 8005156:	75fb      	strb	r3, [r7, #23]
      break;
 8005158:	e04a      	b.n	80051f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800515a:	7afb      	ldrb	r3, [r7, #11]
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	4619      	mov	r1, r3
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 f923 	bl	80053ac <SCSI_ReadCapacity10>
 8005166:	4603      	mov	r3, r0
 8005168:	75fb      	strb	r3, [r7, #23]
      break;
 800516a:	e041      	b.n	80051f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800516c:	7afb      	ldrb	r3, [r7, #11]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	4619      	mov	r1, r3
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 f998 	bl	80054a8 <SCSI_ReadCapacity16>
 8005178:	4603      	mov	r3, r0
 800517a:	75fb      	strb	r3, [r7, #23]
      break;
 800517c:	e038      	b.n	80051f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800517e:	7afb      	ldrb	r3, [r7, #11]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	4619      	mov	r1, r3
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 fc6d 	bl	8005a64 <SCSI_Read10>
 800518a:	4603      	mov	r3, r0
 800518c:	75fb      	strb	r3, [r7, #23]
      break;
 800518e:	e02f      	b.n	80051f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8005190:	7afb      	ldrb	r3, [r7, #11]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	4619      	mov	r1, r3
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 fd0e 	bl	8005bb8 <SCSI_Read12>
 800519c:	4603      	mov	r3, r0
 800519e:	75fb      	strb	r3, [r7, #23]
      break;
 80051a0:	e026      	b.n	80051f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 80051a2:	7afb      	ldrb	r3, [r7, #11]
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	4619      	mov	r1, r3
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 fdb9 	bl	8005d20 <SCSI_Write10>
 80051ae:	4603      	mov	r3, r0
 80051b0:	75fb      	strb	r3, [r7, #23]
      break;
 80051b2:	e01d      	b.n	80051f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80051b4:	7afb      	ldrb	r3, [r7, #11]
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	4619      	mov	r1, r3
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 fe86 	bl	8005ecc <SCSI_Write12>
 80051c0:	4603      	mov	r3, r0
 80051c2:	75fb      	strb	r3, [r7, #23]
      break;
 80051c4:	e014      	b.n	80051f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80051c6:	7afb      	ldrb	r3, [r7, #11]
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	4619      	mov	r1, r3
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 ff63 	bl	8006098 <SCSI_Verify10>
 80051d2:	4603      	mov	r3, r0
 80051d4:	75fb      	strb	r3, [r7, #23]
      break;
 80051d6:	e00b      	b.n	80051f0 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80051d8:	7af9      	ldrb	r1, [r7, #11]
 80051da:	2320      	movs	r3, #32
 80051dc:	2205      	movs	r2, #5
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 fb73 	bl	80058ca <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	2202      	movs	r2, #2
 80051e8:	725a      	strb	r2, [r3, #9]
      ret = -1;
 80051ea:	23ff      	movs	r3, #255	; 0xff
 80051ec:	75fb      	strb	r3, [r7, #23]
      break;
 80051ee:	bf00      	nop
  }

  return ret;
 80051f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	460b      	mov	r3, r1
 8005206:	607a      	str	r2, [r7, #4]
 8005208:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	32b0      	adds	r2, #176	; 0xb0
 8005214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005218:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d102      	bne.n	8005226 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8005220:	f04f 33ff 	mov.w	r3, #4294967295
 8005224:	e03f      	b.n	80052a6 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00a      	beq.n	8005246 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005236:	2320      	movs	r3, #32
 8005238:	2205      	movs	r2, #5
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 fb45 	bl	80058ca <SCSI_SenseCode>

    return -1;
 8005240:	f04f 33ff 	mov.w	r3, #4294967295
 8005244:	e02f      	b.n	80052a6 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800524c:	2b02      	cmp	r3, #2
 800524e:	d10b      	bne.n	8005268 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005250:	7af9      	ldrb	r1, [r7, #11]
 8005252:	233a      	movs	r3, #58	; 0x3a
 8005254:	2202      	movs	r2, #2
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 fb37 	bl	80058ca <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	2205      	movs	r2, #5
 8005260:	721a      	strb	r2, [r3, #8]
    return -1;
 8005262:	f04f 33ff 	mov.w	r3, #4294967295
 8005266:	e01e      	b.n	80052a6 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	33b0      	adds	r3, #176	; 0xb0
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	7afa      	ldrb	r2, [r7, #11]
 800527c:	4610      	mov	r0, r2
 800527e:	4798      	blx	r3
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00b      	beq.n	800529e <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005286:	7af9      	ldrb	r1, [r7, #11]
 8005288:	233a      	movs	r3, #58	; 0x3a
 800528a:	2202      	movs	r2, #2
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 fb1c 	bl	80058ca <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2205      	movs	r2, #5
 8005296:	721a      	strb	r2, [r3, #8]

    return -1;
 8005298:	f04f 33ff 	mov.w	r3, #4294967295
 800529c:	e003      	b.n	80052a6 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2200      	movs	r2, #0
 80052a2:	60da      	str	r2, [r3, #12]

  return 0;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3718      	adds	r7, #24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
	...

080052b0 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b088      	sub	sp, #32
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	460b      	mov	r3, r1
 80052ba:	607a      	str	r2, [r7, #4]
 80052bc:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	32b0      	adds	r2, #176	; 0xb0
 80052c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052cc:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d102      	bne.n	80052da <SCSI_Inquiry+0x2a>
  {
    return -1;
 80052d4:	f04f 33ff 	mov.w	r3, #4294967295
 80052d8:	e05f      	b.n	800539a <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10a      	bne.n	80052fa <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80052ea:	2320      	movs	r3, #32
 80052ec:	2205      	movs	r2, #5
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 faeb 	bl	80058ca <SCSI_SenseCode>
    return -1;
 80052f4:	f04f 33ff 	mov.w	r3, #4294967295
 80052f8:	e04f      	b.n	800539a <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3301      	adds	r3, #1
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b00      	cmp	r3, #0
 8005306:	d020      	beq.n	800534a <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3302      	adds	r3, #2
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d105      	bne.n	800531e <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8005312:	2206      	movs	r2, #6
 8005314:	4923      	ldr	r1, [pc, #140]	; (80053a4 <SCSI_Inquiry+0xf4>)
 8005316:	69b8      	ldr	r0, [r7, #24]
 8005318:	f001 f844 	bl	80063a4 <SCSI_UpdateBotData>
 800531c:	e03c      	b.n	8005398 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	3302      	adds	r3, #2
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b80      	cmp	r3, #128	; 0x80
 8005326:	d105      	bne.n	8005334 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8005328:	2208      	movs	r2, #8
 800532a:	491f      	ldr	r1, [pc, #124]	; (80053a8 <SCSI_Inquiry+0xf8>)
 800532c:	69b8      	ldr	r0, [r7, #24]
 800532e:	f001 f839 	bl	80063a4 <SCSI_UpdateBotData>
 8005332:	e031      	b.n	8005398 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800533a:	2324      	movs	r3, #36	; 0x24
 800533c:	2205      	movs	r2, #5
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 fac3 	bl	80058ca <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8005344:	f04f 33ff 	mov.w	r3, #4294967295
 8005348:	e027      	b.n	800539a <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	33b0      	adds	r3, #176	; 0xb0
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	69d9      	ldr	r1, [r3, #28]
 800535c:	7afa      	ldrb	r2, [r7, #11]
 800535e:	4613      	mov	r3, r2
 8005360:	00db      	lsls	r3, r3, #3
 8005362:	4413      	add	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	440b      	add	r3, r1
 8005368:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	3304      	adds	r3, #4
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	b29b      	uxth	r3, r3
 8005372:	3305      	adds	r3, #5
 8005374:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	3304      	adds	r3, #4
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	b29b      	uxth	r3, r3
 800537e:	8bfa      	ldrh	r2, [r7, #30]
 8005380:	429a      	cmp	r2, r3
 8005382:	d303      	bcc.n	800538c <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3304      	adds	r3, #4
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800538c:	8bfb      	ldrh	r3, [r7, #30]
 800538e:	461a      	mov	r2, r3
 8005390:	6979      	ldr	r1, [r7, #20]
 8005392:	69b8      	ldr	r0, [r7, #24]
 8005394:	f001 f806 	bl	80063a4 <SCSI_UpdateBotData>
  }

  return 0;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3720      	adds	r7, #32
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	20000070 	.word	0x20000070
 80053a8:	20000078 	.word	0x20000078

080053ac <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	460b      	mov	r3, r1
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	32b0      	adds	r2, #176	; 0xb0
 80053c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d102      	bne.n	80053d6 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 80053d0:	f04f 33ff 	mov.w	r3, #4294967295
 80053d4:	e064      	b.n	80054a0 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	33b0      	adds	r3, #176	; 0xb0
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80053f4:	7af8      	ldrb	r0, [r7, #11]
 80053f6:	4798      	blx	r3
 80053f8:	4603      	mov	r3, r0
 80053fa:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80053fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d104      	bne.n	800540e <SCSI_ReadCapacity10+0x62>
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800540a:	2b02      	cmp	r3, #2
 800540c:	d108      	bne.n	8005420 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800540e:	7af9      	ldrb	r1, [r7, #11]
 8005410:	233a      	movs	r3, #58	; 0x3a
 8005412:	2202      	movs	r2, #2
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 fa58 	bl	80058ca <SCSI_SenseCode>
    return -1;
 800541a:	f04f 33ff 	mov.w	r3, #4294967295
 800541e:	e03f      	b.n	80054a0 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005426:	3b01      	subs	r3, #1
 8005428:	0e1b      	lsrs	r3, r3, #24
 800542a:	b2da      	uxtb	r2, r3
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005436:	3b01      	subs	r3, #1
 8005438:	0c1b      	lsrs	r3, r3, #16
 800543a:	b2da      	uxtb	r2, r3
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005446:	3b01      	subs	r3, #1
 8005448:	0a1b      	lsrs	r3, r3, #8
 800544a:	b2da      	uxtb	r2, r3
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005456:	b2db      	uxtb	r3, r3
 8005458:	3b01      	subs	r3, #1
 800545a:	b2da      	uxtb	r2, r3
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005466:	161b      	asrs	r3, r3, #24
 8005468:	b2da      	uxtb	r2, r3
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005474:	141b      	asrs	r3, r3, #16
 8005476:	b2da      	uxtb	r2, r3
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005482:	0a1b      	lsrs	r3, r3, #8
 8005484:	b29b      	uxth	r3, r3
 8005486:	b2da      	uxtb	r2, r3
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005492:	b2da      	uxtb	r2, r3
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	2208      	movs	r2, #8
 800549c:	60da      	str	r2, [r3, #12]

  return 0;
 800549e:	2300      	movs	r3, #0

}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b088      	sub	sp, #32
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	460b      	mov	r3, r1
 80054b2:	607a      	str	r2, [r7, #4]
 80054b4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	32b0      	adds	r2, #176	; 0xb0
 80054c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054c4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d102      	bne.n	80054d2 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 80054cc:	f04f 33ff 	mov.w	r3, #4294967295
 80054d0:	e099      	b.n	8005606 <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	33b0      	adds	r3, #176	; 0xb0
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4413      	add	r3, r2
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80054f0:	7af8      	ldrb	r0, [r7, #11]
 80054f2:	4798      	blx	r3
 80054f4:	4603      	mov	r3, r0
 80054f6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80054f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d104      	bne.n	800550a <SCSI_ReadCapacity16+0x62>
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005506:	2b02      	cmp	r3, #2
 8005508:	d108      	bne.n	800551c <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800550a:	7af9      	ldrb	r1, [r7, #11]
 800550c:	233a      	movs	r3, #58	; 0x3a
 800550e:	2202      	movs	r2, #2
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 f9da 	bl	80058ca <SCSI_SenseCode>
    return -1;
 8005516:	f04f 33ff 	mov.w	r3, #4294967295
 800551a:	e074      	b.n	8005606 <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	330a      	adds	r3, #10
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	330b      	adds	r3, #11
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800552c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	330c      	adds	r3, #12
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8005536:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	320d      	adds	r2, #13
 800553c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800553e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8005544:	2300      	movs	r3, #0
 8005546:	77fb      	strb	r3, [r7, #31]
 8005548:	e007      	b.n	800555a <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 800554a:	7ffb      	ldrb	r3, [r7, #31]
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	4413      	add	r3, r2
 8005550:	2200      	movs	r2, #0
 8005552:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8005554:	7ffb      	ldrb	r3, [r7, #31]
 8005556:	3301      	adds	r3, #1
 8005558:	77fb      	strb	r3, [r7, #31]
 800555a:	7ffa      	ldrb	r2, [r7, #31]
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	429a      	cmp	r2, r3
 8005562:	d3f2      	bcc.n	800554a <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800556a:	3b01      	subs	r3, #1
 800556c:	0e1b      	lsrs	r3, r3, #24
 800556e:	b2da      	uxtb	r2, r3
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800557a:	3b01      	subs	r3, #1
 800557c:	0c1b      	lsrs	r3, r3, #16
 800557e:	b2da      	uxtb	r2, r3
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800558a:	3b01      	subs	r3, #1
 800558c:	0a1b      	lsrs	r3, r3, #8
 800558e:	b2da      	uxtb	r2, r3
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800559a:	b2db      	uxtb	r3, r3
 800559c:	3b01      	subs	r3, #1
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80055aa:	161b      	asrs	r3, r3, #24
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80055b8:	141b      	asrs	r3, r3, #16
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80055c6:	0a1b      	lsrs	r3, r3, #8
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	330a      	adds	r3, #10
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	330b      	adds	r3, #11
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80055ec:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	330c      	adds	r3, #12
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80055f6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	320d      	adds	r2, #13
 80055fc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80055fe:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	60da      	str	r2, [r3, #12]

  return 0;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3720      	adds	r7, #32
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b088      	sub	sp, #32
 8005612:	af00      	add	r7, sp, #0
 8005614:	60f8      	str	r0, [r7, #12]
 8005616:	460b      	mov	r3, r1
 8005618:	607a      	str	r2, [r7, #4]
 800561a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	32b0      	adds	r2, #176	; 0xb0
 8005626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800562a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d102      	bne.n	8005638 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8005632:	f04f 33ff 	mov.w	r3, #4294967295
 8005636:	e061      	b.n	80056fc <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	33b0      	adds	r3, #176	; 0xb0
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f107 0214 	add.w	r2, r7, #20
 800564e:	f107 0110 	add.w	r1, r7, #16
 8005652:	7af8      	ldrb	r0, [r7, #11]
 8005654:	4798      	blx	r3
 8005656:	4603      	mov	r3, r0
 8005658:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800565a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d104      	bne.n	800566c <SCSI_ReadFormatCapacity+0x5e>
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005668:	2b02      	cmp	r3, #2
 800566a:	d108      	bne.n	800567e <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800566c:	7af9      	ldrb	r1, [r7, #11]
 800566e:	233a      	movs	r3, #58	; 0x3a
 8005670:	2202      	movs	r2, #2
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f000 f929 	bl	80058ca <SCSI_SenseCode>
    return -1;
 8005678:	f04f 33ff 	mov.w	r3, #4294967295
 800567c:	e03e      	b.n	80056fc <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 800567e:	2300      	movs	r3, #0
 8005680:	83fb      	strh	r3, [r7, #30]
 8005682:	e007      	b.n	8005694 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8005684:	8bfb      	ldrh	r3, [r7, #30]
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	4413      	add	r3, r2
 800568a:	2200      	movs	r2, #0
 800568c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800568e:	8bfb      	ldrh	r3, [r7, #30]
 8005690:	3301      	adds	r3, #1
 8005692:	83fb      	strh	r3, [r7, #30]
 8005694:	8bfb      	ldrh	r3, [r7, #30]
 8005696:	2b0b      	cmp	r3, #11
 8005698:	d9f4      	bls.n	8005684 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	2208      	movs	r2, #8
 800569e:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	0e1b      	lsrs	r3, r3, #24
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	0c1b      	lsrs	r3, r3, #16
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	0a1b      	lsrs	r3, r3, #8
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	2202      	movs	r2, #2
 80056d4:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80056d6:	8abb      	ldrh	r3, [r7, #20]
 80056d8:	141b      	asrs	r3, r3, #16
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80056e0:	8abb      	ldrh	r3, [r7, #20]
 80056e2:	0a1b      	lsrs	r3, r3, #8
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80056ec:	8abb      	ldrh	r3, [r7, #20]
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	220c      	movs	r2, #12
 80056f8:	60da      	str	r2, [r3, #12]

  return 0;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3720      	adds	r7, #32
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	460b      	mov	r3, r1
 800570e:	607a      	str	r2, [r7, #4]
 8005710:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	32b0      	adds	r2, #176	; 0xb0
 800571c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005720:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8005722:	2317      	movs	r3, #23
 8005724:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d102      	bne.n	8005732 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800572c:	f04f 33ff 	mov.w	r3, #4294967295
 8005730:	e011      	b.n	8005756 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	3304      	adds	r3, #4
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	b29b      	uxth	r3, r3
 800573a:	8afa      	ldrh	r2, [r7, #22]
 800573c:	429a      	cmp	r2, r3
 800573e:	d303      	bcc.n	8005748 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3304      	adds	r3, #4
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8005748:	8afb      	ldrh	r3, [r7, #22]
 800574a:	461a      	mov	r2, r3
 800574c:	4904      	ldr	r1, [pc, #16]	; (8005760 <SCSI_ModeSense6+0x5c>)
 800574e:	6938      	ldr	r0, [r7, #16]
 8005750:	f000 fe28 	bl	80063a4 <SCSI_UpdateBotData>

  return 0;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20000080 	.word	0x20000080

08005764 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	460b      	mov	r3, r1
 800576e:	607a      	str	r2, [r7, #4]
 8005770:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	32b0      	adds	r2, #176	; 0xb0
 800577c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005780:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8005782:	231b      	movs	r3, #27
 8005784:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d102      	bne.n	8005792 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800578c:	f04f 33ff 	mov.w	r3, #4294967295
 8005790:	e011      	b.n	80057b6 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	3308      	adds	r3, #8
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	b29b      	uxth	r3, r3
 800579a:	8afa      	ldrh	r2, [r7, #22]
 800579c:	429a      	cmp	r2, r3
 800579e:	d303      	bcc.n	80057a8 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3308      	adds	r3, #8
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80057a8:	8afb      	ldrh	r3, [r7, #22]
 80057aa:	461a      	mov	r2, r3
 80057ac:	4904      	ldr	r1, [pc, #16]	; (80057c0 <SCSI_ModeSense10+0x5c>)
 80057ae:	6938      	ldr	r0, [r7, #16]
 80057b0:	f000 fdf8 	bl	80063a4 <SCSI_UpdateBotData>

  return 0;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3718      	adds	r7, #24
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	20000098 	.word	0x20000098

080057c4 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	460b      	mov	r3, r1
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	32b0      	adds	r2, #176	; 0xb0
 80057dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057e0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d102      	bne.n	80057ee <SCSI_RequestSense+0x2a>
  {
    return -1;
 80057e8:	f04f 33ff 	mov.w	r3, #4294967295
 80057ec:	e069      	b.n	80058c2 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10a      	bne.n	800580e <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80057fe:	2320      	movs	r3, #32
 8005800:	2205      	movs	r2, #5
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 f861 	bl	80058ca <SCSI_SenseCode>
    return -1;
 8005808:	f04f 33ff 	mov.w	r3, #4294967295
 800580c:	e059      	b.n	80058c2 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800580e:	2300      	movs	r3, #0
 8005810:	75fb      	strb	r3, [r7, #23]
 8005812:	e007      	b.n	8005824 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8005814:	7dfb      	ldrb	r3, [r7, #23]
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	4413      	add	r3, r2
 800581a:	2200      	movs	r2, #0
 800581c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800581e:	7dfb      	ldrb	r3, [r7, #23]
 8005820:	3301      	adds	r3, #1
 8005822:	75fb      	strb	r3, [r7, #23]
 8005824:	7dfb      	ldrb	r3, [r7, #23]
 8005826:	2b11      	cmp	r3, #17
 8005828:	d9f4      	bls.n	8005814 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	2270      	movs	r2, #112	; 0x70
 800582e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	220c      	movs	r2, #12
 8005834:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005842:	429a      	cmp	r2, r3
 8005844:	d02e      	beq.n	80058a4 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800584c:	461a      	mov	r2, r3
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	3248      	adds	r2, #72	; 0x48
 8005852:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	3348      	adds	r3, #72	; 0x48
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	4413      	add	r3, r2
 8005868:	791a      	ldrb	r2, [r3, #4]
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	3348      	adds	r3, #72	; 0x48
 8005878:	00db      	lsls	r3, r3, #3
 800587a:	4413      	add	r3, r2
 800587c:	795a      	ldrb	r2, [r3, #5]
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005888:	3301      	adds	r3, #1
 800588a:	b2da      	uxtb	r2, r3
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005898:	2b04      	cmp	r3, #4
 800589a:	d103      	bne.n	80058a4 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	2212      	movs	r2, #18
 80058a8:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	3304      	adds	r3, #4
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b12      	cmp	r3, #18
 80058b2:	d805      	bhi.n	80058c0 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3304      	adds	r3, #4
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b085      	sub	sp, #20
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	4608      	mov	r0, r1
 80058d4:	4611      	mov	r1, r2
 80058d6:	461a      	mov	r2, r3
 80058d8:	4603      	mov	r3, r0
 80058da:	70fb      	strb	r3, [r7, #3]
 80058dc:	460b      	mov	r3, r1
 80058de:	70bb      	strb	r3, [r7, #2]
 80058e0:	4613      	mov	r3, r2
 80058e2:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	32b0      	adds	r2, #176	; 0xb0
 80058ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058f2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d02c      	beq.n	8005954 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005900:	461a      	mov	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3248      	adds	r2, #72	; 0x48
 8005906:	78b9      	ldrb	r1, [r7, #2]
 8005908:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	3348      	adds	r3, #72	; 0x48
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	4413      	add	r3, r2
 800591a:	787a      	ldrb	r2, [r7, #1]
 800591c:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	3348      	adds	r3, #72	; 0x48
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	4413      	add	r3, r2
 800592c:	2200      	movs	r2, #0
 800592e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005936:	3301      	adds	r3, #1
 8005938:	b2da      	uxtb	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005946:	2b04      	cmp	r3, #4
 8005948:	d105      	bne.n	8005956 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8005952:	e000      	b.n	8005956 <SCSI_SenseCode+0x8c>
    return;
 8005954:	bf00      	nop
  }
}
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	460b      	mov	r3, r1
 800596a:	607a      	str	r2, [r7, #4]
 800596c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	32b0      	adds	r2, #176	; 0xb0
 8005978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800597c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d102      	bne.n	800598a <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8005984:	f04f 33ff 	mov.w	r3, #4294967295
 8005988:	e03b      	b.n	8005a02 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005990:	2b01      	cmp	r3, #1
 8005992:	d10f      	bne.n	80059b4 <SCSI_StartStopUnit+0x54>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	3304      	adds	r3, #4
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d108      	bne.n	80059b4 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80059a2:	7af9      	ldrb	r1, [r7, #11]
 80059a4:	2324      	movs	r3, #36	; 0x24
 80059a6:	2205      	movs	r2, #5
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f7ff ff8e 	bl	80058ca <SCSI_SenseCode>

    return -1;
 80059ae:	f04f 33ff 	mov.w	r3, #4294967295
 80059b2:	e026      	b.n	8005a02 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	3304      	adds	r3, #4
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	f003 0303 	and.w	r3, r3, #3
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d104      	bne.n	80059cc <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80059ca:	e016      	b.n	80059fa <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3304      	adds	r3, #4
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d104      	bne.n	80059e4 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2202      	movs	r2, #2
 80059de:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80059e2:	e00a      	b.n	80059fa <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	3304      	adds	r3, #4
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	f003 0303 	and.w	r3, r3, #3
 80059ee:	2b03      	cmp	r3, #3
 80059f0:	d103      	bne.n	80059fa <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2200      	movs	r2, #0
 80059fe:	60da      	str	r2, [r3, #12]

  return 0;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b087      	sub	sp, #28
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	60f8      	str	r0, [r7, #12]
 8005a12:	460b      	mov	r3, r1
 8005a14:	607a      	str	r2, [r7, #4]
 8005a16:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	32b0      	adds	r2, #176	; 0xb0
 8005a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a26:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d102      	bne.n	8005a34 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8005a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a32:	e011      	b.n	8005a58 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	3304      	adds	r3, #4
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d104      	bne.n	8005a48 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8005a46:	e003      	b.n	8005a50 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	2200      	movs	r2, #0
 8005a54:	60da      	str	r2, [r3, #12]

  return 0;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	371c      	adds	r7, #28
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	607a      	str	r2, [r7, #4]
 8005a70:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	32b0      	adds	r2, #176	; 0xb0
 8005a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a80:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d102      	bne.n	8005a8e <SCSI_Read10+0x2a>
  {
    return -1;
 8005a88:	f04f 33ff 	mov.w	r3, #4294967295
 8005a8c:	e090      	b.n	8005bb0 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	7a1b      	ldrb	r3, [r3, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f040 8082 	bne.w	8005b9c <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005a9e:	b25b      	sxtb	r3, r3
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	db0a      	blt.n	8005aba <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005aaa:	2320      	movs	r3, #32
 8005aac:	2205      	movs	r2, #5
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f7ff ff0b 	bl	80058ca <SCSI_SenseCode>
      return -1;
 8005ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab8:	e07a      	b.n	8005bb0 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d108      	bne.n	8005ad6 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005ac4:	7af9      	ldrb	r1, [r7, #11]
 8005ac6:	233a      	movs	r3, #58	; 0x3a
 8005ac8:	2202      	movs	r2, #2
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f7ff fefd 	bl	80058ca <SCSI_SenseCode>

      return -1;
 8005ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad4:	e06c      	b.n	8005bb0 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	33b0      	adds	r3, #176	; 0xb0
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	7afa      	ldrb	r2, [r7, #11]
 8005aea:	4610      	mov	r0, r2
 8005aec:	4798      	blx	r3
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d008      	beq.n	8005b06 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005af4:	7af9      	ldrb	r1, [r7, #11]
 8005af6:	233a      	movs	r3, #58	; 0x3a
 8005af8:	2202      	movs	r2, #2
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f7ff fee5 	bl	80058ca <SCSI_SenseCode>
      return -1;
 8005b00:	f04f 33ff 	mov.w	r3, #4294967295
 8005b04:	e054      	b.n	8005bb0 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	3302      	adds	r3, #2
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	3303      	adds	r3, #3
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005b16:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005b20:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	3205      	adds	r2, #5
 8005b26:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8005b28:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3307      	adds	r3, #7
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	021b      	lsls	r3, r3, #8
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	3208      	adds	r2, #8
 8005b3c:	7812      	ldrb	r2, [r2, #0]
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005b52:	7af9      	ldrb	r1, [r7, #11]
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 fadc 	bl	8006112 <SCSI_CheckAddressRange>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	da02      	bge.n	8005b66 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8005b60:	f04f 33ff 	mov.w	r3, #4294967295
 8005b64:	e024      	b.n	8005bb0 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005b72:	6979      	ldr	r1, [r7, #20]
 8005b74:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8005b78:	fb01 f303 	mul.w	r3, r1, r3
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d00a      	beq.n	8005b96 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005b86:	2320      	movs	r3, #32
 8005b88:	2205      	movs	r2, #5
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f7ff fe9d 	bl	80058ca <SCSI_SenseCode>
      return -1;
 8005b90:	f04f 33ff 	mov.w	r3, #4294967295
 8005b94:	e00c      	b.n	8005bb0 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ba2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8005ba4:	7afb      	ldrb	r3, [r7, #11]
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f000 fadf 	bl	800616c <SCSI_ProcessRead>
 8005bae:	4603      	mov	r3, r0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3718      	adds	r7, #24
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	607a      	str	r2, [r7, #4]
 8005bc4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	32b0      	adds	r2, #176	; 0xb0
 8005bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d102      	bne.n	8005be2 <SCSI_Read12+0x2a>
  {
    return -1;
 8005bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8005be0:	e09a      	b.n	8005d18 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	7a1b      	ldrb	r3, [r3, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f040 808c 	bne.w	8005d04 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005bf2:	b25b      	sxtb	r3, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	db0a      	blt.n	8005c0e <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005bfe:	2320      	movs	r3, #32
 8005c00:	2205      	movs	r2, #5
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f7ff fe61 	bl	80058ca <SCSI_SenseCode>
      return -1;
 8005c08:	f04f 33ff 	mov.w	r3, #4294967295
 8005c0c:	e084      	b.n	8005d18 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d108      	bne.n	8005c2a <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005c18:	7af9      	ldrb	r1, [r7, #11]
 8005c1a:	233a      	movs	r3, #58	; 0x3a
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f7ff fe53 	bl	80058ca <SCSI_SenseCode>
      return -1;
 8005c24:	f04f 33ff 	mov.w	r3, #4294967295
 8005c28:	e076      	b.n	8005d18 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	33b0      	adds	r3, #176	; 0xb0
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	7afa      	ldrb	r2, [r7, #11]
 8005c3e:	4610      	mov	r0, r2
 8005c40:	4798      	blx	r3
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d008      	beq.n	8005c5a <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005c48:	7af9      	ldrb	r1, [r7, #11]
 8005c4a:	233a      	movs	r3, #58	; 0x3a
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f7ff fe3b 	bl	80058ca <SCSI_SenseCode>
      return -1;
 8005c54:	f04f 33ff 	mov.w	r3, #4294967295
 8005c58:	e05e      	b.n	8005d18 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3302      	adds	r3, #2
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	3303      	adds	r3, #3
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005c6a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	3304      	adds	r3, #4
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005c74:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	3205      	adds	r2, #5
 8005c7a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8005c7c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3306      	adds	r3, #6
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3307      	adds	r3, #7
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005c94:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	3308      	adds	r3, #8
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8005c9e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	3209      	adds	r2, #9
 8005ca4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8005ca6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005cba:	7af9      	ldrb	r1, [r7, #11]
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f000 fa28 	bl	8006112 <SCSI_CheckAddressRange>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	da02      	bge.n	8005cce <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8005cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8005ccc:	e024      	b.n	8005d18 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005cda:	6979      	ldr	r1, [r7, #20]
 8005cdc:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8005ce0:	fb01 f303 	mul.w	r3, r1, r3
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d00a      	beq.n	8005cfe <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005cee:	2320      	movs	r3, #32
 8005cf0:	2205      	movs	r2, #5
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f7ff fde9 	bl	80058ca <SCSI_SenseCode>
      return -1;
 8005cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8005cfc:	e00c      	b.n	8005d18 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2202      	movs	r2, #2
 8005d02:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d0a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8005d0c:	7afb      	ldrb	r3, [r7, #11]
 8005d0e:	4619      	mov	r1, r3
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 fa2b 	bl	800616c <SCSI_ProcessRead>
 8005d16:	4603      	mov	r3, r0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3718      	adds	r7, #24
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	460b      	mov	r3, r1
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	32b0      	adds	r2, #176	; 0xb0
 8005d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d3c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d102      	bne.n	8005d4a <SCSI_Write10+0x2a>
  {
    return -1;
 8005d44:	f04f 33ff 	mov.w	r3, #4294967295
 8005d48:	e0ba      	b.n	8005ec0 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	7a1b      	ldrb	r3, [r3, #8]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f040 80b0 	bne.w	8005eb4 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10a      	bne.n	8005d74 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005d64:	2320      	movs	r3, #32
 8005d66:	2205      	movs	r2, #5
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f7ff fdae 	bl	80058ca <SCSI_SenseCode>
      return -1;
 8005d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d72:	e0a5      	b.n	8005ec0 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005d7a:	b25b      	sxtb	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	da0a      	bge.n	8005d96 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005d86:	2320      	movs	r3, #32
 8005d88:	2205      	movs	r2, #5
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f7ff fd9d 	bl	80058ca <SCSI_SenseCode>
      return -1;
 8005d90:	f04f 33ff 	mov.w	r3, #4294967295
 8005d94:	e094      	b.n	8005ec0 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	33b0      	adds	r3, #176	; 0xb0
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	7afa      	ldrb	r2, [r7, #11]
 8005daa:	4610      	mov	r0, r2
 8005dac:	4798      	blx	r3
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d008      	beq.n	8005dc6 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005db4:	7af9      	ldrb	r1, [r7, #11]
 8005db6:	233a      	movs	r3, #58	; 0x3a
 8005db8:	2202      	movs	r2, #2
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f7ff fd85 	bl	80058ca <SCSI_SenseCode>
      return -1;
 8005dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc4:	e07c      	b.n	8005ec0 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	33b0      	adds	r3, #176	; 0xb0
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4413      	add	r3, r2
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	7afa      	ldrb	r2, [r7, #11]
 8005dda:	4610      	mov	r0, r2
 8005ddc:	4798      	blx	r3
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d008      	beq.n	8005df6 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8005de4:	7af9      	ldrb	r1, [r7, #11]
 8005de6:	2327      	movs	r3, #39	; 0x27
 8005de8:	2202      	movs	r2, #2
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f7ff fd6d 	bl	80058ca <SCSI_SenseCode>
      return -1;
 8005df0:	f04f 33ff 	mov.w	r3, #4294967295
 8005df4:	e064      	b.n	8005ec0 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	3302      	adds	r3, #2
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	3303      	adds	r3, #3
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005e06:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3304      	adds	r3, #4
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005e10:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	3205      	adds	r2, #5
 8005e16:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8005e18:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3307      	adds	r3, #7
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	3208      	adds	r2, #8
 8005e2c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005e42:	7af9      	ldrb	r1, [r7, #11]
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f000 f964 	bl	8006112 <SCSI_CheckAddressRange>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	da02      	bge.n	8005e56 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8005e50:	f04f 33ff 	mov.w	r3, #4294967295
 8005e54:	e034      	b.n	8005ec0 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8005e62:	fb02 f303 	mul.w	r3, r2, r3
 8005e66:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d00a      	beq.n	8005e8a <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005e7a:	2320      	movs	r3, #32
 8005e7c:	2205      	movs	r2, #5
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f7ff fd23 	bl	80058ca <SCSI_SenseCode>
      return -1;
 8005e84:	f04f 33ff 	mov.w	r3, #4294967295
 8005e88:	e01a      	b.n	8005ec0 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e90:	bf28      	it	cs
 8005e92:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005e96:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8005e9e:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <SCSI_Write10+0x1a8>)
 8005ea0:	7819      	ldrb	r1, [r3, #0]
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f103 0210 	add.w	r2, r3, #16
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f002 f9e3 	bl	8008276 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	e005      	b.n	8005ec0 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8005eb4:	7afb      	ldrb	r3, [r7, #11]
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 f9dd 	bl	8006278 <SCSI_ProcessWrite>
 8005ebe:	4603      	mov	r3, r0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3718      	adds	r7, #24
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	2000006f 	.word	0x2000006f

08005ecc <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	32b0      	adds	r2, #176	; 0xb0
 8005ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d102      	bne.n	8005ef6 <SCSI_Write12+0x2a>
  {
    return -1;
 8005ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ef4:	e0ca      	b.n	800608c <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	7a1b      	ldrb	r3, [r3, #8]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f040 80c0 	bne.w	8006080 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10a      	bne.n	8005f20 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005f10:	2320      	movs	r3, #32
 8005f12:	2205      	movs	r2, #5
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f7ff fcd8 	bl	80058ca <SCSI_SenseCode>
      return -1;
 8005f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f1e:	e0b5      	b.n	800608c <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005f26:	b25b      	sxtb	r3, r3
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	da0a      	bge.n	8005f42 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005f32:	2320      	movs	r3, #32
 8005f34:	2205      	movs	r2, #5
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f7ff fcc7 	bl	80058ca <SCSI_SenseCode>
      return -1;
 8005f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f40:	e0a4      	b.n	800608c <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	33b0      	adds	r3, #176	; 0xb0
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	7afa      	ldrb	r2, [r7, #11]
 8005f56:	4610      	mov	r0, r2
 8005f58:	4798      	blx	r3
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00b      	beq.n	8005f78 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005f60:	7af9      	ldrb	r1, [r7, #11]
 8005f62:	233a      	movs	r3, #58	; 0x3a
 8005f64:	2202      	movs	r2, #2
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f7ff fcaf 	bl	80058ca <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2205      	movs	r2, #5
 8005f70:	721a      	strb	r2, [r3, #8]
      return -1;
 8005f72:	f04f 33ff 	mov.w	r3, #4294967295
 8005f76:	e089      	b.n	800608c <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	33b0      	adds	r3, #176	; 0xb0
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	7afa      	ldrb	r2, [r7, #11]
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	4798      	blx	r3
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00b      	beq.n	8005fae <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8005f96:	7af9      	ldrb	r1, [r7, #11]
 8005f98:	2327      	movs	r3, #39	; 0x27
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f7ff fc94 	bl	80058ca <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2205      	movs	r2, #5
 8005fa6:	721a      	strb	r2, [r3, #8]
      return -1;
 8005fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fac:	e06e      	b.n	800608c <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	3302      	adds	r3, #2
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	3303      	adds	r3, #3
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005fbe:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005fc8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	3205      	adds	r2, #5
 8005fce:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8005fd0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	3306      	adds	r3, #6
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3307      	adds	r3, #7
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005fe8:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	3308      	adds	r3, #8
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8005ff2:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	3209      	adds	r2, #9
 8005ff8:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8005ffa:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800600e:	7af9      	ldrb	r1, [r7, #11]
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 f87e 	bl	8006112 <SCSI_CheckAddressRange>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	da02      	bge.n	8006022 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800601c:	f04f 33ff 	mov.w	r3, #4294967295
 8006020:	e034      	b.n	800608c <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800602e:	fb02 f303 	mul.w	r3, r2, r3
 8006032:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	429a      	cmp	r2, r3
 800603e:	d00a      	beq.n	8006056 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006046:	2320      	movs	r3, #32
 8006048:	2205      	movs	r2, #5
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f7ff fc3d 	bl	80058ca <SCSI_SenseCode>
      return -1;
 8006050:	f04f 33ff 	mov.w	r3, #4294967295
 8006054:	e01a      	b.n	800608c <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800605c:	bf28      	it	cs
 800605e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8006062:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	2201      	movs	r2, #1
 8006068:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800606a:	4b0a      	ldr	r3, [pc, #40]	; (8006094 <SCSI_Write12+0x1c8>)
 800606c:	7819      	ldrb	r1, [r3, #0]
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f103 0210 	add.w	r2, r3, #16
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f002 f8fd 	bl	8008276 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800607c:	2300      	movs	r3, #0
 800607e:	e005      	b.n	800608c <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 8006080:	7afb      	ldrb	r3, [r7, #11]
 8006082:	4619      	mov	r1, r3
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 f8f7 	bl	8006278 <SCSI_ProcessWrite>
 800608a:	4603      	mov	r3, r0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3718      	adds	r7, #24
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	2000006f 	.word	0x2000006f

08006098 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	460b      	mov	r3, r1
 80060a2:	607a      	str	r2, [r7, #4]
 80060a4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	32b0      	adds	r2, #176	; 0xb0
 80060b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d102      	bne.n	80060c2 <SCSI_Verify10+0x2a>
  {
    return -1;
 80060bc:	f04f 33ff 	mov.w	r3, #4294967295
 80060c0:	e023      	b.n	800610a <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	3301      	adds	r3, #1
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d008      	beq.n	80060e2 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80060d0:	7af9      	ldrb	r1, [r7, #11]
 80060d2:	2324      	movs	r3, #36	; 0x24
 80060d4:	2205      	movs	r2, #5
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f7ff fbf7 	bl	80058ca <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80060dc:	f04f 33ff 	mov.w	r3, #4294967295
 80060e0:	e013      	b.n	800610a <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80060ee:	7af9      	ldrb	r1, [r7, #11]
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f000 f80e 	bl	8006112 <SCSI_CheckAddressRange>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	da02      	bge.n	8006102 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 80060fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006100:	e003      	b.n	800610a <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	2200      	movs	r2, #0
 8006106:	60da      	str	r2, [r3, #12]

  return 0;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3718      	adds	r7, #24
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b086      	sub	sp, #24
 8006116:	af00      	add	r7, sp, #0
 8006118:	60f8      	str	r0, [r7, #12]
 800611a:	607a      	str	r2, [r7, #4]
 800611c:	603b      	str	r3, [r7, #0]
 800611e:	460b      	mov	r3, r1
 8006120:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	32b0      	adds	r2, #176	; 0xb0
 800612c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006130:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d102      	bne.n	800613e <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8006138:	f04f 33ff 	mov.w	r3, #4294967295
 800613c:	e011      	b.n	8006162 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	441a      	add	r2, r3
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800614a:	429a      	cmp	r2, r3
 800614c:	d908      	bls.n	8006160 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800614e:	7af9      	ldrb	r1, [r7, #11]
 8006150:	2321      	movs	r3, #33	; 0x21
 8006152:	2205      	movs	r2, #5
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f7ff fbb8 	bl	80058ca <SCSI_SenseCode>
    return -1;
 800615a:	f04f 33ff 	mov.w	r3, #4294967295
 800615e:	e000      	b.n	8006162 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3718      	adds	r7, #24
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
	...

0800616c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800616c:	b590      	push	{r4, r7, lr}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	460b      	mov	r3, r1
 8006176:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	32b0      	adds	r2, #176	; 0xb0
 8006182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006186:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d102      	bne.n	8006194 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800618e:	f04f 33ff 	mov.w	r3, #4294967295
 8006192:	e06a      	b.n	800626a <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80061a0:	fb02 f303 	mul.w	r3, r2, r3
 80061a4:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061ac:	bf28      	it	cs
 80061ae:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80061b2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	33b0      	adds	r3, #176	; 0xb0
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	691c      	ldr	r4, [r3, #16]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f103 0110 	add.w	r1, r3, #16
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80061d8:	4618      	mov	r0, r3
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	78f8      	ldrb	r0, [r7, #3]
 80061e4:	47a0      	blx	r4
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	da08      	bge.n	80061fe <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80061ec:	78f9      	ldrb	r1, [r7, #3]
 80061ee:	2311      	movs	r3, #17
 80061f0:	2204      	movs	r2, #4
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7ff fb69 	bl	80058ca <SCSI_SenseCode>
    return -1;
 80061f8:	f04f 33ff 	mov.w	r3, #4294967295
 80061fc:	e035      	b.n	800626a <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 80061fe:	4b1d      	ldr	r3, [pc, #116]	; (8006274 <SCSI_ProcessRead+0x108>)
 8006200:	7819      	ldrb	r1, [r3, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f103 0210 	add.w	r2, r3, #16
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f002 f812 	bl	8008234 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800621c:	4619      	mov	r1, r3
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	fbb3 f3f1 	udiv	r3, r3, r1
 8006224:	441a      	add	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006238:	4619      	mov	r1, r3
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006240:	1ad2      	subs	r2, r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	1ad2      	subs	r2, r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800625e:	2b00      	cmp	r3, #0
 8006260:	d102      	bne.n	8006268 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2203      	movs	r2, #3
 8006266:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	bd90      	pop	{r4, r7, pc}
 8006272:	bf00      	nop
 8006274:	2000006e 	.word	0x2000006e

08006278 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8006278:	b590      	push	{r4, r7, lr}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	32b0      	adds	r2, #176	; 0xb0
 800628e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006292:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d102      	bne.n	80062a0 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800629a:	f04f 33ff 	mov.w	r3, #4294967295
 800629e:	e07a      	b.n	8006396 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80062ac:	fb02 f303 	mul.w	r3, r2, r3
 80062b0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062b8:	bf28      	it	cs
 80062ba:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80062be:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	33b0      	adds	r3, #176	; 0xb0
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4413      	add	r3, r2
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	695c      	ldr	r4, [r3, #20]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f103 0110 	add.w	r1, r3, #16
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80062e4:	4618      	mov	r0, r3
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	78f8      	ldrb	r0, [r7, #3]
 80062f0:	47a0      	blx	r4
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	da08      	bge.n	800630a <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80062f8:	78f9      	ldrb	r1, [r7, #3]
 80062fa:	2303      	movs	r3, #3
 80062fc:	2204      	movs	r2, #4
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7ff fae3 	bl	80058ca <SCSI_SenseCode>
    return -1;
 8006304:	f04f 33ff 	mov.w	r3, #4294967295
 8006308:	e045      	b.n	8006396 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006316:	4619      	mov	r1, r3
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	fbb3 f3f1 	udiv	r3, r3, r1
 800631e:	441a      	add	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006332:	4619      	mov	r1, r3
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	fbb3 f3f1 	udiv	r3, r3, r1
 800633a:	1ad2      	subs	r2, r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	1ad2      	subs	r2, r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006358:	2b00      	cmp	r3, #0
 800635a:	d104      	bne.n	8006366 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800635c:	2100      	movs	r1, #0
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7fe fd14 	bl	8004d8c <MSC_BOT_SendCSW>
 8006364:	e016      	b.n	8006394 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8006372:	fb02 f303 	mul.w	r3, r2, r3
 8006376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800637a:	bf28      	it	cs
 800637c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8006380:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8006382:	4b07      	ldr	r3, [pc, #28]	; (80063a0 <SCSI_ProcessWrite+0x128>)
 8006384:	7819      	ldrb	r1, [r3, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f103 0210 	add.w	r2, r3, #16
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f001 ff71 	bl	8008276 <USBD_LL_PrepareReceive>
  }

  return 0;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	bd90      	pop	{r4, r7, pc}
 800639e:	bf00      	nop
 80063a0:	2000006f 	.word	0x2000006f

080063a4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b087      	sub	sp, #28
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	4613      	mov	r3, r2
 80063b0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80063b2:	88fb      	ldrh	r3, [r7, #6]
 80063b4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d102      	bne.n	80063c2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 80063bc:	f04f 33ff 	mov.w	r3, #4294967295
 80063c0:	e013      	b.n	80063ea <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 80063c2:	8afa      	ldrh	r2, [r7, #22]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80063c8:	e00b      	b.n	80063e2 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 80063ca:	8afb      	ldrh	r3, [r7, #22]
 80063cc:	3b01      	subs	r3, #1
 80063ce:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80063d0:	8afb      	ldrh	r3, [r7, #22]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	441a      	add	r2, r3
 80063d6:	8afb      	ldrh	r3, [r7, #22]
 80063d8:	7811      	ldrb	r1, [r2, #0]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	4413      	add	r3, r2
 80063de:	460a      	mov	r2, r1
 80063e0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80063e2:	8afb      	ldrh	r3, [r7, #22]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1f0      	bne.n	80063ca <SCSI_UpdateBotData+0x26>
  }

  return 0;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	371c      	adds	r7, #28
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b086      	sub	sp, #24
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	60f8      	str	r0, [r7, #12]
 80063fe:	60b9      	str	r1, [r7, #8]
 8006400:	4613      	mov	r3, r2
 8006402:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800640a:	2303      	movs	r3, #3
 800640c:	e01f      	b.n	800644e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	79fa      	ldrb	r2, [r7, #7]
 8006440:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f001 fda2 	bl	8007f8c <USBD_LL_Init>
 8006448:	4603      	mov	r3, r0
 800644a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800644c:	7dfb      	ldrb	r3, [r7, #23]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3718      	adds	r7, #24
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b084      	sub	sp, #16
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800646a:	2303      	movs	r3, #3
 800646c:	e025      	b.n	80064ba <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	32ae      	adds	r2, #174	; 0xae
 8006480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00f      	beq.n	80064aa <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	32ae      	adds	r2, #174	; 0xae
 8006494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649a:	f107 020e 	add.w	r2, r7, #14
 800649e:	4610      	mov	r0, r2
 80064a0:	4798      	blx	r3
 80064a2:	4602      	mov	r2, r0
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b082      	sub	sp, #8
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f001 fdaa 	bl	8008024 <USBD_LL_Start>
 80064d0:	4603      	mov	r3, r0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80064da:	b480      	push	{r7}
 80064dc:	b083      	sub	sp, #12
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80064e2:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	460b      	mov	r3, r1
 80064fa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80064fc:	2300      	movs	r3, #0
 80064fe:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006506:	2b00      	cmp	r3, #0
 8006508:	d009      	beq.n	800651e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	78fa      	ldrb	r2, [r7, #3]
 8006514:	4611      	mov	r1, r2
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	4798      	blx	r3
 800651a:	4603      	mov	r3, r0
 800651c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800651e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006534:	2300      	movs	r3, #0
 8006536:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	78fa      	ldrb	r2, [r7, #3]
 8006542:	4611      	mov	r1, r2
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	4798      	blx	r3
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800654e:	2303      	movs	r3, #3
 8006550:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006552:	7bfb      	ldrb	r3, [r7, #15]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800656c:	6839      	ldr	r1, [r7, #0]
 800656e:	4618      	mov	r0, r3
 8006570:	f001 f909 	bl	8007786 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006582:	461a      	mov	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006590:	f003 031f 	and.w	r3, r3, #31
 8006594:	2b02      	cmp	r3, #2
 8006596:	d01a      	beq.n	80065ce <USBD_LL_SetupStage+0x72>
 8006598:	2b02      	cmp	r3, #2
 800659a:	d822      	bhi.n	80065e2 <USBD_LL_SetupStage+0x86>
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <USBD_LL_SetupStage+0x4a>
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d00a      	beq.n	80065ba <USBD_LL_SetupStage+0x5e>
 80065a4:	e01d      	b.n	80065e2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80065ac:	4619      	mov	r1, r3
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fb60 	bl	8006c74 <USBD_StdDevReq>
 80065b4:	4603      	mov	r3, r0
 80065b6:	73fb      	strb	r3, [r7, #15]
      break;
 80065b8:	e020      	b.n	80065fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80065c0:	4619      	mov	r1, r3
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fbc8 	bl	8006d58 <USBD_StdItfReq>
 80065c8:	4603      	mov	r3, r0
 80065ca:	73fb      	strb	r3, [r7, #15]
      break;
 80065cc:	e016      	b.n	80065fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80065d4:	4619      	mov	r1, r3
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fc2a 	bl	8006e30 <USBD_StdEPReq>
 80065dc:	4603      	mov	r3, r0
 80065de:	73fb      	strb	r3, [r7, #15]
      break;
 80065e0:	e00c      	b.n	80065fc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80065e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	4619      	mov	r1, r3
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f001 fd96 	bl	8008122 <USBD_LL_StallEP>
 80065f6:	4603      	mov	r3, r0
 80065f8:	73fb      	strb	r3, [r7, #15]
      break;
 80065fa:	bf00      	nop
  }

  return ret;
 80065fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b086      	sub	sp, #24
 800660a:	af00      	add	r7, sp, #0
 800660c:	60f8      	str	r0, [r7, #12]
 800660e:	460b      	mov	r3, r1
 8006610:	607a      	str	r2, [r7, #4]
 8006612:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006614:	2300      	movs	r3, #0
 8006616:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006618:	7afb      	ldrb	r3, [r7, #11]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d16e      	bne.n	80066fc <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006624:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800662c:	2b03      	cmp	r3, #3
 800662e:	f040 8098 	bne.w	8006762 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	689a      	ldr	r2, [r3, #8]
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	429a      	cmp	r2, r3
 800663c:	d913      	bls.n	8006666 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	689a      	ldr	r2, [r3, #8]
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	1ad2      	subs	r2, r2, r3
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	68da      	ldr	r2, [r3, #12]
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	4293      	cmp	r3, r2
 8006656:	bf28      	it	cs
 8006658:	4613      	movcs	r3, r2
 800665a:	461a      	mov	r2, r3
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f001 f968 	bl	8007934 <USBD_CtlContinueRx>
 8006664:	e07d      	b.n	8006762 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800666c:	f003 031f 	and.w	r3, r3, #31
 8006670:	2b02      	cmp	r3, #2
 8006672:	d014      	beq.n	800669e <USBD_LL_DataOutStage+0x98>
 8006674:	2b02      	cmp	r3, #2
 8006676:	d81d      	bhi.n	80066b4 <USBD_LL_DataOutStage+0xae>
 8006678:	2b00      	cmp	r3, #0
 800667a:	d002      	beq.n	8006682 <USBD_LL_DataOutStage+0x7c>
 800667c:	2b01      	cmp	r3, #1
 800667e:	d003      	beq.n	8006688 <USBD_LL_DataOutStage+0x82>
 8006680:	e018      	b.n	80066b4 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006682:	2300      	movs	r3, #0
 8006684:	75bb      	strb	r3, [r7, #22]
            break;
 8006686:	e018      	b.n	80066ba <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800668e:	b2db      	uxtb	r3, r3
 8006690:	4619      	mov	r1, r3
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f000 fa5e 	bl	8006b54 <USBD_CoreFindIF>
 8006698:	4603      	mov	r3, r0
 800669a:	75bb      	strb	r3, [r7, #22]
            break;
 800669c:	e00d      	b.n	80066ba <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	4619      	mov	r1, r3
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f000 fa60 	bl	8006b6e <USBD_CoreFindEP>
 80066ae:	4603      	mov	r3, r0
 80066b0:	75bb      	strb	r3, [r7, #22]
            break;
 80066b2:	e002      	b.n	80066ba <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80066b4:	2300      	movs	r3, #0
 80066b6:	75bb      	strb	r3, [r7, #22]
            break;
 80066b8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80066ba:	7dbb      	ldrb	r3, [r7, #22]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d119      	bne.n	80066f4 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b03      	cmp	r3, #3
 80066ca:	d113      	bne.n	80066f4 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80066cc:	7dba      	ldrb	r2, [r7, #22]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	32ae      	adds	r2, #174	; 0xae
 80066d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00b      	beq.n	80066f4 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80066dc:	7dba      	ldrb	r2, [r7, #22]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80066e4:	7dba      	ldrb	r2, [r7, #22]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	32ae      	adds	r2, #174	; 0xae
 80066ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f001 f92e 	bl	8007956 <USBD_CtlSendStatus>
 80066fa:	e032      	b.n	8006762 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80066fc:	7afb      	ldrb	r3, [r7, #11]
 80066fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006702:	b2db      	uxtb	r3, r3
 8006704:	4619      	mov	r1, r3
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f000 fa31 	bl	8006b6e <USBD_CoreFindEP>
 800670c:	4603      	mov	r3, r0
 800670e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006710:	7dbb      	ldrb	r3, [r7, #22]
 8006712:	2bff      	cmp	r3, #255	; 0xff
 8006714:	d025      	beq.n	8006762 <USBD_LL_DataOutStage+0x15c>
 8006716:	7dbb      	ldrb	r3, [r7, #22]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d122      	bne.n	8006762 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b03      	cmp	r3, #3
 8006726:	d117      	bne.n	8006758 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006728:	7dba      	ldrb	r2, [r7, #22]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	32ae      	adds	r2, #174	; 0xae
 800672e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00f      	beq.n	8006758 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006738:	7dba      	ldrb	r2, [r7, #22]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006740:	7dba      	ldrb	r2, [r7, #22]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	32ae      	adds	r2, #174	; 0xae
 8006746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	7afa      	ldrb	r2, [r7, #11]
 800674e:	4611      	mov	r1, r2
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	4798      	blx	r3
 8006754:	4603      	mov	r3, r0
 8006756:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006758:	7dfb      	ldrb	r3, [r7, #23]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800675e:	7dfb      	ldrb	r3, [r7, #23]
 8006760:	e000      	b.n	8006764 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3718      	adds	r7, #24
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	460b      	mov	r3, r1
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800677a:	7afb      	ldrb	r3, [r7, #11]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d16f      	bne.n	8006860 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	3314      	adds	r3, #20
 8006784:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800678c:	2b02      	cmp	r3, #2
 800678e:	d15a      	bne.n	8006846 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	429a      	cmp	r2, r3
 800679a:	d914      	bls.n	80067c6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	689a      	ldr	r2, [r3, #8]
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	1ad2      	subs	r2, r2, r3
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	461a      	mov	r2, r3
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f001 f8ad 	bl	8007912 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067b8:	2300      	movs	r3, #0
 80067ba:	2200      	movs	r2, #0
 80067bc:	2100      	movs	r1, #0
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f001 fd59 	bl	8008276 <USBD_LL_PrepareReceive>
 80067c4:	e03f      	b.n	8006846 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d11c      	bne.n	800680c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80067da:	429a      	cmp	r2, r3
 80067dc:	d316      	bcc.n	800680c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	685a      	ldr	r2, [r3, #4]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d20f      	bcs.n	800680c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80067ec:	2200      	movs	r2, #0
 80067ee:	2100      	movs	r1, #0
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f001 f88e 	bl	8007912 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067fe:	2300      	movs	r3, #0
 8006800:	2200      	movs	r2, #0
 8006802:	2100      	movs	r1, #0
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f001 fd36 	bl	8008276 <USBD_LL_PrepareReceive>
 800680a:	e01c      	b.n	8006846 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b03      	cmp	r3, #3
 8006816:	d10f      	bne.n	8006838 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d009      	beq.n	8006838 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006838:	2180      	movs	r1, #128	; 0x80
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f001 fc71 	bl	8008122 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f001 f89b 	bl	800797c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d03a      	beq.n	80068c6 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f7ff fe42 	bl	80064da <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800685e:	e032      	b.n	80068c6 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006860:	7afb      	ldrb	r3, [r7, #11]
 8006862:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006866:	b2db      	uxtb	r3, r3
 8006868:	4619      	mov	r1, r3
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 f97f 	bl	8006b6e <USBD_CoreFindEP>
 8006870:	4603      	mov	r3, r0
 8006872:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006874:	7dfb      	ldrb	r3, [r7, #23]
 8006876:	2bff      	cmp	r3, #255	; 0xff
 8006878:	d025      	beq.n	80068c6 <USBD_LL_DataInStage+0x15a>
 800687a:	7dfb      	ldrb	r3, [r7, #23]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d122      	bne.n	80068c6 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b03      	cmp	r3, #3
 800688a:	d11c      	bne.n	80068c6 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800688c:	7dfa      	ldrb	r2, [r7, #23]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	32ae      	adds	r2, #174	; 0xae
 8006892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d014      	beq.n	80068c6 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800689c:	7dfa      	ldrb	r2, [r7, #23]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80068a4:	7dfa      	ldrb	r2, [r7, #23]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	32ae      	adds	r2, #174	; 0xae
 80068aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	7afa      	ldrb	r2, [r7, #11]
 80068b2:	4611      	mov	r1, r2
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	4798      	blx	r3
 80068b8:	4603      	mov	r3, r0
 80068ba:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80068bc:	7dbb      	ldrb	r3, [r7, #22]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80068c2:	7dbb      	ldrb	r3, [r7, #22]
 80068c4:	e000      	b.n	80068c8 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3718      	adds	r7, #24
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80068d8:	2300      	movs	r3, #0
 80068da:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006908:	2b00      	cmp	r3, #0
 800690a:	d014      	beq.n	8006936 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00e      	beq.n	8006936 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	6852      	ldr	r2, [r2, #4]
 8006924:	b2d2      	uxtb	r2, r2
 8006926:	4611      	mov	r1, r2
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	4798      	blx	r3
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006932:	2303      	movs	r3, #3
 8006934:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006936:	2340      	movs	r3, #64	; 0x40
 8006938:	2200      	movs	r2, #0
 800693a:	2100      	movs	r1, #0
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f001 fb8c 	bl	800805a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2240      	movs	r2, #64	; 0x40
 800694e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006952:	2340      	movs	r3, #64	; 0x40
 8006954:	2200      	movs	r2, #0
 8006956:	2180      	movs	r1, #128	; 0x80
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f001 fb7e 	bl	800805a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2240      	movs	r2, #64	; 0x40
 8006968:	621a      	str	r2, [r3, #32]

  return ret;
 800696a:	7bfb      	ldrb	r3, [r7, #15]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	460b      	mov	r3, r1
 800697e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	78fa      	ldrb	r2, [r7, #3]
 8006984:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2204      	movs	r2, #4
 80069ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b04      	cmp	r3, #4
 80069d2:	d106      	bne.n	80069e2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b03      	cmp	r3, #3
 8006a02:	d110      	bne.n	8006a26 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00b      	beq.n	8006a26 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a14:	69db      	ldr	r3, [r3, #28]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d005      	beq.n	8006a26 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a20:	69db      	ldr	r3, [r3, #28]
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3708      	adds	r7, #8
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	32ae      	adds	r2, #174	; 0xae
 8006a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d101      	bne.n	8006a52 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e01c      	b.n	8006a8c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b03      	cmp	r3, #3
 8006a5c:	d115      	bne.n	8006a8a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	32ae      	adds	r2, #174	; 0xae
 8006a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00b      	beq.n	8006a8a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	32ae      	adds	r2, #174	; 0xae
 8006a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	78fa      	ldrb	r2, [r7, #3]
 8006a84:	4611      	mov	r1, r2
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3708      	adds	r7, #8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	32ae      	adds	r2, #174	; 0xae
 8006aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d101      	bne.n	8006ab6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e01c      	b.n	8006af0 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b03      	cmp	r3, #3
 8006ac0:	d115      	bne.n	8006aee <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	32ae      	adds	r2, #174	; 0xae
 8006acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00b      	beq.n	8006aee <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	32ae      	adds	r2, #174	; 0xae
 8006ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae6:	78fa      	ldrb	r2, [r7, #3]
 8006ae8:	4611      	mov	r1, r2
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	370c      	adds	r7, #12
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b084      	sub	sp, #16
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00e      	beq.n	8006b4a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	6852      	ldr	r2, [r2, #4]
 8006b38:	b2d2      	uxtb	r2, r2
 8006b3a:	4611      	mov	r1, r2
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	4798      	blx	r3
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006b46:	2303      	movs	r3, #3
 8006b48:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006b60:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b083      	sub	sp, #12
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
 8006b76:	460b      	mov	r3, r1
 8006b78:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006b7a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	460b      	mov	r3, r1
 8006b92:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	885b      	ldrh	r3, [r3, #2]
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d920      	bls.n	8006bf2 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006bb8:	e013      	b.n	8006be2 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006bba:	f107 030a 	add.w	r3, r7, #10
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	6978      	ldr	r0, [r7, #20]
 8006bc2:	f000 f81b 	bl	8006bfc <USBD_GetNextDesc>
 8006bc6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	785b      	ldrb	r3, [r3, #1]
 8006bcc:	2b05      	cmp	r3, #5
 8006bce:	d108      	bne.n	8006be2 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	789b      	ldrb	r3, [r3, #2]
 8006bd8:	78fa      	ldrb	r2, [r7, #3]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d008      	beq.n	8006bf0 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006bde:	2300      	movs	r3, #0
 8006be0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	885b      	ldrh	r3, [r3, #2]
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	897b      	ldrh	r3, [r7, #10]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d8e5      	bhi.n	8006bba <USBD_GetEpDesc+0x32>
 8006bee:	e000      	b.n	8006bf2 <USBD_GetEpDesc+0x6a>
          break;
 8006bf0:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006bf2:	693b      	ldr	r3, [r7, #16]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3718      	adds	r7, #24
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	881a      	ldrh	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	4413      	add	r3, r2
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	461a      	mov	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4413      	add	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006c28:	68fb      	ldr	r3, [r7, #12]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b087      	sub	sp, #28
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006c54:	8a3b      	ldrh	r3, [r7, #16]
 8006c56:	021b      	lsls	r3, r3, #8
 8006c58:	b21a      	sxth	r2, r3
 8006c5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	b21b      	sxth	r3, r3
 8006c62:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006c64:	89fb      	ldrh	r3, [r7, #14]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	371c      	adds	r7, #28
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
	...

08006c74 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c8a:	2b40      	cmp	r3, #64	; 0x40
 8006c8c:	d005      	beq.n	8006c9a <USBD_StdDevReq+0x26>
 8006c8e:	2b40      	cmp	r3, #64	; 0x40
 8006c90:	d857      	bhi.n	8006d42 <USBD_StdDevReq+0xce>
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00f      	beq.n	8006cb6 <USBD_StdDevReq+0x42>
 8006c96:	2b20      	cmp	r3, #32
 8006c98:	d153      	bne.n	8006d42 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	32ae      	adds	r2, #174	; 0xae
 8006ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	6839      	ldr	r1, [r7, #0]
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	4798      	blx	r3
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8006cb4:	e04a      	b.n	8006d4c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	785b      	ldrb	r3, [r3, #1]
 8006cba:	2b09      	cmp	r3, #9
 8006cbc:	d83b      	bhi.n	8006d36 <USBD_StdDevReq+0xc2>
 8006cbe:	a201      	add	r2, pc, #4	; (adr r2, 8006cc4 <USBD_StdDevReq+0x50>)
 8006cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc4:	08006d19 	.word	0x08006d19
 8006cc8:	08006d2d 	.word	0x08006d2d
 8006ccc:	08006d37 	.word	0x08006d37
 8006cd0:	08006d23 	.word	0x08006d23
 8006cd4:	08006d37 	.word	0x08006d37
 8006cd8:	08006cf7 	.word	0x08006cf7
 8006cdc:	08006ced 	.word	0x08006ced
 8006ce0:	08006d37 	.word	0x08006d37
 8006ce4:	08006d0f 	.word	0x08006d0f
 8006ce8:	08006d01 	.word	0x08006d01
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006cec:	6839      	ldr	r1, [r7, #0]
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fa3c 	bl	800716c <USBD_GetDescriptor>
          break;
 8006cf4:	e024      	b.n	8006d40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006cf6:	6839      	ldr	r1, [r7, #0]
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 fba1 	bl	8007440 <USBD_SetAddress>
          break;
 8006cfe:	e01f      	b.n	8006d40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006d00:	6839      	ldr	r1, [r7, #0]
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fbe0 	bl	80074c8 <USBD_SetConfig>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	73fb      	strb	r3, [r7, #15]
          break;
 8006d0c:	e018      	b.n	8006d40 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 fc83 	bl	800761c <USBD_GetConfig>
          break;
 8006d16:	e013      	b.n	8006d40 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006d18:	6839      	ldr	r1, [r7, #0]
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fcb4 	bl	8007688 <USBD_GetStatus>
          break;
 8006d20:	e00e      	b.n	8006d40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006d22:	6839      	ldr	r1, [r7, #0]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fce3 	bl	80076f0 <USBD_SetFeature>
          break;
 8006d2a:	e009      	b.n	8006d40 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 fd07 	bl	8007742 <USBD_ClrFeature>
          break;
 8006d34:	e004      	b.n	8006d40 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006d36:	6839      	ldr	r1, [r7, #0]
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 fd5e 	bl	80077fa <USBD_CtlError>
          break;
 8006d3e:	bf00      	nop
      }
      break;
 8006d40:	e004      	b.n	8006d4c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 fd58 	bl	80077fa <USBD_CtlError>
      break;
 8006d4a:	bf00      	nop
  }

  return ret;
 8006d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop

08006d58 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d6e:	2b40      	cmp	r3, #64	; 0x40
 8006d70:	d005      	beq.n	8006d7e <USBD_StdItfReq+0x26>
 8006d72:	2b40      	cmp	r3, #64	; 0x40
 8006d74:	d852      	bhi.n	8006e1c <USBD_StdItfReq+0xc4>
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d001      	beq.n	8006d7e <USBD_StdItfReq+0x26>
 8006d7a:	2b20      	cmp	r3, #32
 8006d7c:	d14e      	bne.n	8006e1c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	3b01      	subs	r3, #1
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d840      	bhi.n	8006e0e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	889b      	ldrh	r3, [r3, #4]
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d836      	bhi.n	8006e04 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	889b      	ldrh	r3, [r3, #4]
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7ff fed8 	bl	8006b54 <USBD_CoreFindIF>
 8006da4:	4603      	mov	r3, r0
 8006da6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006da8:	7bbb      	ldrb	r3, [r7, #14]
 8006daa:	2bff      	cmp	r3, #255	; 0xff
 8006dac:	d01d      	beq.n	8006dea <USBD_StdItfReq+0x92>
 8006dae:	7bbb      	ldrb	r3, [r7, #14]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d11a      	bne.n	8006dea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006db4:	7bba      	ldrb	r2, [r7, #14]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	32ae      	adds	r2, #174	; 0xae
 8006dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00f      	beq.n	8006de4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006dc4:	7bba      	ldrb	r2, [r7, #14]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006dcc:	7bba      	ldrb	r2, [r7, #14]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	32ae      	adds	r2, #174	; 0xae
 8006dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	6839      	ldr	r1, [r7, #0]
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	4798      	blx	r3
 8006dde:	4603      	mov	r3, r0
 8006de0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006de2:	e004      	b.n	8006dee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006de4:	2303      	movs	r3, #3
 8006de6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006de8:	e001      	b.n	8006dee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006dea:	2303      	movs	r3, #3
 8006dec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	88db      	ldrh	r3, [r3, #6]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d110      	bne.n	8006e18 <USBD_StdItfReq+0xc0>
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10d      	bne.n	8006e18 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fdaa 	bl	8007956 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006e02:	e009      	b.n	8006e18 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006e04:	6839      	ldr	r1, [r7, #0]
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 fcf7 	bl	80077fa <USBD_CtlError>
          break;
 8006e0c:	e004      	b.n	8006e18 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 fcf2 	bl	80077fa <USBD_CtlError>
          break;
 8006e16:	e000      	b.n	8006e1a <USBD_StdItfReq+0xc2>
          break;
 8006e18:	bf00      	nop
      }
      break;
 8006e1a:	e004      	b.n	8006e26 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006e1c:	6839      	ldr	r1, [r7, #0]
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 fceb 	bl	80077fa <USBD_CtlError>
      break;
 8006e24:	bf00      	nop
  }

  return ret;
 8006e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	889b      	ldrh	r3, [r3, #4]
 8006e42:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e4c:	2b40      	cmp	r3, #64	; 0x40
 8006e4e:	d007      	beq.n	8006e60 <USBD_StdEPReq+0x30>
 8006e50:	2b40      	cmp	r3, #64	; 0x40
 8006e52:	f200 817f 	bhi.w	8007154 <USBD_StdEPReq+0x324>
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d02a      	beq.n	8006eb0 <USBD_StdEPReq+0x80>
 8006e5a:	2b20      	cmp	r3, #32
 8006e5c:	f040 817a 	bne.w	8007154 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006e60:	7bbb      	ldrb	r3, [r7, #14]
 8006e62:	4619      	mov	r1, r3
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7ff fe82 	bl	8006b6e <USBD_CoreFindEP>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e6e:	7b7b      	ldrb	r3, [r7, #13]
 8006e70:	2bff      	cmp	r3, #255	; 0xff
 8006e72:	f000 8174 	beq.w	800715e <USBD_StdEPReq+0x32e>
 8006e76:	7b7b      	ldrb	r3, [r7, #13]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f040 8170 	bne.w	800715e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006e7e:	7b7a      	ldrb	r2, [r7, #13]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006e86:	7b7a      	ldrb	r2, [r7, #13]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	32ae      	adds	r2, #174	; 0xae
 8006e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 8163 	beq.w	800715e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006e98:	7b7a      	ldrb	r2, [r7, #13]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	32ae      	adds	r2, #174	; 0xae
 8006e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	4798      	blx	r3
 8006eaa:	4603      	mov	r3, r0
 8006eac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006eae:	e156      	b.n	800715e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	785b      	ldrb	r3, [r3, #1]
 8006eb4:	2b03      	cmp	r3, #3
 8006eb6:	d008      	beq.n	8006eca <USBD_StdEPReq+0x9a>
 8006eb8:	2b03      	cmp	r3, #3
 8006eba:	f300 8145 	bgt.w	8007148 <USBD_StdEPReq+0x318>
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f000 809b 	beq.w	8006ffa <USBD_StdEPReq+0x1ca>
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d03c      	beq.n	8006f42 <USBD_StdEPReq+0x112>
 8006ec8:	e13e      	b.n	8007148 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d002      	beq.n	8006edc <USBD_StdEPReq+0xac>
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d016      	beq.n	8006f08 <USBD_StdEPReq+0xd8>
 8006eda:	e02c      	b.n	8006f36 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006edc:	7bbb      	ldrb	r3, [r7, #14]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00d      	beq.n	8006efe <USBD_StdEPReq+0xce>
 8006ee2:	7bbb      	ldrb	r3, [r7, #14]
 8006ee4:	2b80      	cmp	r3, #128	; 0x80
 8006ee6:	d00a      	beq.n	8006efe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ee8:	7bbb      	ldrb	r3, [r7, #14]
 8006eea:	4619      	mov	r1, r3
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f001 f918 	bl	8008122 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ef2:	2180      	movs	r1, #128	; 0x80
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f001 f914 	bl	8008122 <USBD_LL_StallEP>
 8006efa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006efc:	e020      	b.n	8006f40 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006efe:	6839      	ldr	r1, [r7, #0]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fc7a 	bl	80077fa <USBD_CtlError>
              break;
 8006f06:	e01b      	b.n	8006f40 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	885b      	ldrh	r3, [r3, #2]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10e      	bne.n	8006f2e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006f10:	7bbb      	ldrb	r3, [r7, #14]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00b      	beq.n	8006f2e <USBD_StdEPReq+0xfe>
 8006f16:	7bbb      	ldrb	r3, [r7, #14]
 8006f18:	2b80      	cmp	r3, #128	; 0x80
 8006f1a:	d008      	beq.n	8006f2e <USBD_StdEPReq+0xfe>
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	88db      	ldrh	r3, [r3, #6]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d104      	bne.n	8006f2e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f24:	7bbb      	ldrb	r3, [r7, #14]
 8006f26:	4619      	mov	r1, r3
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f001 f8fa 	bl	8008122 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fd11 	bl	8007956 <USBD_CtlSendStatus>

              break;
 8006f34:	e004      	b.n	8006f40 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006f36:	6839      	ldr	r1, [r7, #0]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fc5e 	bl	80077fa <USBD_CtlError>
              break;
 8006f3e:	bf00      	nop
          }
          break;
 8006f40:	e107      	b.n	8007152 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d002      	beq.n	8006f54 <USBD_StdEPReq+0x124>
 8006f4e:	2b03      	cmp	r3, #3
 8006f50:	d016      	beq.n	8006f80 <USBD_StdEPReq+0x150>
 8006f52:	e04b      	b.n	8006fec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f54:	7bbb      	ldrb	r3, [r7, #14]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00d      	beq.n	8006f76 <USBD_StdEPReq+0x146>
 8006f5a:	7bbb      	ldrb	r3, [r7, #14]
 8006f5c:	2b80      	cmp	r3, #128	; 0x80
 8006f5e:	d00a      	beq.n	8006f76 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f60:	7bbb      	ldrb	r3, [r7, #14]
 8006f62:	4619      	mov	r1, r3
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f001 f8dc 	bl	8008122 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f6a:	2180      	movs	r1, #128	; 0x80
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f001 f8d8 	bl	8008122 <USBD_LL_StallEP>
 8006f72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f74:	e040      	b.n	8006ff8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fc3e 	bl	80077fa <USBD_CtlError>
              break;
 8006f7e:	e03b      	b.n	8006ff8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	885b      	ldrh	r3, [r3, #2]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d136      	bne.n	8006ff6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006f88:	7bbb      	ldrb	r3, [r7, #14]
 8006f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d004      	beq.n	8006f9c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f92:	7bbb      	ldrb	r3, [r7, #14]
 8006f94:	4619      	mov	r1, r3
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f001 f8e2 	bl	8008160 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fcda 	bl	8007956 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006fa2:	7bbb      	ldrb	r3, [r7, #14]
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7ff fde1 	bl	8006b6e <USBD_CoreFindEP>
 8006fac:	4603      	mov	r3, r0
 8006fae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006fb0:	7b7b      	ldrb	r3, [r7, #13]
 8006fb2:	2bff      	cmp	r3, #255	; 0xff
 8006fb4:	d01f      	beq.n	8006ff6 <USBD_StdEPReq+0x1c6>
 8006fb6:	7b7b      	ldrb	r3, [r7, #13]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d11c      	bne.n	8006ff6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006fbc:	7b7a      	ldrb	r2, [r7, #13]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006fc4:	7b7a      	ldrb	r2, [r7, #13]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	32ae      	adds	r2, #174	; 0xae
 8006fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d010      	beq.n	8006ff6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006fd4:	7b7a      	ldrb	r2, [r7, #13]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	32ae      	adds	r2, #174	; 0xae
 8006fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	4798      	blx	r3
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006fea:	e004      	b.n	8006ff6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006fec:	6839      	ldr	r1, [r7, #0]
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fc03 	bl	80077fa <USBD_CtlError>
              break;
 8006ff4:	e000      	b.n	8006ff8 <USBD_StdEPReq+0x1c8>
              break;
 8006ff6:	bf00      	nop
          }
          break;
 8006ff8:	e0ab      	b.n	8007152 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b02      	cmp	r3, #2
 8007004:	d002      	beq.n	800700c <USBD_StdEPReq+0x1dc>
 8007006:	2b03      	cmp	r3, #3
 8007008:	d032      	beq.n	8007070 <USBD_StdEPReq+0x240>
 800700a:	e097      	b.n	800713c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800700c:	7bbb      	ldrb	r3, [r7, #14]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d007      	beq.n	8007022 <USBD_StdEPReq+0x1f2>
 8007012:	7bbb      	ldrb	r3, [r7, #14]
 8007014:	2b80      	cmp	r3, #128	; 0x80
 8007016:	d004      	beq.n	8007022 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007018:	6839      	ldr	r1, [r7, #0]
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fbed 	bl	80077fa <USBD_CtlError>
                break;
 8007020:	e091      	b.n	8007146 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007022:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007026:	2b00      	cmp	r3, #0
 8007028:	da0b      	bge.n	8007042 <USBD_StdEPReq+0x212>
 800702a:	7bbb      	ldrb	r3, [r7, #14]
 800702c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007030:	4613      	mov	r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4413      	add	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	3310      	adds	r3, #16
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	4413      	add	r3, r2
 800703e:	3304      	adds	r3, #4
 8007040:	e00b      	b.n	800705a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007042:	7bbb      	ldrb	r3, [r7, #14]
 8007044:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007048:	4613      	mov	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	4413      	add	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	4413      	add	r3, r2
 8007058:	3304      	adds	r3, #4
 800705a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2200      	movs	r2, #0
 8007060:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	2202      	movs	r2, #2
 8007066:	4619      	mov	r1, r3
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fc37 	bl	80078dc <USBD_CtlSendData>
              break;
 800706e:	e06a      	b.n	8007146 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007070:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007074:	2b00      	cmp	r3, #0
 8007076:	da11      	bge.n	800709c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007078:	7bbb      	ldrb	r3, [r7, #14]
 800707a:	f003 020f 	and.w	r2, r3, #15
 800707e:	6879      	ldr	r1, [r7, #4]
 8007080:	4613      	mov	r3, r2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	440b      	add	r3, r1
 800708a:	3324      	adds	r3, #36	; 0x24
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d117      	bne.n	80070c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007092:	6839      	ldr	r1, [r7, #0]
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 fbb0 	bl	80077fa <USBD_CtlError>
                  break;
 800709a:	e054      	b.n	8007146 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800709c:	7bbb      	ldrb	r3, [r7, #14]
 800709e:	f003 020f 	and.w	r2, r3, #15
 80070a2:	6879      	ldr	r1, [r7, #4]
 80070a4:	4613      	mov	r3, r2
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4413      	add	r3, r2
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	440b      	add	r3, r1
 80070ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d104      	bne.n	80070c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fb9d 	bl	80077fa <USBD_CtlError>
                  break;
 80070c0:	e041      	b.n	8007146 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	da0b      	bge.n	80070e2 <USBD_StdEPReq+0x2b2>
 80070ca:	7bbb      	ldrb	r3, [r7, #14]
 80070cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070d0:	4613      	mov	r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	3310      	adds	r3, #16
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	4413      	add	r3, r2
 80070de:	3304      	adds	r3, #4
 80070e0:	e00b      	b.n	80070fa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070e2:	7bbb      	ldrb	r3, [r7, #14]
 80070e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070e8:	4613      	mov	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	4413      	add	r3, r2
 80070f8:	3304      	adds	r3, #4
 80070fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80070fc:	7bbb      	ldrb	r3, [r7, #14]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d002      	beq.n	8007108 <USBD_StdEPReq+0x2d8>
 8007102:	7bbb      	ldrb	r3, [r7, #14]
 8007104:	2b80      	cmp	r3, #128	; 0x80
 8007106:	d103      	bne.n	8007110 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	2200      	movs	r2, #0
 800710c:	601a      	str	r2, [r3, #0]
 800710e:	e00e      	b.n	800712e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007110:	7bbb      	ldrb	r3, [r7, #14]
 8007112:	4619      	mov	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f001 f842 	bl	800819e <USBD_LL_IsStallEP>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d003      	beq.n	8007128 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	2201      	movs	r2, #1
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	e002      	b.n	800712e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	2200      	movs	r2, #0
 800712c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	2202      	movs	r2, #2
 8007132:	4619      	mov	r1, r3
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fbd1 	bl	80078dc <USBD_CtlSendData>
              break;
 800713a:	e004      	b.n	8007146 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800713c:	6839      	ldr	r1, [r7, #0]
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fb5b 	bl	80077fa <USBD_CtlError>
              break;
 8007144:	bf00      	nop
          }
          break;
 8007146:	e004      	b.n	8007152 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007148:	6839      	ldr	r1, [r7, #0]
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fb55 	bl	80077fa <USBD_CtlError>
          break;
 8007150:	bf00      	nop
      }
      break;
 8007152:	e005      	b.n	8007160 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007154:	6839      	ldr	r1, [r7, #0]
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fb4f 	bl	80077fa <USBD_CtlError>
      break;
 800715c:	e000      	b.n	8007160 <USBD_StdEPReq+0x330>
      break;
 800715e:	bf00      	nop
  }

  return ret;
 8007160:	7bfb      	ldrb	r3, [r7, #15]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007176:	2300      	movs	r3, #0
 8007178:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800717a:	2300      	movs	r3, #0
 800717c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800717e:	2300      	movs	r3, #0
 8007180:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	885b      	ldrh	r3, [r3, #2]
 8007186:	0a1b      	lsrs	r3, r3, #8
 8007188:	b29b      	uxth	r3, r3
 800718a:	3b01      	subs	r3, #1
 800718c:	2b06      	cmp	r3, #6
 800718e:	f200 8128 	bhi.w	80073e2 <USBD_GetDescriptor+0x276>
 8007192:	a201      	add	r2, pc, #4	; (adr r2, 8007198 <USBD_GetDescriptor+0x2c>)
 8007194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007198:	080071b5 	.word	0x080071b5
 800719c:	080071cd 	.word	0x080071cd
 80071a0:	0800720d 	.word	0x0800720d
 80071a4:	080073e3 	.word	0x080073e3
 80071a8:	080073e3 	.word	0x080073e3
 80071ac:	08007383 	.word	0x08007383
 80071b0:	080073af 	.word	0x080073af
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	7c12      	ldrb	r2, [r2, #16]
 80071c0:	f107 0108 	add.w	r1, r7, #8
 80071c4:	4610      	mov	r0, r2
 80071c6:	4798      	blx	r3
 80071c8:	60f8      	str	r0, [r7, #12]
      break;
 80071ca:	e112      	b.n	80073f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	7c1b      	ldrb	r3, [r3, #16]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10d      	bne.n	80071f0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071dc:	f107 0208 	add.w	r2, r7, #8
 80071e0:	4610      	mov	r0, r2
 80071e2:	4798      	blx	r3
 80071e4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	3301      	adds	r3, #1
 80071ea:	2202      	movs	r2, #2
 80071ec:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80071ee:	e100      	b.n	80073f2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f8:	f107 0208 	add.w	r2, r7, #8
 80071fc:	4610      	mov	r0, r2
 80071fe:	4798      	blx	r3
 8007200:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	3301      	adds	r3, #1
 8007206:	2202      	movs	r2, #2
 8007208:	701a      	strb	r2, [r3, #0]
      break;
 800720a:	e0f2      	b.n	80073f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	885b      	ldrh	r3, [r3, #2]
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b05      	cmp	r3, #5
 8007214:	f200 80ac 	bhi.w	8007370 <USBD_GetDescriptor+0x204>
 8007218:	a201      	add	r2, pc, #4	; (adr r2, 8007220 <USBD_GetDescriptor+0xb4>)
 800721a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721e:	bf00      	nop
 8007220:	08007239 	.word	0x08007239
 8007224:	0800726d 	.word	0x0800726d
 8007228:	080072a1 	.word	0x080072a1
 800722c:	080072d5 	.word	0x080072d5
 8007230:	08007309 	.word	0x08007309
 8007234:	0800733d 	.word	0x0800733d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00b      	beq.n	800725c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	7c12      	ldrb	r2, [r2, #16]
 8007250:	f107 0108 	add.w	r1, r7, #8
 8007254:	4610      	mov	r0, r2
 8007256:	4798      	blx	r3
 8007258:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800725a:	e091      	b.n	8007380 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800725c:	6839      	ldr	r1, [r7, #0]
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 facb 	bl	80077fa <USBD_CtlError>
            err++;
 8007264:	7afb      	ldrb	r3, [r7, #11]
 8007266:	3301      	adds	r3, #1
 8007268:	72fb      	strb	r3, [r7, #11]
          break;
 800726a:	e089      	b.n	8007380 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00b      	beq.n	8007290 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	7c12      	ldrb	r2, [r2, #16]
 8007284:	f107 0108 	add.w	r1, r7, #8
 8007288:	4610      	mov	r0, r2
 800728a:	4798      	blx	r3
 800728c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800728e:	e077      	b.n	8007380 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007290:	6839      	ldr	r1, [r7, #0]
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fab1 	bl	80077fa <USBD_CtlError>
            err++;
 8007298:	7afb      	ldrb	r3, [r7, #11]
 800729a:	3301      	adds	r3, #1
 800729c:	72fb      	strb	r3, [r7, #11]
          break;
 800729e:	e06f      	b.n	8007380 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00b      	beq.n	80072c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	7c12      	ldrb	r2, [r2, #16]
 80072b8:	f107 0108 	add.w	r1, r7, #8
 80072bc:	4610      	mov	r0, r2
 80072be:	4798      	blx	r3
 80072c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072c2:	e05d      	b.n	8007380 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fa97 	bl	80077fa <USBD_CtlError>
            err++;
 80072cc:	7afb      	ldrb	r3, [r7, #11]
 80072ce:	3301      	adds	r3, #1
 80072d0:	72fb      	strb	r3, [r7, #11]
          break;
 80072d2:	e055      	b.n	8007380 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00b      	beq.n	80072f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	7c12      	ldrb	r2, [r2, #16]
 80072ec:	f107 0108 	add.w	r1, r7, #8
 80072f0:	4610      	mov	r0, r2
 80072f2:	4798      	blx	r3
 80072f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072f6:	e043      	b.n	8007380 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072f8:	6839      	ldr	r1, [r7, #0]
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fa7d 	bl	80077fa <USBD_CtlError>
            err++;
 8007300:	7afb      	ldrb	r3, [r7, #11]
 8007302:	3301      	adds	r3, #1
 8007304:	72fb      	strb	r3, [r7, #11]
          break;
 8007306:	e03b      	b.n	8007380 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00b      	beq.n	800732c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	7c12      	ldrb	r2, [r2, #16]
 8007320:	f107 0108 	add.w	r1, r7, #8
 8007324:	4610      	mov	r0, r2
 8007326:	4798      	blx	r3
 8007328:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800732a:	e029      	b.n	8007380 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fa63 	bl	80077fa <USBD_CtlError>
            err++;
 8007334:	7afb      	ldrb	r3, [r7, #11]
 8007336:	3301      	adds	r3, #1
 8007338:	72fb      	strb	r3, [r7, #11]
          break;
 800733a:	e021      	b.n	8007380 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007342:	699b      	ldr	r3, [r3, #24]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00b      	beq.n	8007360 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	7c12      	ldrb	r2, [r2, #16]
 8007354:	f107 0108 	add.w	r1, r7, #8
 8007358:	4610      	mov	r0, r2
 800735a:	4798      	blx	r3
 800735c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800735e:	e00f      	b.n	8007380 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007360:	6839      	ldr	r1, [r7, #0]
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fa49 	bl	80077fa <USBD_CtlError>
            err++;
 8007368:	7afb      	ldrb	r3, [r7, #11]
 800736a:	3301      	adds	r3, #1
 800736c:	72fb      	strb	r3, [r7, #11]
          break;
 800736e:	e007      	b.n	8007380 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007370:	6839      	ldr	r1, [r7, #0]
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fa41 	bl	80077fa <USBD_CtlError>
          err++;
 8007378:	7afb      	ldrb	r3, [r7, #11]
 800737a:	3301      	adds	r3, #1
 800737c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800737e:	bf00      	nop
      }
      break;
 8007380:	e037      	b.n	80073f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	7c1b      	ldrb	r3, [r3, #16]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d109      	bne.n	800739e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007392:	f107 0208 	add.w	r2, r7, #8
 8007396:	4610      	mov	r0, r2
 8007398:	4798      	blx	r3
 800739a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800739c:	e029      	b.n	80073f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800739e:	6839      	ldr	r1, [r7, #0]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fa2a 	bl	80077fa <USBD_CtlError>
        err++;
 80073a6:	7afb      	ldrb	r3, [r7, #11]
 80073a8:	3301      	adds	r3, #1
 80073aa:	72fb      	strb	r3, [r7, #11]
      break;
 80073ac:	e021      	b.n	80073f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	7c1b      	ldrb	r3, [r3, #16]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10d      	bne.n	80073d2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073be:	f107 0208 	add.w	r2, r7, #8
 80073c2:	4610      	mov	r0, r2
 80073c4:	4798      	blx	r3
 80073c6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	3301      	adds	r3, #1
 80073cc:	2207      	movs	r2, #7
 80073ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073d0:	e00f      	b.n	80073f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80073d2:	6839      	ldr	r1, [r7, #0]
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fa10 	bl	80077fa <USBD_CtlError>
        err++;
 80073da:	7afb      	ldrb	r3, [r7, #11]
 80073dc:	3301      	adds	r3, #1
 80073de:	72fb      	strb	r3, [r7, #11]
      break;
 80073e0:	e007      	b.n	80073f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80073e2:	6839      	ldr	r1, [r7, #0]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fa08 	bl	80077fa <USBD_CtlError>
      err++;
 80073ea:	7afb      	ldrb	r3, [r7, #11]
 80073ec:	3301      	adds	r3, #1
 80073ee:	72fb      	strb	r3, [r7, #11]
      break;
 80073f0:	bf00      	nop
  }

  if (err != 0U)
 80073f2:	7afb      	ldrb	r3, [r7, #11]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d11e      	bne.n	8007436 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	88db      	ldrh	r3, [r3, #6]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d016      	beq.n	800742e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007400:	893b      	ldrh	r3, [r7, #8]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00e      	beq.n	8007424 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	88da      	ldrh	r2, [r3, #6]
 800740a:	893b      	ldrh	r3, [r7, #8]
 800740c:	4293      	cmp	r3, r2
 800740e:	bf28      	it	cs
 8007410:	4613      	movcs	r3, r2
 8007412:	b29b      	uxth	r3, r3
 8007414:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007416:	893b      	ldrh	r3, [r7, #8]
 8007418:	461a      	mov	r2, r3
 800741a:	68f9      	ldr	r1, [r7, #12]
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fa5d 	bl	80078dc <USBD_CtlSendData>
 8007422:	e009      	b.n	8007438 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007424:	6839      	ldr	r1, [r7, #0]
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f9e7 	bl	80077fa <USBD_CtlError>
 800742c:	e004      	b.n	8007438 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fa91 	bl	8007956 <USBD_CtlSendStatus>
 8007434:	e000      	b.n	8007438 <USBD_GetDescriptor+0x2cc>
    return;
 8007436:	bf00      	nop
  }
}
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop

08007440 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	889b      	ldrh	r3, [r3, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d131      	bne.n	80074b6 <USBD_SetAddress+0x76>
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	88db      	ldrh	r3, [r3, #6]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d12d      	bne.n	80074b6 <USBD_SetAddress+0x76>
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	885b      	ldrh	r3, [r3, #2]
 800745e:	2b7f      	cmp	r3, #127	; 0x7f
 8007460:	d829      	bhi.n	80074b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	885b      	ldrh	r3, [r3, #2]
 8007466:	b2db      	uxtb	r3, r3
 8007468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800746c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b03      	cmp	r3, #3
 8007478:	d104      	bne.n	8007484 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800747a:	6839      	ldr	r1, [r7, #0]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f9bc 	bl	80077fa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007482:	e01d      	b.n	80074c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	7bfa      	ldrb	r2, [r7, #15]
 8007488:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800748c:	7bfb      	ldrb	r3, [r7, #15]
 800748e:	4619      	mov	r1, r3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 feb0 	bl	80081f6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fa5d 	bl	8007956 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800749c:	7bfb      	ldrb	r3, [r7, #15]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d004      	beq.n	80074ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2202      	movs	r2, #2
 80074a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074aa:	e009      	b.n	80074c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074b4:	e004      	b.n	80074c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80074b6:	6839      	ldr	r1, [r7, #0]
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f99e 	bl	80077fa <USBD_CtlError>
  }
}
 80074be:	bf00      	nop
 80074c0:	bf00      	nop
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	885b      	ldrh	r3, [r3, #2]
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	4b4e      	ldr	r3, [pc, #312]	; (8007618 <USBD_SetConfig+0x150>)
 80074de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80074e0:	4b4d      	ldr	r3, [pc, #308]	; (8007618 <USBD_SetConfig+0x150>)
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d905      	bls.n	80074f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80074e8:	6839      	ldr	r1, [r7, #0]
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f985 	bl	80077fa <USBD_CtlError>
    return USBD_FAIL;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e08c      	b.n	800760e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d002      	beq.n	8007506 <USBD_SetConfig+0x3e>
 8007500:	2b03      	cmp	r3, #3
 8007502:	d029      	beq.n	8007558 <USBD_SetConfig+0x90>
 8007504:	e075      	b.n	80075f2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007506:	4b44      	ldr	r3, [pc, #272]	; (8007618 <USBD_SetConfig+0x150>)
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d020      	beq.n	8007550 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800750e:	4b42      	ldr	r3, [pc, #264]	; (8007618 <USBD_SetConfig+0x150>)
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	461a      	mov	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007518:	4b3f      	ldr	r3, [pc, #252]	; (8007618 <USBD_SetConfig+0x150>)
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	4619      	mov	r1, r3
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f7fe ffe6 	bl	80064f0 <USBD_SetClassConfig>
 8007524:	4603      	mov	r3, r0
 8007526:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007528:	7bfb      	ldrb	r3, [r7, #15]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d008      	beq.n	8007540 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800752e:	6839      	ldr	r1, [r7, #0]
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 f962 	bl	80077fa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2202      	movs	r2, #2
 800753a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800753e:	e065      	b.n	800760c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fa08 	bl	8007956 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2203      	movs	r2, #3
 800754a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800754e:	e05d      	b.n	800760c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fa00 	bl	8007956 <USBD_CtlSendStatus>
      break;
 8007556:	e059      	b.n	800760c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007558:	4b2f      	ldr	r3, [pc, #188]	; (8007618 <USBD_SetConfig+0x150>)
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d112      	bne.n	8007586 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2202      	movs	r2, #2
 8007564:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007568:	4b2b      	ldr	r3, [pc, #172]	; (8007618 <USBD_SetConfig+0x150>)
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	461a      	mov	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007572:	4b29      	ldr	r3, [pc, #164]	; (8007618 <USBD_SetConfig+0x150>)
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f7fe ffd5 	bl	8006528 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f9e9 	bl	8007956 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007584:	e042      	b.n	800760c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007586:	4b24      	ldr	r3, [pc, #144]	; (8007618 <USBD_SetConfig+0x150>)
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	429a      	cmp	r2, r3
 8007592:	d02a      	beq.n	80075ea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	b2db      	uxtb	r3, r3
 800759a:	4619      	mov	r1, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f7fe ffc3 	bl	8006528 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80075a2:	4b1d      	ldr	r3, [pc, #116]	; (8007618 <USBD_SetConfig+0x150>)
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	461a      	mov	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80075ac:	4b1a      	ldr	r3, [pc, #104]	; (8007618 <USBD_SetConfig+0x150>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	4619      	mov	r1, r3
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7fe ff9c 	bl	80064f0 <USBD_SetClassConfig>
 80075b8:	4603      	mov	r3, r0
 80075ba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00f      	beq.n	80075e2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80075c2:	6839      	ldr	r1, [r7, #0]
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f918 	bl	80077fa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	4619      	mov	r1, r3
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7fe ffa8 	bl	8006528 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2202      	movs	r2, #2
 80075dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80075e0:	e014      	b.n	800760c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f9b7 	bl	8007956 <USBD_CtlSendStatus>
      break;
 80075e8:	e010      	b.n	800760c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f9b3 	bl	8007956 <USBD_CtlSendStatus>
      break;
 80075f0:	e00c      	b.n	800760c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80075f2:	6839      	ldr	r1, [r7, #0]
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f900 	bl	80077fa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80075fa:	4b07      	ldr	r3, [pc, #28]	; (8007618 <USBD_SetConfig+0x150>)
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f7fe ff91 	bl	8006528 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007606:	2303      	movs	r3, #3
 8007608:	73fb      	strb	r3, [r7, #15]
      break;
 800760a:	bf00      	nop
  }

  return ret;
 800760c:	7bfb      	ldrb	r3, [r7, #15]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	20000144 	.word	0x20000144

0800761c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	88db      	ldrh	r3, [r3, #6]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d004      	beq.n	8007638 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800762e:	6839      	ldr	r1, [r7, #0]
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f8e2 	bl	80077fa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007636:	e023      	b.n	8007680 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b02      	cmp	r3, #2
 8007642:	dc02      	bgt.n	800764a <USBD_GetConfig+0x2e>
 8007644:	2b00      	cmp	r3, #0
 8007646:	dc03      	bgt.n	8007650 <USBD_GetConfig+0x34>
 8007648:	e015      	b.n	8007676 <USBD_GetConfig+0x5a>
 800764a:	2b03      	cmp	r3, #3
 800764c:	d00b      	beq.n	8007666 <USBD_GetConfig+0x4a>
 800764e:	e012      	b.n	8007676 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	3308      	adds	r3, #8
 800765a:	2201      	movs	r2, #1
 800765c:	4619      	mov	r1, r3
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f93c 	bl	80078dc <USBD_CtlSendData>
        break;
 8007664:	e00c      	b.n	8007680 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	3304      	adds	r3, #4
 800766a:	2201      	movs	r2, #1
 800766c:	4619      	mov	r1, r3
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f934 	bl	80078dc <USBD_CtlSendData>
        break;
 8007674:	e004      	b.n	8007680 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f8be 	bl	80077fa <USBD_CtlError>
        break;
 800767e:	bf00      	nop
}
 8007680:	bf00      	nop
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007698:	b2db      	uxtb	r3, r3
 800769a:	3b01      	subs	r3, #1
 800769c:	2b02      	cmp	r3, #2
 800769e:	d81e      	bhi.n	80076de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	88db      	ldrh	r3, [r3, #6]
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d004      	beq.n	80076b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f8a5 	bl	80077fa <USBD_CtlError>
        break;
 80076b0:	e01a      	b.n	80076e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2201      	movs	r2, #1
 80076b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d005      	beq.n	80076ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	f043 0202 	orr.w	r2, r3, #2
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	330c      	adds	r3, #12
 80076d2:	2202      	movs	r2, #2
 80076d4:	4619      	mov	r1, r3
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f900 	bl	80078dc <USBD_CtlSendData>
      break;
 80076dc:	e004      	b.n	80076e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80076de:	6839      	ldr	r1, [r7, #0]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f88a 	bl	80077fa <USBD_CtlError>
      break;
 80076e6:	bf00      	nop
  }
}
 80076e8:	bf00      	nop
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	885b      	ldrh	r3, [r3, #2]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d107      	bne.n	8007712 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f923 	bl	8007956 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007710:	e013      	b.n	800773a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	885b      	ldrh	r3, [r3, #2]
 8007716:	2b02      	cmp	r3, #2
 8007718:	d10b      	bne.n	8007732 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	889b      	ldrh	r3, [r3, #4]
 800771e:	0a1b      	lsrs	r3, r3, #8
 8007720:	b29b      	uxth	r3, r3
 8007722:	b2da      	uxtb	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f913 	bl	8007956 <USBD_CtlSendStatus>
}
 8007730:	e003      	b.n	800773a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007732:	6839      	ldr	r1, [r7, #0]
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 f860 	bl	80077fa <USBD_CtlError>
}
 800773a:	bf00      	nop
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b082      	sub	sp, #8
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007752:	b2db      	uxtb	r3, r3
 8007754:	3b01      	subs	r3, #1
 8007756:	2b02      	cmp	r3, #2
 8007758:	d80b      	bhi.n	8007772 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	885b      	ldrh	r3, [r3, #2]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d10c      	bne.n	800777c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f8f3 	bl	8007956 <USBD_CtlSendStatus>
      }
      break;
 8007770:	e004      	b.n	800777c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f840 	bl	80077fa <USBD_CtlError>
      break;
 800777a:	e000      	b.n	800777e <USBD_ClrFeature+0x3c>
      break;
 800777c:	bf00      	nop
  }
}
 800777e:	bf00      	nop
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b084      	sub	sp, #16
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	781a      	ldrb	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	3301      	adds	r3, #1
 80077a0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	781a      	ldrb	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	3301      	adds	r3, #1
 80077ae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f7ff fa40 	bl	8006c36 <SWAPBYTE>
 80077b6:	4603      	mov	r3, r0
 80077b8:	461a      	mov	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	3301      	adds	r3, #1
 80077c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	3301      	adds	r3, #1
 80077c8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f7ff fa33 	bl	8006c36 <SWAPBYTE>
 80077d0:	4603      	mov	r3, r0
 80077d2:	461a      	mov	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	3301      	adds	r3, #1
 80077dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	3301      	adds	r3, #1
 80077e2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f7ff fa26 	bl	8006c36 <SWAPBYTE>
 80077ea:	4603      	mov	r3, r0
 80077ec:	461a      	mov	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	80da      	strh	r2, [r3, #6]
}
 80077f2:	bf00      	nop
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b082      	sub	sp, #8
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007804:	2180      	movs	r1, #128	; 0x80
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fc8b 	bl	8008122 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800780c:	2100      	movs	r1, #0
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fc87 	bl	8008122 <USBD_LL_StallEP>
}
 8007814:	bf00      	nop
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007828:	2300      	movs	r3, #0
 800782a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d036      	beq.n	80078a0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007836:	6938      	ldr	r0, [r7, #16]
 8007838:	f000 f836 	bl	80078a8 <USBD_GetLen>
 800783c:	4603      	mov	r3, r0
 800783e:	3301      	adds	r3, #1
 8007840:	b29b      	uxth	r3, r3
 8007842:	005b      	lsls	r3, r3, #1
 8007844:	b29a      	uxth	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800784a:	7dfb      	ldrb	r3, [r7, #23]
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	4413      	add	r3, r2
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	7812      	ldrb	r2, [r2, #0]
 8007854:	701a      	strb	r2, [r3, #0]
  idx++;
 8007856:	7dfb      	ldrb	r3, [r7, #23]
 8007858:	3301      	adds	r3, #1
 800785a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800785c:	7dfb      	ldrb	r3, [r7, #23]
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	4413      	add	r3, r2
 8007862:	2203      	movs	r2, #3
 8007864:	701a      	strb	r2, [r3, #0]
  idx++;
 8007866:	7dfb      	ldrb	r3, [r7, #23]
 8007868:	3301      	adds	r3, #1
 800786a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800786c:	e013      	b.n	8007896 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800786e:	7dfb      	ldrb	r3, [r7, #23]
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	4413      	add	r3, r2
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	7812      	ldrb	r2, [r2, #0]
 8007878:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	3301      	adds	r3, #1
 800787e:	613b      	str	r3, [r7, #16]
    idx++;
 8007880:	7dfb      	ldrb	r3, [r7, #23]
 8007882:	3301      	adds	r3, #1
 8007884:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007886:	7dfb      	ldrb	r3, [r7, #23]
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	4413      	add	r3, r2
 800788c:	2200      	movs	r2, #0
 800788e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007890:	7dfb      	ldrb	r3, [r7, #23]
 8007892:	3301      	adds	r3, #1
 8007894:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1e7      	bne.n	800786e <USBD_GetString+0x52>
 800789e:	e000      	b.n	80078a2 <USBD_GetString+0x86>
    return;
 80078a0:	bf00      	nop
  }
}
 80078a2:	3718      	adds	r7, #24
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80078b0:	2300      	movs	r3, #0
 80078b2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80078b8:	e005      	b.n	80078c6 <USBD_GetLen+0x1e>
  {
    len++;
 80078ba:	7bfb      	ldrb	r3, [r7, #15]
 80078bc:	3301      	adds	r3, #1
 80078be:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	3301      	adds	r3, #1
 80078c4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1f5      	bne.n	80078ba <USBD_GetLen+0x12>
  }

  return len;
 80078ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3714      	adds	r7, #20
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2202      	movs	r2, #2
 80078ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	2100      	movs	r1, #0
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 fc96 	bl	8008234 <USBD_LL_Transmit>

  return USBD_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b084      	sub	sp, #16
 8007916:	af00      	add	r7, sp, #0
 8007918:	60f8      	str	r0, [r7, #12]
 800791a:	60b9      	str	r1, [r7, #8]
 800791c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	2100      	movs	r1, #0
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f000 fc85 	bl	8008234 <USBD_LL_Transmit>

  return USBD_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	2100      	movs	r1, #0
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f000 fc95 	bl	8008276 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b082      	sub	sp, #8
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2204      	movs	r2, #4
 8007962:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007966:	2300      	movs	r3, #0
 8007968:	2200      	movs	r2, #0
 800796a:	2100      	movs	r1, #0
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fc61 	bl	8008234 <USBD_LL_Transmit>

  return USBD_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2205      	movs	r2, #5
 8007988:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800798c:	2300      	movs	r3, #0
 800798e:	2200      	movs	r2, #0
 8007990:	2100      	movs	r1, #0
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fc6f 	bl	8008276 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
	...

080079a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80079a8:	2200      	movs	r2, #0
 80079aa:	4912      	ldr	r1, [pc, #72]	; (80079f4 <MX_USB_DEVICE_Init+0x50>)
 80079ac:	4812      	ldr	r0, [pc, #72]	; (80079f8 <MX_USB_DEVICE_Init+0x54>)
 80079ae:	f7fe fd22 	bl	80063f6 <USBD_Init>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80079b8:	f7f8 fe36 	bl	8000628 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80079bc:	490f      	ldr	r1, [pc, #60]	; (80079fc <MX_USB_DEVICE_Init+0x58>)
 80079be:	480e      	ldr	r0, [pc, #56]	; (80079f8 <MX_USB_DEVICE_Init+0x54>)
 80079c0:	f7fe fd49 	bl	8006456 <USBD_RegisterClass>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80079ca:	f7f8 fe2d 	bl	8000628 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80079ce:	490c      	ldr	r1, [pc, #48]	; (8007a00 <MX_USB_DEVICE_Init+0x5c>)
 80079d0:	4809      	ldr	r0, [pc, #36]	; (80079f8 <MX_USB_DEVICE_Init+0x54>)
 80079d2:	f7fc fff3 	bl	80049bc <USBD_MSC_RegisterStorage>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d001      	beq.n	80079e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80079dc:	f7f8 fe24 	bl	8000628 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80079e0:	4805      	ldr	r0, [pc, #20]	; (80079f8 <MX_USB_DEVICE_Init+0x54>)
 80079e2:	f7fe fd6e 	bl	80064c2 <USBD_Start>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d001      	beq.n	80079f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80079ec:	f7f8 fe1c 	bl	8000628 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80079f0:	bf00      	nop
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	200000b4 	.word	0x200000b4
 80079f8:	20000148 	.word	0x20000148
 80079fc:	2000000c 	.word	0x2000000c
 8007a00:	20000104 	.word	0x20000104

08007a04 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	6039      	str	r1, [r7, #0]
 8007a0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	2212      	movs	r2, #18
 8007a14:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a16:	4b03      	ldr	r3, [pc, #12]	; (8007a24 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr
 8007a24:	200000d0 	.word	0x200000d0

08007a28 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	4603      	mov	r3, r0
 8007a30:	6039      	str	r1, [r7, #0]
 8007a32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	2204      	movs	r2, #4
 8007a38:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a3a:	4b03      	ldr	r3, [pc, #12]	; (8007a48 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	200000e4 	.word	0x200000e4

08007a4c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	4603      	mov	r3, r0
 8007a54:	6039      	str	r1, [r7, #0]
 8007a56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a58:	79fb      	ldrb	r3, [r7, #7]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d105      	bne.n	8007a6a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a5e:	683a      	ldr	r2, [r7, #0]
 8007a60:	4907      	ldr	r1, [pc, #28]	; (8007a80 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a62:	4808      	ldr	r0, [pc, #32]	; (8007a84 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a64:	f7ff feda 	bl	800781c <USBD_GetString>
 8007a68:	e004      	b.n	8007a74 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a6a:	683a      	ldr	r2, [r7, #0]
 8007a6c:	4904      	ldr	r1, [pc, #16]	; (8007a80 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a6e:	4805      	ldr	r0, [pc, #20]	; (8007a84 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a70:	f7ff fed4 	bl	800781c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a74:	4b02      	ldr	r3, [pc, #8]	; (8007a80 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	20000424 	.word	0x20000424
 8007a84:	080083f4 	.word	0x080083f4

08007a88 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	4603      	mov	r3, r0
 8007a90:	6039      	str	r1, [r7, #0]
 8007a92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	4904      	ldr	r1, [pc, #16]	; (8007aa8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007a98:	4804      	ldr	r0, [pc, #16]	; (8007aac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007a9a:	f7ff febf 	bl	800781c <USBD_GetString>
  return USBD_StrDesc;
 8007a9e:	4b02      	ldr	r3, [pc, #8]	; (8007aa8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	20000424 	.word	0x20000424
 8007aac:	08008408 	.word	0x08008408

08007ab0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	6039      	str	r1, [r7, #0]
 8007aba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	221a      	movs	r2, #26
 8007ac0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007ac2:	f000 f843 	bl	8007b4c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007ac6:	4b02      	ldr	r3, [pc, #8]	; (8007ad0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	200000e8 	.word	0x200000e8

08007ad4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	4603      	mov	r3, r0
 8007adc:	6039      	str	r1, [r7, #0]
 8007ade:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007ae0:	79fb      	ldrb	r3, [r7, #7]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d105      	bne.n	8007af2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ae6:	683a      	ldr	r2, [r7, #0]
 8007ae8:	4907      	ldr	r1, [pc, #28]	; (8007b08 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007aea:	4808      	ldr	r0, [pc, #32]	; (8007b0c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007aec:	f7ff fe96 	bl	800781c <USBD_GetString>
 8007af0:	e004      	b.n	8007afc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007af2:	683a      	ldr	r2, [r7, #0]
 8007af4:	4904      	ldr	r1, [pc, #16]	; (8007b08 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007af6:	4805      	ldr	r0, [pc, #20]	; (8007b0c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007af8:	f7ff fe90 	bl	800781c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007afc:	4b02      	ldr	r3, [pc, #8]	; (8007b08 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	20000424 	.word	0x20000424
 8007b0c:	0800841c 	.word	0x0800841c

08007b10 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	4603      	mov	r3, r0
 8007b18:	6039      	str	r1, [r7, #0]
 8007b1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b1c:	79fb      	ldrb	r3, [r7, #7]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d105      	bne.n	8007b2e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b22:	683a      	ldr	r2, [r7, #0]
 8007b24:	4907      	ldr	r1, [pc, #28]	; (8007b44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b26:	4808      	ldr	r0, [pc, #32]	; (8007b48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b28:	f7ff fe78 	bl	800781c <USBD_GetString>
 8007b2c:	e004      	b.n	8007b38 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b2e:	683a      	ldr	r2, [r7, #0]
 8007b30:	4904      	ldr	r1, [pc, #16]	; (8007b44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b32:	4805      	ldr	r0, [pc, #20]	; (8007b48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b34:	f7ff fe72 	bl	800781c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b38:	4b02      	ldr	r3, [pc, #8]	; (8007b44 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	20000424 	.word	0x20000424
 8007b48:	08008428 	.word	0x08008428

08007b4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b52:	4b0f      	ldr	r3, [pc, #60]	; (8007b90 <Get_SerialNum+0x44>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b58:	4b0e      	ldr	r3, [pc, #56]	; (8007b94 <Get_SerialNum+0x48>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b5e:	4b0e      	ldr	r3, [pc, #56]	; (8007b98 <Get_SerialNum+0x4c>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4413      	add	r3, r2
 8007b6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d009      	beq.n	8007b86 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007b72:	2208      	movs	r2, #8
 8007b74:	4909      	ldr	r1, [pc, #36]	; (8007b9c <Get_SerialNum+0x50>)
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f000 f814 	bl	8007ba4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007b7c:	2204      	movs	r2, #4
 8007b7e:	4908      	ldr	r1, [pc, #32]	; (8007ba0 <Get_SerialNum+0x54>)
 8007b80:	68b8      	ldr	r0, [r7, #8]
 8007b82:	f000 f80f 	bl	8007ba4 <IntToUnicode>
  }
}
 8007b86:	bf00      	nop
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	1fff7a10 	.word	0x1fff7a10
 8007b94:	1fff7a14 	.word	0x1fff7a14
 8007b98:	1fff7a18 	.word	0x1fff7a18
 8007b9c:	200000ea 	.word	0x200000ea
 8007ba0:	200000fa 	.word	0x200000fa

08007ba4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b087      	sub	sp, #28
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	75fb      	strb	r3, [r7, #23]
 8007bba:	e027      	b.n	8007c0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	0f1b      	lsrs	r3, r3, #28
 8007bc0:	2b09      	cmp	r3, #9
 8007bc2:	d80b      	bhi.n	8007bdc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	0f1b      	lsrs	r3, r3, #28
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	7dfb      	ldrb	r3, [r7, #23]
 8007bcc:	005b      	lsls	r3, r3, #1
 8007bce:	4619      	mov	r1, r3
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	440b      	add	r3, r1
 8007bd4:	3230      	adds	r2, #48	; 0x30
 8007bd6:	b2d2      	uxtb	r2, r2
 8007bd8:	701a      	strb	r2, [r3, #0]
 8007bda:	e00a      	b.n	8007bf2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	0f1b      	lsrs	r3, r3, #28
 8007be0:	b2da      	uxtb	r2, r3
 8007be2:	7dfb      	ldrb	r3, [r7, #23]
 8007be4:	005b      	lsls	r3, r3, #1
 8007be6:	4619      	mov	r1, r3
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	440b      	add	r3, r1
 8007bec:	3237      	adds	r2, #55	; 0x37
 8007bee:	b2d2      	uxtb	r2, r2
 8007bf0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	011b      	lsls	r3, r3, #4
 8007bf6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007bf8:	7dfb      	ldrb	r3, [r7, #23]
 8007bfa:	005b      	lsls	r3, r3, #1
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	4413      	add	r3, r2
 8007c02:	2200      	movs	r2, #0
 8007c04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c06:	7dfb      	ldrb	r3, [r7, #23]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	75fb      	strb	r3, [r7, #23]
 8007c0c:	7dfa      	ldrb	r2, [r7, #23]
 8007c0e:	79fb      	ldrb	r3, [r7, #7]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d3d3      	bcc.n	8007bbc <IntToUnicode+0x18>
  }
}
 8007c14:	bf00      	nop
 8007c16:	bf00      	nop
 8007c18:	371c      	adds	r7, #28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b083      	sub	sp, #12
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	4603      	mov	r3, r0
 8007c2a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 8007c2c:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b085      	sub	sp, #20
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	4603      	mov	r3, r0
 8007c42:	60b9      	str	r1, [r7, #8]
 8007c44:	607a      	str	r2, [r7, #4]
 8007c46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	2280      	movs	r2, #128	; 0x80
 8007c4c:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c54:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8007c56:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3714      	adds	r7, #20
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 8007c6e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	4603      	mov	r3, r0
 8007c84:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 8007c86:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60b9      	str	r1, [r7, #8]
 8007c9c:	607a      	str	r2, [r7, #4]
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	73fb      	strb	r3, [r7, #15]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
//  UNUSED(lun);
//  UNUSED(buf);
//  UNUSED(blk_addr);
//  UNUSED(blk_len);
	memcpy(buf, &buffer[blk_addr*STORAGE_BLK_SIZ], blk_len*STORAGE_BLK_SIZ);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	025b      	lsls	r3, r3, #9
 8007cac:	4a06      	ldr	r2, [pc, #24]	; (8007cc8 <STORAGE_Read_FS+0x34>)
 8007cae:	1899      	adds	r1, r3, r2
 8007cb0:	89bb      	ldrh	r3, [r7, #12]
 8007cb2:	025b      	lsls	r3, r3, #9
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	68b8      	ldr	r0, [r7, #8]
 8007cb8:	f000 fb82 	bl	80083c0 <memcpy>

  return (USBD_OK);
 8007cbc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	20000624 	.word	0x20000624

08007ccc <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60b9      	str	r1, [r7, #8]
 8007cd4:	607a      	str	r2, [r7, #4]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	4603      	mov	r3, r0
 8007cda:	73fb      	strb	r3, [r7, #15]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
//  UNUSED(lun);
//  UNUSED(buf);
//  UNUSED(blk_addr);
//  UNUSED(blk_len);
	memcpy(&buffer[blk_addr*STORAGE_BLK_SIZ], buf, blk_len*STORAGE_BLK_SIZ);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	025b      	lsls	r3, r3, #9
 8007ce4:	4a06      	ldr	r2, [pc, #24]	; (8007d00 <STORAGE_Write_FS+0x34>)
 8007ce6:	1898      	adds	r0, r3, r2
 8007ce8:	89bb      	ldrh	r3, [r7, #12]
 8007cea:	025b      	lsls	r3, r3, #9
 8007cec:	461a      	mov	r2, r3
 8007cee:	68b9      	ldr	r1, [r7, #8]
 8007cf0:	f000 fb66 	bl	80083c0 <memcpy>

  return (USBD_OK);
 8007cf4:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	20000624 	.word	0x20000624

08007d04 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8007d04:	b480      	push	{r7}
 8007d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8007d08:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b08a      	sub	sp, #40	; 0x28
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d1c:	f107 0314 	add.w	r3, r7, #20
 8007d20:	2200      	movs	r2, #0
 8007d22:	601a      	str	r2, [r3, #0]
 8007d24:	605a      	str	r2, [r3, #4]
 8007d26:	609a      	str	r2, [r3, #8]
 8007d28:	60da      	str	r2, [r3, #12]
 8007d2a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d34:	d13a      	bne.n	8007dac <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d36:	2300      	movs	r3, #0
 8007d38:	613b      	str	r3, [r7, #16]
 8007d3a:	4b1e      	ldr	r3, [pc, #120]	; (8007db4 <HAL_PCD_MspInit+0xa0>)
 8007d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3e:	4a1d      	ldr	r2, [pc, #116]	; (8007db4 <HAL_PCD_MspInit+0xa0>)
 8007d40:	f043 0301 	orr.w	r3, r3, #1
 8007d44:	6313      	str	r3, [r2, #48]	; 0x30
 8007d46:	4b1b      	ldr	r3, [pc, #108]	; (8007db4 <HAL_PCD_MspInit+0xa0>)
 8007d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	613b      	str	r3, [r7, #16]
 8007d50:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007d52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d58:	2302      	movs	r3, #2
 8007d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d60:	2303      	movs	r3, #3
 8007d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007d64:	230a      	movs	r3, #10
 8007d66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d68:	f107 0314 	add.w	r3, r7, #20
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	4812      	ldr	r0, [pc, #72]	; (8007db8 <HAL_PCD_MspInit+0xa4>)
 8007d70:	f7f8 fea0 	bl	8000ab4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007d74:	4b0f      	ldr	r3, [pc, #60]	; (8007db4 <HAL_PCD_MspInit+0xa0>)
 8007d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d78:	4a0e      	ldr	r2, [pc, #56]	; (8007db4 <HAL_PCD_MspInit+0xa0>)
 8007d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d7e:	6353      	str	r3, [r2, #52]	; 0x34
 8007d80:	2300      	movs	r3, #0
 8007d82:	60fb      	str	r3, [r7, #12]
 8007d84:	4b0b      	ldr	r3, [pc, #44]	; (8007db4 <HAL_PCD_MspInit+0xa0>)
 8007d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d88:	4a0a      	ldr	r2, [pc, #40]	; (8007db4 <HAL_PCD_MspInit+0xa0>)
 8007d8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d8e:	6453      	str	r3, [r2, #68]	; 0x44
 8007d90:	4b08      	ldr	r3, [pc, #32]	; (8007db4 <HAL_PCD_MspInit+0xa0>)
 8007d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d98:	60fb      	str	r3, [r7, #12]
 8007d9a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	2100      	movs	r1, #0
 8007da0:	2043      	movs	r0, #67	; 0x43
 8007da2:	f7f8 fe50 	bl	8000a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007da6:	2043      	movs	r0, #67	; 0x43
 8007da8:	f7f8 fe69 	bl	8000a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007dac:	bf00      	nop
 8007dae:	3728      	adds	r7, #40	; 0x28
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	40023800 	.word	0x40023800
 8007db8:	40020000 	.word	0x40020000

08007dbc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	4610      	mov	r0, r2
 8007dd4:	f7fe fbc2 	bl	800655c <USBD_LL_SetupStage>
}
 8007dd8:	bf00      	nop
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	460b      	mov	r3, r1
 8007dea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007df2:	78fa      	ldrb	r2, [r7, #3]
 8007df4:	6879      	ldr	r1, [r7, #4]
 8007df6:	4613      	mov	r3, r2
 8007df8:	00db      	lsls	r3, r3, #3
 8007dfa:	4413      	add	r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	440b      	add	r3, r1
 8007e00:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	78fb      	ldrb	r3, [r7, #3]
 8007e08:	4619      	mov	r1, r3
 8007e0a:	f7fe fbfc 	bl	8006606 <USBD_LL_DataOutStage>
}
 8007e0e:	bf00      	nop
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b082      	sub	sp, #8
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
 8007e1e:	460b      	mov	r3, r1
 8007e20:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007e28:	78fa      	ldrb	r2, [r7, #3]
 8007e2a:	6879      	ldr	r1, [r7, #4]
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	00db      	lsls	r3, r3, #3
 8007e30:	4413      	add	r3, r2
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	440b      	add	r3, r1
 8007e36:	334c      	adds	r3, #76	; 0x4c
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	78fb      	ldrb	r3, [r7, #3]
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	f7fe fc95 	bl	800676c <USBD_LL_DataInStage>
}
 8007e42:	bf00      	nop
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b082      	sub	sp, #8
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7fe fdc9 	bl	80069f0 <USBD_LL_SOF>
}
 8007e5e:	bf00      	nop
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b084      	sub	sp, #16
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d001      	beq.n	8007e7e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007e7a:	f7f8 fbd5 	bl	8000628 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e84:	7bfa      	ldrb	r2, [r7, #15]
 8007e86:	4611      	mov	r1, r2
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7fe fd73 	bl	8006974 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7fe fd1b 	bl	80068d0 <USBD_LL_Reset>
}
 8007e9a:	bf00      	nop
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
	...

08007ea4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fe fd6e 	bl	8006994 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	6812      	ldr	r2, [r2, #0]
 8007ec6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007eca:	f043 0301 	orr.w	r3, r3, #1
 8007ece:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a1b      	ldr	r3, [r3, #32]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d005      	beq.n	8007ee4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ed8:	4b04      	ldr	r3, [pc, #16]	; (8007eec <HAL_PCD_SuspendCallback+0x48>)
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	4a03      	ldr	r2, [pc, #12]	; (8007eec <HAL_PCD_SuspendCallback+0x48>)
 8007ede:	f043 0306 	orr.w	r3, r3, #6
 8007ee2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ee4:	bf00      	nop
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	e000ed00 	.word	0xe000ed00

08007ef0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7fe fd5e 	bl	80069c0 <USBD_LL_Resume>
}
 8007f04:	bf00      	nop
 8007f06:	3708      	adds	r7, #8
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	460b      	mov	r3, r1
 8007f16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f1e:	78fa      	ldrb	r2, [r7, #3]
 8007f20:	4611      	mov	r1, r2
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7fe fdb6 	bl	8006a94 <USBD_LL_IsoOUTIncomplete>
}
 8007f28:	bf00      	nop
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f42:	78fa      	ldrb	r2, [r7, #3]
 8007f44:	4611      	mov	r1, r2
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fe fd72 	bl	8006a30 <USBD_LL_IsoINIncomplete>
}
 8007f4c:	bf00      	nop
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fe fdc8 	bl	8006af8 <USBD_LL_DevConnected>
}
 8007f68:	bf00      	nop
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7fe fdc5 	bl	8006b0e <USBD_LL_DevDisconnected>
}
 8007f84:	bf00      	nop
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d13c      	bne.n	8008016 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007f9c:	4a20      	ldr	r2, [pc, #128]	; (8008020 <USBD_LL_Init+0x94>)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a1e      	ldr	r2, [pc, #120]	; (8008020 <USBD_LL_Init+0x94>)
 8007fa8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007fac:	4b1c      	ldr	r3, [pc, #112]	; (8008020 <USBD_LL_Init+0x94>)
 8007fae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007fb2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007fb4:	4b1a      	ldr	r3, [pc, #104]	; (8008020 <USBD_LL_Init+0x94>)
 8007fb6:	2204      	movs	r2, #4
 8007fb8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007fba:	4b19      	ldr	r3, [pc, #100]	; (8008020 <USBD_LL_Init+0x94>)
 8007fbc:	2202      	movs	r2, #2
 8007fbe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007fc0:	4b17      	ldr	r3, [pc, #92]	; (8008020 <USBD_LL_Init+0x94>)
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007fc6:	4b16      	ldr	r3, [pc, #88]	; (8008020 <USBD_LL_Init+0x94>)
 8007fc8:	2202      	movs	r2, #2
 8007fca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007fcc:	4b14      	ldr	r3, [pc, #80]	; (8008020 <USBD_LL_Init+0x94>)
 8007fce:	2200      	movs	r2, #0
 8007fd0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007fd2:	4b13      	ldr	r3, [pc, #76]	; (8008020 <USBD_LL_Init+0x94>)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007fd8:	4b11      	ldr	r3, [pc, #68]	; (8008020 <USBD_LL_Init+0x94>)
 8007fda:	2200      	movs	r2, #0
 8007fdc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007fde:	4b10      	ldr	r3, [pc, #64]	; (8008020 <USBD_LL_Init+0x94>)
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007fe4:	4b0e      	ldr	r3, [pc, #56]	; (8008020 <USBD_LL_Init+0x94>)
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007fea:	480d      	ldr	r0, [pc, #52]	; (8008020 <USBD_LL_Init+0x94>)
 8007fec:	f7f8 fee6 	bl	8000dbc <HAL_PCD_Init>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d001      	beq.n	8007ffa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007ff6:	f7f8 fb17 	bl	8000628 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007ffa:	2180      	movs	r1, #128	; 0x80
 8007ffc:	4808      	ldr	r0, [pc, #32]	; (8008020 <USBD_LL_Init+0x94>)
 8007ffe:	f7fa f96a 	bl	80022d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008002:	2240      	movs	r2, #64	; 0x40
 8008004:	2100      	movs	r1, #0
 8008006:	4806      	ldr	r0, [pc, #24]	; (8008020 <USBD_LL_Init+0x94>)
 8008008:	f7fa f91e 	bl	8002248 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800800c:	2280      	movs	r2, #128	; 0x80
 800800e:	2101      	movs	r1, #1
 8008010:	4803      	ldr	r0, [pc, #12]	; (8008020 <USBD_LL_Init+0x94>)
 8008012:	f7fa f919 	bl	8002248 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3708      	adds	r7, #8
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	20010624 	.word	0x20010624

08008024 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800802c:	2300      	movs	r3, #0
 800802e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008030:	2300      	movs	r3, #0
 8008032:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800803a:	4618      	mov	r0, r3
 800803c:	f7f8 ffdb 	bl	8000ff6 <HAL_PCD_Start>
 8008040:	4603      	mov	r3, r0
 8008042:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008044:	7bfb      	ldrb	r3, [r7, #15]
 8008046:	4618      	mov	r0, r3
 8008048:	f000 f962 	bl	8008310 <USBD_Get_USB_Status>
 800804c:	4603      	mov	r3, r0
 800804e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008050:	7bbb      	ldrb	r3, [r7, #14]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	4608      	mov	r0, r1
 8008064:	4611      	mov	r1, r2
 8008066:	461a      	mov	r2, r3
 8008068:	4603      	mov	r3, r0
 800806a:	70fb      	strb	r3, [r7, #3]
 800806c:	460b      	mov	r3, r1
 800806e:	70bb      	strb	r3, [r7, #2]
 8008070:	4613      	mov	r3, r2
 8008072:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008082:	78bb      	ldrb	r3, [r7, #2]
 8008084:	883a      	ldrh	r2, [r7, #0]
 8008086:	78f9      	ldrb	r1, [r7, #3]
 8008088:	f7f9 fcac 	bl	80019e4 <HAL_PCD_EP_Open>
 800808c:	4603      	mov	r3, r0
 800808e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008090:	7bfb      	ldrb	r3, [r7, #15]
 8008092:	4618      	mov	r0, r3
 8008094:	f000 f93c 	bl	8008310 <USBD_Get_USB_Status>
 8008098:	4603      	mov	r3, r0
 800809a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800809c:	7bbb      	ldrb	r3, [r7, #14]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b084      	sub	sp, #16
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	460b      	mov	r3, r1
 80080b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080b6:	2300      	movs	r3, #0
 80080b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080c0:	78fa      	ldrb	r2, [r7, #3]
 80080c2:	4611      	mov	r1, r2
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7f9 fcf5 	bl	8001ab4 <HAL_PCD_EP_Close>
 80080ca:	4603      	mov	r3, r0
 80080cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080ce:	7bfb      	ldrb	r3, [r7, #15]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f000 f91d 	bl	8008310 <USBD_Get_USB_Status>
 80080d6:	4603      	mov	r3, r0
 80080d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080da:	7bbb      	ldrb	r3, [r7, #14]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	460b      	mov	r3, r1
 80080ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080fe:	78fa      	ldrb	r2, [r7, #3]
 8008100:	4611      	mov	r1, r2
 8008102:	4618      	mov	r0, r3
 8008104:	f7f9 feb8 	bl	8001e78 <HAL_PCD_EP_Flush>
 8008108:	4603      	mov	r3, r0
 800810a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800810c:	7bfb      	ldrb	r3, [r7, #15]
 800810e:	4618      	mov	r0, r3
 8008110:	f000 f8fe 	bl	8008310 <USBD_Get_USB_Status>
 8008114:	4603      	mov	r3, r0
 8008116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008118:	7bbb      	ldrb	r3, [r7, #14]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b084      	sub	sp, #16
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	460b      	mov	r3, r1
 800812c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800812e:	2300      	movs	r3, #0
 8008130:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800813c:	78fa      	ldrb	r2, [r7, #3]
 800813e:	4611      	mov	r1, r2
 8008140:	4618      	mov	r0, r3
 8008142:	f7f9 fdae 	bl	8001ca2 <HAL_PCD_EP_SetStall>
 8008146:	4603      	mov	r3, r0
 8008148:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800814a:	7bfb      	ldrb	r3, [r7, #15]
 800814c:	4618      	mov	r0, r3
 800814e:	f000 f8df 	bl	8008310 <USBD_Get_USB_Status>
 8008152:	4603      	mov	r3, r0
 8008154:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008156:	7bbb      	ldrb	r3, [r7, #14]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	460b      	mov	r3, r1
 800816a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800817a:	78fa      	ldrb	r2, [r7, #3]
 800817c:	4611      	mov	r1, r2
 800817e:	4618      	mov	r0, r3
 8008180:	f7f9 fdf3 	bl	8001d6a <HAL_PCD_EP_ClrStall>
 8008184:	4603      	mov	r3, r0
 8008186:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008188:	7bfb      	ldrb	r3, [r7, #15]
 800818a:	4618      	mov	r0, r3
 800818c:	f000 f8c0 	bl	8008310 <USBD_Get_USB_Status>
 8008190:	4603      	mov	r3, r0
 8008192:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008194:	7bbb      	ldrb	r3, [r7, #14]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800819e:	b480      	push	{r7}
 80081a0:	b085      	sub	sp, #20
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	460b      	mov	r3, r1
 80081a8:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80081b0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80081b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	da0b      	bge.n	80081d2 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80081ba:	78fb      	ldrb	r3, [r7, #3]
 80081bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081c0:	68f9      	ldr	r1, [r7, #12]
 80081c2:	4613      	mov	r3, r2
 80081c4:	00db      	lsls	r3, r3, #3
 80081c6:	4413      	add	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	440b      	add	r3, r1
 80081cc:	333e      	adds	r3, #62	; 0x3e
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	e00b      	b.n	80081ea <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80081d2:	78fb      	ldrb	r3, [r7, #3]
 80081d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081d8:	68f9      	ldr	r1, [r7, #12]
 80081da:	4613      	mov	r3, r2
 80081dc:	00db      	lsls	r3, r3, #3
 80081de:	4413      	add	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	440b      	add	r3, r1
 80081e4:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80081e8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3714      	adds	r7, #20
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr

080081f6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b084      	sub	sp, #16
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
 80081fe:	460b      	mov	r3, r1
 8008200:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008202:	2300      	movs	r3, #0
 8008204:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008206:	2300      	movs	r3, #0
 8008208:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008210:	78fa      	ldrb	r2, [r7, #3]
 8008212:	4611      	mov	r1, r2
 8008214:	4618      	mov	r0, r3
 8008216:	f7f9 fbc0 	bl	800199a <HAL_PCD_SetAddress>
 800821a:	4603      	mov	r3, r0
 800821c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800821e:	7bfb      	ldrb	r3, [r7, #15]
 8008220:	4618      	mov	r0, r3
 8008222:	f000 f875 	bl	8008310 <USBD_Get_USB_Status>
 8008226:	4603      	mov	r3, r0
 8008228:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800822a:	7bbb      	ldrb	r3, [r7, #14]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b086      	sub	sp, #24
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	607a      	str	r2, [r7, #4]
 800823e:	603b      	str	r3, [r7, #0]
 8008240:	460b      	mov	r3, r1
 8008242:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008244:	2300      	movs	r3, #0
 8008246:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008252:	7af9      	ldrb	r1, [r7, #11]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	f7f9 fcd9 	bl	8001c0e <HAL_PCD_EP_Transmit>
 800825c:	4603      	mov	r3, r0
 800825e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008260:	7dfb      	ldrb	r3, [r7, #23]
 8008262:	4618      	mov	r0, r3
 8008264:	f000 f854 	bl	8008310 <USBD_Get_USB_Status>
 8008268:	4603      	mov	r3, r0
 800826a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800826c:	7dbb      	ldrb	r3, [r7, #22]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3718      	adds	r7, #24
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b086      	sub	sp, #24
 800827a:	af00      	add	r7, sp, #0
 800827c:	60f8      	str	r0, [r7, #12]
 800827e:	607a      	str	r2, [r7, #4]
 8008280:	603b      	str	r3, [r7, #0]
 8008282:	460b      	mov	r3, r1
 8008284:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800828a:	2300      	movs	r3, #0
 800828c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008294:	7af9      	ldrb	r1, [r7, #11]
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	f7f9 fc55 	bl	8001b48 <HAL_PCD_EP_Receive>
 800829e:	4603      	mov	r3, r0
 80082a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082a2:	7dfb      	ldrb	r3, [r7, #23]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f000 f833 	bl	8008310 <USBD_Get_USB_Status>
 80082aa:	4603      	mov	r3, r0
 80082ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3718      	adds	r7, #24
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	460b      	mov	r3, r1
 80082c2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80082ca:	78fa      	ldrb	r2, [r7, #3]
 80082cc:	4611      	mov	r1, r2
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7f9 fc85 	bl	8001bde <HAL_PCD_EP_GetRxCount>
 80082d4:	4603      	mov	r3, r0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3708      	adds	r7, #8
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
	...

080082e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80082e8:	4b03      	ldr	r3, [pc, #12]	; (80082f8 <USBD_static_malloc+0x18>)
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	370c      	adds	r7, #12
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	20010b30 	.word	0x20010b30

080082fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]

}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	4603      	mov	r3, r0
 8008318:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800831e:	79fb      	ldrb	r3, [r7, #7]
 8008320:	2b03      	cmp	r3, #3
 8008322:	d817      	bhi.n	8008354 <USBD_Get_USB_Status+0x44>
 8008324:	a201      	add	r2, pc, #4	; (adr r2, 800832c <USBD_Get_USB_Status+0x1c>)
 8008326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832a:	bf00      	nop
 800832c:	0800833d 	.word	0x0800833d
 8008330:	08008343 	.word	0x08008343
 8008334:	08008349 	.word	0x08008349
 8008338:	0800834f 	.word	0x0800834f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800833c:	2300      	movs	r3, #0
 800833e:	73fb      	strb	r3, [r7, #15]
    break;
 8008340:	e00b      	b.n	800835a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008342:	2303      	movs	r3, #3
 8008344:	73fb      	strb	r3, [r7, #15]
    break;
 8008346:	e008      	b.n	800835a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008348:	2301      	movs	r3, #1
 800834a:	73fb      	strb	r3, [r7, #15]
    break;
 800834c:	e005      	b.n	800835a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800834e:	2303      	movs	r3, #3
 8008350:	73fb      	strb	r3, [r7, #15]
    break;
 8008352:	e002      	b.n	800835a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008354:	2303      	movs	r3, #3
 8008356:	73fb      	strb	r3, [r7, #15]
    break;
 8008358:	bf00      	nop
  }
  return usb_status;
 800835a:	7bfb      	ldrb	r3, [r7, #15]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3714      	adds	r7, #20
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <memset>:
 8008368:	4402      	add	r2, r0
 800836a:	4603      	mov	r3, r0
 800836c:	4293      	cmp	r3, r2
 800836e:	d100      	bne.n	8008372 <memset+0xa>
 8008370:	4770      	bx	lr
 8008372:	f803 1b01 	strb.w	r1, [r3], #1
 8008376:	e7f9      	b.n	800836c <memset+0x4>

08008378 <__libc_init_array>:
 8008378:	b570      	push	{r4, r5, r6, lr}
 800837a:	4d0d      	ldr	r5, [pc, #52]	; (80083b0 <__libc_init_array+0x38>)
 800837c:	4c0d      	ldr	r4, [pc, #52]	; (80083b4 <__libc_init_array+0x3c>)
 800837e:	1b64      	subs	r4, r4, r5
 8008380:	10a4      	asrs	r4, r4, #2
 8008382:	2600      	movs	r6, #0
 8008384:	42a6      	cmp	r6, r4
 8008386:	d109      	bne.n	800839c <__libc_init_array+0x24>
 8008388:	4d0b      	ldr	r5, [pc, #44]	; (80083b8 <__libc_init_array+0x40>)
 800838a:	4c0c      	ldr	r4, [pc, #48]	; (80083bc <__libc_init_array+0x44>)
 800838c:	f000 f826 	bl	80083dc <_init>
 8008390:	1b64      	subs	r4, r4, r5
 8008392:	10a4      	asrs	r4, r4, #2
 8008394:	2600      	movs	r6, #0
 8008396:	42a6      	cmp	r6, r4
 8008398:	d105      	bne.n	80083a6 <__libc_init_array+0x2e>
 800839a:	bd70      	pop	{r4, r5, r6, pc}
 800839c:	f855 3b04 	ldr.w	r3, [r5], #4
 80083a0:	4798      	blx	r3
 80083a2:	3601      	adds	r6, #1
 80083a4:	e7ee      	b.n	8008384 <__libc_init_array+0xc>
 80083a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80083aa:	4798      	blx	r3
 80083ac:	3601      	adds	r6, #1
 80083ae:	e7f2      	b.n	8008396 <__libc_init_array+0x1e>
 80083b0:	08008474 	.word	0x08008474
 80083b4:	08008474 	.word	0x08008474
 80083b8:	08008474 	.word	0x08008474
 80083bc:	08008478 	.word	0x08008478

080083c0 <memcpy>:
 80083c0:	440a      	add	r2, r1
 80083c2:	4291      	cmp	r1, r2
 80083c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80083c8:	d100      	bne.n	80083cc <memcpy+0xc>
 80083ca:	4770      	bx	lr
 80083cc:	b510      	push	{r4, lr}
 80083ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083d6:	4291      	cmp	r1, r2
 80083d8:	d1f9      	bne.n	80083ce <memcpy+0xe>
 80083da:	bd10      	pop	{r4, pc}

080083dc <_init>:
 80083dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083de:	bf00      	nop
 80083e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083e2:	bc08      	pop	{r3}
 80083e4:	469e      	mov	lr, r3
 80083e6:	4770      	bx	lr

080083e8 <_fini>:
 80083e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ea:	bf00      	nop
 80083ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ee:	bc08      	pop	{r3}
 80083f0:	469e      	mov	lr, r3
 80083f2:	4770      	bx	lr
